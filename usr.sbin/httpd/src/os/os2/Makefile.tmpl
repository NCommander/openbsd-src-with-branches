CFLAGS=$(OPTIM) $(CFLAGS1) $(EXTRA_CFLAGS)
LIBS=$(EXTRA_LIBS) $(LIBS1)
INCLUDES=$(INCLUDES1) $(INCLUDES0) $(EXTRA_INCLUDES)
LDFLAGS=$(LDFLAGS1) $(EXTRA_LDFLAGS)

OBJS=	os.o os-inline.o util_os2.o
COPY=	os.h os-inline.c

LIB=	libos.a

all:	$(LIB) copy

copy:
	for i in $(COPY); do  \
		rm -f $(INCDIR)/$$i ;\
		cp `pwd`/$$i $(INCDIR)/$$i ;\
	done

$(LIB): $(OBJS)
	rm -f $@
	ar cr $@ $(OBJS)
	$(RANLIB) $@

.c.o:
	$(CC) -c $(INCLUDES) $(CFLAGS) $<

clean:
	for i in $(COPY); do  rm -f $(INCDIR)/$$i ; done
	rm -f $(OBJS) $(LIB)

distclean: clean
	-rm -f Makefile

$(OBJS): Makefile

# We really don't expect end users to use this rule.  It works only with
# gcc, and rebuilds Makefile.tmpl.  You have to re-run Configure after
# using it.
depend:
	cp Makefile.tmpl Makefile.tmpl.bak \
	    && sed -ne '1,/^# DO NOT REMOVE/p' Makefile.tmpl > Makefile.new \
	    && gcc -MM $(INCLUDES) $(CFLAGS) *.c >> Makefile.new \
	    && sed -e '1,$$s: $(INCDIR)/: $$(INCDIR)/:g' \
	           -e '1,$$s: $(OSDIR)/: $$(OSDIR)/:g' Makefile.new \
		> Makefile.tmpl \
	    && rm Makefile.new

# DO NOT REMOVE
os.o:	os.c os-inline.c
