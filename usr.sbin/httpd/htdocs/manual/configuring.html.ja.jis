<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title>設定ファイル</title>
</head>
<!-- English revision: 1.7 -->

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<body
 bgcolor="#FFFFFF"
 text="#000000"
 link="#0000FF"
 vlink="#000080"
 alink="#FF0000"
>
<!--#include virtual="header.html" -->
<h1 align="CENTER">ファイルの設定</h1>

<ul>
<li><a href="#main">メインの設定ファイル</a></li>
<li><a href="#syntax">設定ファイルの構文</a></li>
<li><a href="#modules">モジュール</a></li>
<li><a href="#scope">ディレクティブの適用範囲</a></li>
<li><a href="#htaccess">.htaccess ファイル</a></li>
<li><a href="#logs">ログファイル</a></li>
</ul>

<hr>

<h2><a name="main">メインの設定ファイル</a></h2>

<table border="1"><tr><td valign="top">
<strong>関連モジュール</strong><br><br>
<a href="mod/mod_mime.html">mod_mime</a><br>
</td>

<td valign="top">
<strong>関連ディレクティブ</strong><br><br>
<A HREF="mod/core.html#accessconfig">AccessConfig</A><br>
<A HREF="mod/core.html#ifdefine">&lt;IfDefine&gt;</A><br>
<a href="mod/core.html#include">Include</a><br>
<A HREF="mod/core.html#resourceconfig">ResourceConfig</A><br>
<A HREF="mod/mod_mime.html#typesconfig">TypesConfig</A><br>
</td></tr></table>

<P>Apache は <A HREF="mod/directives.html">ディレクティブ</A> を
設定ファイルに平文で書くことにより設定します。メインの
設定ファイルは普通は <CODE>httpd.conf</CODE> という名前です。
このファイルの位置はコンパイル時に設定されますが、コマンドラインの
<CODE>-f</CODE> フラグにより上書きできます。
サイトによっては <A
HREF="http://www.apache.org/info/three-config-files.html">歴史的
理由</A> により <CODE>srm.conf</CODE> と <CODE>access.conf</CODE> が
ある場合もあります。その上、他の設定ファイルが
<CODE><A HREF="mod/core.html#include">Include</A></CODE> ディレクティブ
によって追加されているかもしれません。どのディレクティブも
これらの設定ファイルのどれにでも入れられます。Apache は起動時か
再起動時のみメイン設定ファイルの変更を認識します。</p>

<P>Apache 1.3.13 の新しい機能として、設定ファイルが実際はディレクトリで
あるときにはそのディレクトリで見つかったすべてのファイル
(とサブディレクトリ) を解析するというものがあります。利用法としては、
バーチャルホストを追加するときに、それぞれのホストに対して小さな設定
ファイルを作り、設定ディレクトリに置くというものが挙げられます。
こうすると、単にファイルの追加、削除をすることにより全くファイルを
編集することなくバーチャルホストの追加、削除ができます。これは自動化を
ずっと簡単にします。

<P>
サーバは mime ドキュメントタイプを含んでいるファイルも読み込みます。
ファイル名は <A HREF="mod/mod_mime.html#typesconfig"
>TypesConfig</A> で設定され、デフォルトで <CODE>mime.types</CODE>
になっています。
<hr>

<H2><a name="syntax">設定ファイルの構文</a></H2>

<P>Apache 設定ファイルは1行に1つのディレクティブからなります。
バックスラッシュ "\" はディレクティブが次の行に継続していることを
示すために行の最後の文字として使われているかもしれません。
行の最後とバックスラッシュの間に他の文字や空白があってはいけません。

<P>設定ファイルのディレクティブは大文字小文字を区別しませんが、
引数にはしばしば区別するものがあります。ハッシュ文字 "#" で始まる行は
コメントと見なされて無視されます。設定ディレクティブの後の行では
コメントが含まれていては<STRONG>いけません</STRONG>。ディレクティブの
前の空行と空白は無視されますので、わかりやすくするためにディレクティブを
インデントすることができます。

<P>設定ファイルの構文エラーは
<CODE>apachectl configtest</CODE> かコマンドラインオプション
<CODE>-t</CODE> を使って調べられます。

<hr>

<H2><a name="modules">モジュール</a></H2>

<table border="1"><tr><td valign="top">
<strong>関連モジュール</strong><br><br>
<a href="mod/mod_so.html">mod_so</a><br>
</td>
<td valign="top">
<strong>関連ディレクティブ</strong><br><br>
<A HREF="mod/core.html#addmodule">AddModule</A><br>
<A HREF="mod/core.html#clearmodulelist">ClearModuleList</A><br>
<A HREF="mod/core.html#ifmodule">&lt;IfModule&gt;</A><br>
<a href="mod/mod_so.html#loadmodule">LoadModule</a><br>
</td></tr></table>

<P>Apache はモジュール化されたサーバです。コアサーバには
一番基本的な機能だけが含まれています。拡張機能は Apache に
ロードされる <A HREF="mod/index-bytype.html">モジュール</A> として
利用可能です。デフォルトではコンパイル時にモジュールの<A
HREF="mod/module-dict.html#Status">基本</A>セットが
サーバに含まれます。サーバが<A HREF="dso.html">動的ロード</A>モジュールを
使うようにコンパイルされている場合は、モジュールを別にコンパイルして、
いつでも <A HREF="mod/mod_so.html#loadmodule">LoadModule</A>
ディレクティブを使って追加できます。そうでない場合は、モジュールの
追加や削除をするためには Apache を再コンパイルする必要があります。
設定ディレクティブは <A
HREF="mod/core.html#ifmodule">&lt;IfModule&gt;</A> ブロックに
入れることで特定のモジュールが存在するときだけ
設定ファイルに含まれるようにすることができます。

<P>コマンドラインオプション <CODE>-l</CODE> を使って
現時点でどのモジュールがサーバにコンパイルされているかを
知ることができます。

<hr>

<H2><a name="scope">ディレクティブの適用範囲</a></H2>

<table border="1"><tr><td valign="top">
<strong>関連ディレクティブ</strong><br><br>
<A HREF="mod/core.html#directory">&lt;Directory&gt;</A><br>
<A HREF="mod/core.html#directorymatch">&lt;DirectoryMatch&gt;</A><br>
<A HREF="mod/core.html#files">&lt;Files&gt;</A><br>
<A HREF="mod/core.html#filesmatch">&lt;FilesMatch&gt;</A><br>
<A HREF="mod/core.html#location">&lt;Location&gt;</A><br>
<A HREF="mod/core.html#locationmatch">&lt;LocationMatch&gt;</A><br>
<a href="mod/core.html#virtualhost">&lt;VirtualHost&gt;</a><br>
</td></tr></table>

<P>メイン設定ファイルにあるディレクティブはサーバ全体に適用されます。
サーバの一部分の設定だけを変更したい場合は
<CODE><A HREF="mod/core.html#directory">&lt;Directory&gt;</A>,
<A HREF="mod/core.html#directorymatch">&lt;DirectoryMatch&gt;</A>,
<A HREF="mod/core.html#files">&lt;Files&gt;</A>,
<A HREF="mod/core.html#filesmatch">&lt;FilesMatch&gt;</A>,
<A HREF="mod/core.html#location">&lt;Location&gt;</A>,
<A HREF="mod/core.html#locationmatch">&lt;LocationMatch&gt;</A>
</CODE>
セクションの中に置くことで適用範囲を決められます。これらのセクションは
その中にあるディレクティブの適用範囲を特定のファイルシステムの位置や
URL に限定します。非常に細粒度の設定を可能にするために、セクションを
入れ子にすることもできます。

<P>Apache は同時に多くの違うウェブサイトを扱う能力があります。
これは <A HREF="vhosts/">バーチャルホスト</A> と呼ばれています。
特定のウェブサイトにのみ適用されるようにするために、ディレクティブは
<CODE><A HREF="mod/core.html#virtualhost">&lt;VirtualHost&gt;</A></CODE>
セクションの中に置くことでも適用範囲を変えることができます。

<P>ほとんどのディレクティブはどのセクションにでも書けますが、
中にはコンテキストによっては意味をなさないものもあります。例えば、
プロセスの作成を制御しているディレクティブはメインサーバのコンテキストに
のみ書くことができます。どのディレクティブをどのセクションに書くことが
できるかを知るためにはディレクティブの
<A HREF="mod/directive-dict.html#Context">Context</A> を調べてください。
詳しい情報は、<A
HREF="sections.html">Directory, Location, Files セクションの動作法</A>
にあります。

<hr>

<H2><a name="htaccess">.htaccess ファイル</a></H2>

<table border="1"><tr><td valign="top">
<strong>関連ディレクティブ</strong><br><br>
<A HREF="mod/core.html#accessfilename">AccessFileName</A><br>
<A HREF="mod/core.html#allowoverride">AllowOverride</A><br>
</td></tr></table>

<P>Apache ではウェブツリーの中に置かれた特別なファイルを使って
非中央集権的な設定管理をできます。その特別なファイルは普通は
<CODE>.htaccess</CODE> という名前で、
<A HREF="mod/core.html#accessfilename"><CODE
>AccessFileName</CODE></A> ディレクティブでどんな名前でも指定できます。
<CODE>.htaccess</CODE> ファイルに書かれたディレクティブはファイルを
置いたディレクトリとその全てのサブディレクトリに適用されます。
<CODE>.htaccess</CODE> ファイルはすべてのリクエストで
読み込まれるため、変更はすぐに反映されます。

<P>どのディレクティブが <CODE>.htaccess</CODE> ファイルに書けるかを
調べるには、ディレクティブの
<A HREF="mod/directive-dict.html#Context">Context</A> を調べてください。
サーバ管理者はさらにメイン設定ファイルの <A
HREF="mod/core.html#allowoverride"><CODE>AllowOverride</CODE></A>
を設定することでどのディレクティブを <CODE>.htaccess</CODE> ファイルに
書けるようにするかを制御することができます。

<hr>

<H2><a name="logs">ログファイル</a></H2>
<!-- This section should be moved to its own file -->
<H3>セキュリティに関する警告</H3>
Apache がログファイルを書いているディレクトリに書き込める人は誰でも
ほぼ確実にサーバが起動された uid のアクセスを取得できます。
そしてそれは普通 root です。その結果をよくわからずにログが保管されている
ディレクトリに書き込み権限を与えたり<EM>しない</EM>でください。詳細は
<A HREF="misc/security_tips.html">セキュリティ情報</A>を参照してください。

<H3>pid ファイル</H3>

<P>起動時に Apache は親 httpd プロセスのプロセス ID を
<CODE>logs/httpd.pid</CODE> ファイルに保存します。このファイル名は
<A HREF="mod/core.html#pidfile">PidFile</A>
ディレクティブで変更することができます。プロセス ID は管理者がデーモンを
再起動したり終了したりするために使います。Unix では HUP と USR1 シグナルで
デーモンが設定ファイルを再読み込みします。TERM シグナルはデーモンを
優雅に終了させます。Windows では、代わりにコマンドラインオプション -k を
使います。
詳しい情報は<A HREF="stopping.html">起動と終了</A>を参照してください。

<P>
プロセスが異常終了する (もしくは kill される) と、子 httpd プロセスを
kill する必要があります。

<H3>エラーログ</H3>

<P>サーバはエラーメッセージをログファイルに記録します。デフォルトは、Unix
では <CODE>logs/error_log</CODE> で Windows と OS/2 では
<CODE>logs/error.log</CODE> です。ファイル名は <A
HREF="mod/core.html#errorlog">ErrorLog</A> ディレクティブで設定できます。
違う<A
HREF="mod/core.html#virtualhost">バーチャルホスト</A>
に違うエラーログを設定することができます。

<H3>転送ログ</H3>

<P>サーバは普通それぞれのリクエストを転送ファイルにログを取ります。
デフォルトは Unix では <CODE>logs/access_log</CODE> で Windows と
OS/2 では <CODE>logs/access.log</CODE> です。ファイル名は
<A HREF="mod/mod_log_config.html#customlog">CustomLog</A>
ディレクティブをで設定できます。違う<A
HREF="mod/core.html#virtualhost">バーチャルホスト</A>に
違う転送ログを設定することができます。


<!--#include virtual="footer.html" -->
</BODY>
</HTML>
