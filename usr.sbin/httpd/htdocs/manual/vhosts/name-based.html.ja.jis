<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML><HEAD>
<!-- English revision: 1.15 -->
<TITLE>Apache のネームベースのバーチャルホスト</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
    <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>

<H1 ALIGN="CENTER">Apache のネームベースのバーチャルホストのサポート</H1>

<STRONG>参考:</STRONG>
<A HREF="ip-based.html">IP ベースのバーチャルホストのサポート</A>

<HR>

<H2>ネームベースと IP ベースのバーチャルホストの比較</H2>

<P>初期のバージョンの HTTP では (他の多くのプロトコル、例えば FTP と同様)
一つのサーバ上でのバーチャルホストごとに異なった IP アドレスが必要でした。
いくつかのプラットフォームでは、
これが実行可能なバーチャルホストの数を限定してしまうことになりました。
また、IP アドレスの数には限りがあるということについての懸念から、
レジストラ (ARIN, RIPE, APNIC) はバーチャルホストごとに
IP を割り当てるようなことは避けるよう強く要請しています。</P>

<P><CODE>HTTP/1.1</CODE> プロトコルや、
<CODE>HTTP/1.0</CODE> での一般的な拡張には、
どの名前でリクエストされているのかをサーバが判別する方法があります。
Apache 1.1 以降では昔からの「ホスト名ごとに IP アドレス」という方法に加えて、
このアプローチもサポートしています。</P>

<P>ネームベースのバーチャルホストの利点としては、
事実上無限の数のサーバを運用できるということ、設定し利用するのが簡単なこと、
追加のハードウェアやソフトウェアが不要なこと、というのがあります。

もっとも大きな問題点としては、
クライアントはこのプロトコルをサポートしなければいけないということです。
ほとんどすべてのブラウザでサポートされていますが、
サポートしていないブラウザも少ないながらも依然として存在しています。
そのために問題が発生することがあります。これに対する解決方法に
なり得るものは後述します。</P>

<H2>ネームベースのバーチャルホストを利用する</H2>

<P>ネームベースのバーチャルホストを利用するのはとても簡単です。
見た目には従来の IP ベースの方法に似ています。

IP ベースとネームベースのバーチャルホストの設定の重要な違いは、
<A HREF="../mod/core.html#namevirtualhost"><CODE>NameVirtualHost</CODE></A>
ディレクティブで、ネームベースのバーチャルホストのターゲットとして使われる
IP アドレスを指定するということです。</P>

<P>たとえば、
<SAMP>www.domain.tld</SAMP> と <SAMP>www.otherdomain.tld</SAMP>
の両方が <SAMP>111.22.33.44</SAMP> という IP アドレスを指しているとしましょう。

そのような場合は、Apache の設定ファイルの一つ
(通常は <CODE>httpd.conf</CODE> か <CODE>srm.conf</CODE> のどちらか) に
以下のようなコードを追加するだけです:</P>

<PRE>
    NameVirtualHost 111.22.33.44

    &lt;VirtualHost 111.22.33.44&gt;
    ServerName www.domain.tld
    DocumentRoot /www/domain
    &lt;/VirtualHost&gt;

    &lt;VirtualHost 111.22.33.44&gt;
    ServerName www.otherdomain.tld
    DocumentRoot /www/otherdomain
    &lt;/VirtualHost&gt;
</PRE>

<P>もちろん、ディレクティブを
<CODE>&lt;VirtualHost&gt;</CODE>
セクションに追加することができます (するべきです) 。

これを動作するために必要なことは、
<SAMP>www.domain.tld</SAMP> や <SAMP>www.otherdomain.tld</SAMP>
という名前が IP アドレス <SAMP>111.22.33.44</SAMP>
を指しているか確認するということだけです。</P>

<P>注意: <CODE>NameVirtualHost</CODE> ディレクティブで
IP アドレスを指定した場合、その IP アドレスへのリクエストは、
常にそのリクエストにマッチする &lt;VirtualHost&gt; でのみ処理されます。
その IP アドレスでは「メインサーバ」は<STRONG>決して</STRONG>見えません。
バーチャルホストを使うのであれば「メインサーバ」を独立したサーバとして使うのは
止めるべきです。むしろ、その部分はすべてのバーチャルホストで共通な設定ディレ
クティブを記述するために使用してください。
言い換えると、サーバ上で運用したい<EM>すべての</EM>サーバ
(ホスト名) について &lt;VirtualHost&gt; セクションを追加すべきです。

<P>Apache 1.3.13 以降では、

<CODE>NameVirtualHost</CODE> の IP アドレスにワイルドカード <CODE>*</CODE>
を指定できます。このワイルドカードは、
より具体的なバーチャルホストのディレクティブでカバーされていない任意の
IP アドレスにマッチします。
これは、前もって IP アドレスを知ることのできないサーバを設定する際に役
に立ちます。たとえば、動的に IP アドレスが設定される場合や、同じ設定ファ
イルを共有する負荷分散のためのクラスタの一部となる場合などです。</P>

<P>さらに、複数の名前でサーバアクセスができるようにしたいことも多いでしょう。
たとえば、同じ IP アドレスを指す
<CODE>domain.tld</CODE> と <CODE>www2.domain.tld</CODE>
のどちらででもサーバにアクセスできるようにしたい場合などです。
それどころか、<CODE>domain.tld</CODE> のどんなアドレスででもそのサーバに
アクセスできるようにしたい場合があるかもしれません。

このようなことは、
<A HREF="../mod/core.html#serveralias"><CODE>ServerAlias</CODE></A>
ディレクティブを &lt;VirtualHost&gt; セクションに記述することで実現できます。
たとえば:</P>

<PRE>
    ServerAlias domain.tld *.domain.tld
</PRE>

<P><CODE>*</CODE> や <CODE>?</CODE> をワイルドカード文字として使用できることに
注意してください。</P>

<P>普通はドメイン名を省略するであろうローカルのユーザのために
<CODE>ServerAlias</CODE> が必要かもしれません。

たとえば、もしローカルのユーザが "www" や "www.foobar" とタイプするのに
親しんでいる場合、
<CODE>ServerAlias www www.foobar</CODE> を追加する必要があるでしょう。

クライアントが名前の解決にどのようなドメイン名を使ったのかをサーバが
知ることは不可能です。クライアントはリクエストにそのような情報を含めない
からです。
通常は、<CODE>ServerAlias</CODE> ディレクティブは同じバーチャルホストに対して
異なったホスト名を割り当てる方法です。</P>

<H2>古いブラウザとの互換性</H2>

<P>上で書いたように、ネームベースのバーチャルホストが正しく動作する
ために必要な情報を送ってこないクライアントが依然として存在しています。
そのようなクライアントに対しては、該当する IP アドレスについて、
一番最初に設定されているバーチャルホスト
(<CITE>プライマリ</CITE>のネームベースのバーチャルホスト)
からページが送り返されます。</P>

<P><A HREF="../mod/core.html#serverpath"><CODE>ServerPath</CODE></A>
ディレクティブで対処が可能です。ちょっと不格好ですけれども。</P>

<P>設定例:

<PRE>
    NameVirtualHost 111.22.33.44

    &lt;VirtualHost 111.22.33.44&gt;
    ServerName www.domain.tld
    ServerPath /domain
    DocumentRoot /web/domain
    &lt;/VirtualHost&gt;
</PRE>

<P>この例にはどういう意味があるでしょうか? これは
"<SAMP>/domain</SAMP>" で始まる URI へのリクエストはすべて、
バーチャルホスト <SAMP>www.domain.tld</SAMP> で処理される、という意味です。

つまり、すべてのクライアントで
<CODE>http://www.domain.tld/domain/</CODE> でアクセスできるページが、
<SAMP>Host:</SAMP> ヘッダを送ってくるクライアントであれば
<CODE>http://www.domain.tld/</CODE> としてもアクセスできる、という
意味です。</P>

<P>これを実用的なものとするためには、
プライマリのバーチャルホストのページに
<SAMP>http://www.domain.tld/domain/</SAMP> へのリンクを設置します。

そして、バーチャルホストのページでは、
純粋な相対リンク (<EM>例:</EM> "<SAMP>file.html</SAMP>" や 
"<SAMP>../icons/image.gif</SAMP>")、
あるいは <SAMP>/domain/</SAMP> で始まるリンク
(<EM>例:</EM> "<SAMP>http://www.domain.tld/domain/misc/file.html</SAMP>" や
"<SAMP>/domain/misc/file.html</SAMP>") だけを設置します。</P>

<P>これには、幾分かの規律が必要となりますが、
このようなガイドラインを忠実に守ることにより、たいていの場合、
すべてのブラウザで―新しいブラウザでも古いものでも―
作成したページが見えるということを保証します。</P>

<P>参考: <A HREF="examples.html#serverpath">ServerPath 設定例</A></P>

    <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

</BODY>
</HTML>
