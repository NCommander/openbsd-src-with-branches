$OpenBSD: OpenBSD::Ustar.pod,v 1.5 2005/06/13 14:24:06 espie Exp $

=head1 NAME

OpenBSD::Ustar - simple access to Ustar C<tar(1)> archives

=head1 SYNOPSIS

    use OpenBSD::Ustar;
    # for reading

    open(my $in, "<", $arcname);
    $rdarc = OpenBSD::Ustar->new($in, $destdir);
    while (my $o = $rdarc->next()) {
    	# decide whether we want to extract it, change object attributes
	$o->create();
    }
    close($in);

    # for writing
    open(my $out, ">", $arcname);
    $wrarc = OpenBSD::Ustar->new($fh, $destdir);
    # loop
    	my $o = $wrarc->prepare($filename);
	# tweak some entry parameters
	$o->write();

    $wrarc->pad();
    close($out);

    # for copying 
    open(my $in, "<", $arcname);
    $rdarc = OpenBSD::Ustar->new($in, $destdir);
    open(my $out, ">", $arcname);
    $wrarc = OpenBSD::Ustar->new($fh, $destdir);
    while (my $o = $rdarc->next()) {
    	$o->copy($wrarc);
    }
    $wrarc->pad();
    close($in);
    close($out);

=head1 DESCRIPTION

C<OpenBSD::Ustar> provides an API to read, write and copy archives compatible 
with C<tar(1)>
For the time being, it can only handle the USTAR archive format.

A filehandle C<$fh> is associated with an C<OpenBSD::Ustar> object through
C<new>. For archive reading, the filehandle should support 
C<read>. C<OpenBSD::UStar> does not rely on C<seek> or C<rewind> in order 
to be usable on pipe outputs. For archive writing, the filehandle should 
support C<print>.

Note that read and write support are mutually exclusive, though there is
no need to specify the mode used at creation time; it is implicitly
provided by the underlying filehandle.

Read access to an archive object C<$rdarc> occurs through a loop that 
repeatedly calls C<$o = $rdarc-E<gt>next()> to obtain the next archive entry.  
It returns an archive entry object C<$o> that can be 
queried to decide whether to extract this entry or not.

Write access to an archive object C<$wrarc> occurs through a user-directed
loop: obtain an archive entry through C<$o = $wrarc-E<gt>prepare($filename)>,
which can be tweaked manually and then written to the archive.

Most client software will specialize C<OpenBSD::Ustar> to their own needs.
Note however that C<OpenBSD::Ustar> is not designed for inheritance.
Composition (putting a C<OpenBSD::Ustar> object inside your class) and
forwarding methods (writing C<create> or C<next> methods that call the
corresponding C<OpenBSD::Ustar> method) are the correct way to use this API.

Note that C<OpenBSD::Ustar> does not do any caching. The client
code is responsible for retrieving and storing archives if it
needs to scan through them multiple times in a row.

Actual extraction is performed through C<$o-E<gt>extract()> and is not 
mandatory. Thus, client code can control whether it wants to extract archive
elements or not.

Actual writing is performed through C<$o-E<gt>write()> and is not mandatory
either.

Writing valid archives requires calling C<$wrarc-E<gt>pad()> after archiving
all the entries to complete the archive with blank-filled blocks.

Client code may decide to abort archive extraction early, or to run it through
until C<$arc-E<gt>next()> returns false.  The C<OpenBSD::Ustar> object doesn't
hold any resources and doesn't need any specific clean-up. However, client
code is responsible for closing the underlying filehandle and 
terminating any associated pipe process.

An object C<$o> returned through C<next> or through C<prepare> holds all 
the characteristics of the archive header:

=over 20

=item C<$o-E<gt>IsDir()>

true if archive entry is a directory

=item C<$o-E<gt>IsFile()>

true if archive entry is a file

=item C<$o-E<gt>IsLink()>

true if archive entry is any kind of link

=item C<$o-E<gt>IsSymLink()>

true if archive entry is a symbolic link

=item C<$o-E<gt>IsHardLink()>

true if archive entry is a hard link

=item C<$o-E<gt>{name}>

filename

=item C<$o-E<gt>{mode}>

C<chmod(2)> mode

=item C<$o-E<gt>{mtime}>

C<utime(2)> modification time

=item C<$o-E<gt>{uid}>

owner user ID

=item C<$o-E<gt>{gid}>

owner group ID

=item C<$o-E<gt>{uname}>

owner user name

=item C<$o-E<gt>{gname}>

owner group name

=item C<$o-E<gt>{linkname}>

name of the source link, if applicable

=back

The fields C<name>, C<mode>, C<mtime>, C<uid>, C<gid> and C<linkname>
can be altered before calling C<$o-E<gt>create()> or C<$o-E<gt>write()>, 
and will properly influence the resulting file.

The relationship between C<uid> and C<uname>, and C<gid> and C<gname>
conforms to the USTAR format usual behavior.

In addition, client code may define C<$o-E<gt>{cwd}> in a way similar
to C<tar(1)>'s C<-C> option to affect the creation of hard links.

All creation commands happen relative to the C<$destdir> that was used
for creating the C<$arc> C<OpenBSD::Ustar> object.

During writing, hard link status is determined according to already written
archive entries: a name that references a file which has already been written
will be granted hard link status.

Archives can be copied by creating separate archives for reading and writing.
Calling C<$o = $rdarc-E<gt>next()> and C<$o-E<gt>copy($wrarc)> will copy
an entry obtained from C<$rdarc> to C<$wrarc>.
