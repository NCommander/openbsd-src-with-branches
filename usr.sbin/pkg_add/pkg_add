#! /usr/bin/perl

# ex:ts=8 sw=4:
# $OpenBSD: pkg_add,v 1.190 2005/08/17 10:45:13 espie Exp $
#
# Copyright (c) 2003-2004 Marc Espie <espie@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# this is it ! The hard one
use strict;
use warnings;
use OpenBSD::Dependencies;
use OpenBSD::PackingList;
use OpenBSD::PackageInfo;
use OpenBSD::PackageLocator;
use OpenBSD::PackageName;
use OpenBSD::PkgCfl;
use OpenBSD::PkgSpec;
use OpenBSD::Vstat;
use OpenBSD::Getopt;
use OpenBSD::Error;
use OpenBSD::ProgressMeter;
use OpenBSD::Add;
use OpenBSD::SharedLibs;
use File::Path;

my $errors = 0;

our %forced = ();
our $not;

sub can_install($$$)
{
	my ($plist, $state, $handle) = @_;
	my $pkgname = $plist->pkgname();
	$plist->{replacing} = [];
	my @conflicts = OpenBSD::PkgCfl::find_all($plist, $state);
	return 1 if @conflicts == 0;

	my %conflicts = map {($_,1)} @conflicts;

	if (defined $conflicts{$pkgname}) {
		if (!$state->{replace}) {
			if (!$state->{forced}->{installed}) {
				print "Can't install $pkgname because it's already installed\n";
				$state->{installed}->{$handle->{pkgname}} = 1;
				$errors++;
			}
			return undef;
		}
	}

	my @libs = ();
	@conflicts = ();
	for my $k (keys %conflicts) {
		if ($k =~ m/^\.libs\-/) {
			push(@libs, $k);
		} else {
			push(@conflicts, $k);
		}
	}

	if (!$state->{replace}) {
		print "Can't install $pkgname because of conflicts (",join(',', @conflicts, @libs), ")\n";
		$errors++;
		return undef;
	}

	if (@conflicts >  5) {
		print "Can't install $pkgname because of conflicts (",join(',', @conflicts, @libs), ")\n";
		$errors++;
		return undef;
	}

	require OpenBSD::Update;

	if (is_installed($plist->pkgname()) && !$state->{forced}->{installed}) {
		if (!OpenBSD::Update::is_needed($plist, $state)) {
			    OpenBSD::SharedLibs::add_package_libs($plist->pkgname());
			    $state->{installed}->{$pkgname} = 1;
			    return undef;
			}
	}
	if (!OpenBSD::Update::is_safe($plist, $state)) {
		print "Can't safely update to $pkgname\n";
		$errors++;
		return undef;
	}

	if (!OpenBSD::Update::figure_out_libs($plist, $state, @libs)) {
		print "Can't update to $pkgname because of collision with old libs\n";
		$errors++;
		return undef;
	}

	for my $toreplace (@conflicts) {
		if (defined $state->{installed}->{$toreplace}) {
			Warn "Cannot replace $toreplace with $pkgname: just got installed\n";
			$errors++;
			return undef;
		}

		my $rplist = OpenBSD::Update::can_do($toreplace, $pkgname, 
		    $state, \%conflicts);
		if (!$rplist) {
			print "Can't update $toreplace into $pkgname\n";
			$errors++;
			return undef;
		}
		$rplist->{dir} = installed_info($toreplace);
		push(@{$plist->{replacing}}, $rplist);
		$plist->{skipupdatedeps} = \%conflicts;
	}
	return 1;
}


# This does pre_add a package: finding it and reading its package information
sub pre_add($$)
{
	my ($pkg, $state) = @_;
	
	my $handle = OpenBSD::PackageLocator->find($pkg, $state->{arch});
	if (!$handle) {
		if (defined $state->{deptree}->{$pkg}) {
			print $state->{deptree}->{$pkg}, ":";
		}
		print "Can't find $pkg\n";
		if (!$state->{forced}->{kitchensink}) {
			$errors++;
		}
		return undef;
	}
	if ($handle->{finished}) {
		return undef;
	}
	my $dir = $handle->info();
    	my $plist = $handle->{plist} = 
	    OpenBSD::PackingList->fromfile($dir.CONTENTS);
	unless (defined $plist) {
		print "Can't find CONTENTS from $pkg\n";
		$errors++;
		return undef;
	}
	if ($plist->pkgbase() ne $state->{localbase}) {
		print "Localbase mismatch: package has: ", $plist->pkgbase(), " , user wants: ", $state->{localbase}, "\n";
		$errors++;
		return undef;
	}
	my $pkgname = $handle->{pkgname} = $plist->pkgname();
	if ($pkg ne '-') {
		if (OpenBSD::PackageName::url2pkgname($pkg) ne $pkgname) {
			print "Package name is not consistent ???\n";
			$errors++;
			return undef;
		}
	}
	if ($state->{verbose}) {
		if (defined $state->{deptree}->{$pkg}) {
		    print $state->{deptree}->{$pkg},":";
		}
		print "parsing $pkgname\n";
	}
	if (can_install($plist, $state, $handle)) {
		return $handle;
	} else {
		$handle->close();
		rmtree($handle->info());
		delete $handle->{plist};
		$handle->{finished} = 1;
		if ($state->{forced}->{kitchensink}) {
			$errors = 0;
		}
		return undef;
	}
}


sub do_script
{
	my ($plist, $name, $state, $args) = @_;
	$state->{dir} = $plist->{dir};
	return unless $plist->has($name);
	$plist->get($name)->run($state, $args);
}

sub thunderbird_special_case
{
	my $plist = shift;
	for my $item (@{$plist->{items}}) {
		next unless $item->IsFile();
		my $t = $item->{tempname};
		if (defined $t && $t =~ s/^(.*\/mozilla-thunderbird)\/extensions(.*)\/pkg\./$1\/pkg\./) {
			rename $item->{tempname}, $t;
			rmdir("$1/extensions$2");
			$item->{tempname} = $t;
		}
	}
}

sub really_add($$)
{
	my ($handle, $state) = @_;
	my $destdir = $state->{destdir};
	my $plist = $handle->{plist};
	my $dir = $handle->info();
	my $pkgname = $plist->pkgname();
	$state->{archive} = $handle;
	$plist->{dir} = $dir;
	$state->set_pkgname($pkgname);

	# XXX in `combined' updates, some dependencies may remove extra 
	# packages, so we do a double-take on the list of packages we 
	# are actually replacing.
	my @toreplace = ();
	for my $pl2 (@{$plist->{replacing}}) {
		if (is_installed($pl2->pkgname())) {
			push(@toreplace, $pl2);
		}
	}
	
	my $replacing = 0;
	if (@toreplace) {
		$replacing = 1;
	} 
	if (defined $plist->{old_libs}) {
		$replacing = 1;
	}
	$state->{replacing} = $replacing;

	my $header = $pkgname;

	if (defined $state->{deptree}->{$pkgname}) {
	    $header = $state->{deptree}->{$pkgname}.":".$header;
	}
	if (@toreplace) {
		$header.=" (replacing ". join(', ', (map {$_->pkgname()}@toreplace)). ")";
	}
	if (!OpenBSD::ProgressMeter::set_header($header)) {
	    print $state->{not} ? "Pretending to add " : "Adding ";
	    print $header;
	    if ($state->{do_faked}) {
		    print " under ", $state->{destdir};
	    }
	    print "\n";
	}
	my $totsize = OpenBSD::Add::validate_plist($plist, $state);

	if (!defined $handle) {
		Fatal "Archive in $pkgname broken";
	}

	$ENV{'PKG_PREFIX'} = $plist->pkgbase();

	my $interrupted;
	local $SIG{'INT'} = sub {
		$interrupted = 1;
	};

	if ($replacing) {
		require OpenBSD::Update;

		OpenBSD::ProgressMeter::set_header("$pkgname (extracting)");

		if (@toreplace) {
			OpenBSD::Update::save_old_libraries($plist, $state);
		}

		my $donesize = 0;
		$plist->{done} = [];
		for my $item (@{$plist->{items}}) {
			try { 
				$item->extract($state); 
			} catchall {
				Warn $_;
				$errors++;
			};
			push(@{$plist->{done}}, $item);
			if (defined $item->{size}) {
				$donesize += $item->{size};
				OpenBSD::ProgressMeter::show($donesize, $totsize);
			}
			last if $interrupted || $errors;
		}
		OpenBSD::ProgressMeter::next();
		if ($interrupted || $errors) {
			OpenBSD::Add::borked_installation($plist, $dir,
			    $state->{not},
			    "Installation of $pkgname failed");
		}

		for my $op (@toreplace) {
			OpenBSD::ProgressMeter::set_header($op->pkgname()." (deleting)");
			$state->set_pkgname($op->pkgname());
			if (OpenBSD::PkgSpec::match("mozilla-thunderbird-<=1.0.2p0",
			    ($op->pkgname()))) {
			    	thunderbird_special_case($plist);
			}
			require OpenBSD::Delete;
			try {
			    OpenBSD::Delete::delete_plist($op, $state);
			} catchall {
				Warn $_;
				OpenBSD::Add::borked_installation($plist, $dir, 
				    $state->{not},
				    "Deinstallation of ", 
				    $op->pkgname(), " failed");
			};

			delete_installed($op->pkgname());
			if (defined $state->{updatedepends}) {
				delete $state->{updatedepends}->{$op->pkgname()};
			}
			OpenBSD::PkgCfl::unregister($op, $state);
		}
		# Here there should be code to handle old libs

		OpenBSD::ProgressMeter::set_header("$pkgname (installing)");
		$state->set_pkgname($pkgname);
	}

	if ($replacing) {
		try {
			do_script($plist, REQUIRE, $state, "INSTALL");
			do_script($plist, INSTALL, $state, "PRE-INSTALL");
		} catchall {
			Warn $_;
			$errors++;
		};

		if ($interrupted || $errors) {
			OpenBSD::Add::borked_installation($plist, $dir, 
			    $state->{not},
			    "Installation of $pkgname failed");
		}
	} else {
		do_script($plist, REQUIRE, $state, "INSTALL");
		do_script($plist, INSTALL, $state, "PRE-INSTALL");
	}

	my $donesize = 0;
	$state->{end_faked} = 0;
	for my $item (@{$plist->{groups}}, @{$plist->{users}}, @{$plist->{items}}) {
		try { 
			$item->install($state); }
		catchall {
			Warn $_;
			$errors++;
		};
		last if $errors;
		if (!$replacing) {
			push(@{$plist->{done}}, $item);
		}
		if (defined $item->{size}) {
                        $donesize += $item->{size};
                        OpenBSD::ProgressMeter::show($donesize, $totsize);
                }

		last if $interrupted;
		# stop faked installation there...
		if ($state->{do_faked} && $state->{end_faked}) {
			last;
		}
	}

	$handle->close();
	OpenBSD::ProgressMeter::next();

	if (!($interrupted || $errors)) {
		try { 
			do_script($plist, INSTALL, $state, "POST-INSTALL") 
		} catchall {
			Warn $_;
			$errors++;
		};
	}

	unlink($dir.CONTENTS);
	if ($interrupted || $errors) {
		OpenBSD::Add::borked_installation($plist, $dir, 
		    $state->{not},
		    "Installation of $pkgname failed");
	}
	OpenBSD::SharedLibs::add_plist_libs($plist);
	$plist->to_cache();
	my $dest = installed_info($pkgname);
	OpenBSD::Add::register_installation($dir, $dest, $plist);
	if (defined $handle->{solved_dependencies}) {
		require OpenBSD::RequiredBy;

		my $r = OpenBSD::Requiring->new($pkgname);

		for my $dep (keys %{$handle->{solved_dependencies}}) {
			OpenBSD::RequiredBy->new($dep)->add($pkgname);
			$r->add($dep);
		}
	}
	add_installed($pkgname);
	OpenBSD::PkgCfl::register($plist, $state);
	if ($plist->has(DISPLAY)) {
		$plist->get(DISPLAY)->prepare($state);
	}
	# and add dependencies corresponding to the replacement
	for my $op (@toreplace) {
		require OpenBSD::RequiredBy;
		require OpenBSD::Update;
		my $opkgname = $op->pkgname();

		print "Adjusting dependencies for $pkgname/$opkgname\n" 
		    if $state->{beverbose};
		my $d = OpenBSD::RequiredBy->new($pkgname);
		for my $dep (@{$op->{wantlist}}) {
			if (defined $plist->{skipupdatedeps}->{$dep}) {
				print "\tskipping $dep\n" if $state->{beverbose};
				next;
			}
			print "\t$dep\n" if $state->{beverbose};
			$d->add($dep);
			OpenBSD::Update::adjust_dependency($dep, $opkgname, $pkgname);
		}
	}
}

# one-level dependencies tree, for nicer printouts
sub build_deptree
{
	my ($state, $pkg, @deps) = @_;

	my $tree = $state->{deptree};
	$pkg = OpenBSD::PackageName::url2pkgname($pkg);
	# flatten info
	if (defined $tree->{$pkg}) {
		$pkg = $tree->{$pkg};
	}
	for my $i (@deps) {
		$tree->{$i} = $pkg unless defined $tree->{$i};
	}
}

sub clue
{
	my $h = shift;
	Warn "Even by looking in the dependency tree:\n";
	Warn "\t", join(", ", keys %$h), "\n";
	Warn "Maybe it's in a dependent package, but not tagged with \@lib ?\n";
	Warn "(check with pkg_info -K -L)\n";
	Warn "If you are still running 3.6 packages, update them.\n";
}


sub install_package
{
	my ($pkg, $state, @todo) = @_;
	my $cache = $state->{cache};

	if (!defined $cache->{$pkg}) {
		$cache->{$pkg} = pre_add($pkg, $state);
	}

	my $handle = $cache->{$pkg};
	if ($errors > 0) {
		$state->set_pkgname($pkg);
		$state->fatal("Fatal error") unless defined $handle;
	} else {
		return () unless defined $handle;
	}

	if (defined $state->{installed}->{$handle->{pkgname}}) {
		$handle->close();
		return ();
	}

	my $plist = $handle->{plist};

	if (is_installed($plist->pkgname()) && !$state->{forced}->{installed}) {
		if ($state->{replace}) {
			if (!OpenBSD::Update::is_needed($plist, $state)) {
				OpenBSD::SharedLibs::add_package_libs($plist->pkgname());
				$state->{installed}->{$handle->{pkgname}} = 1;
				$handle->close();
				return ();
			}
		} else {
			$handle->close();
			return ();
		}
	}
	if ($plist->has('arch')) {
		unless ($plist->{arch}->check($state->{arch})) {
			print "$pkg is not for the right architecture\n";
			return () unless $forced{arch};
		}
	}
	if (!defined $handle->{solved_dependencies}) {
		my @deps = OpenBSD::Dependencies::solve($state, $handle, @todo);
		if (@deps > 0) {
			build_deptree($state, $pkg, @deps);
			return (@deps, $pkg);
		}
	}

	# verify dependencies and register them

	for my $dep (keys %{$handle->{solved_dependencies}}) {
		next if is_installed($dep);
		print "Can't install $pkg: can't resolve $dep\n";
		$handle->close();
		return ();
	}

	# grab libraries
	for my $dep (keys %{$handle->{solved_dependencies}}) {
		OpenBSD::SharedLibs::add_package_libs($dep);
	}
	my $okay = 1;
	for my $dep (@{$plist->{libdepend}}) {
		return () if defined $dep->{name} and $dep->{name} ne $plist->pkgname();
		for my $spec (split(/,/, $dep->{libspec})) {
		    if (!OpenBSD::Dependencies::lookup_library($state, $spec, $plist,
			$handle->{solved_dependencies}, 0)) {
			    Warn "Can't install $pkg: lib not found $spec\n";
			    clue($handle->{solved_dependencies}) if $okay;
			    $okay = 0;
		    }
		}
	}
	for my $lib (@{$plist->{wantlib}}) {
		my $extra = {};
		if (!OpenBSD::Dependencies::lookup_library($state, $lib->{name}, $plist,
		    $handle->{solved_dependencies}, 1, $extra)) {
		    	Warn "Can't install $pkg: lib not found ", $lib->{name}, "\n";
			clue($extra) if $okay;
			$okay = 0;
		}
	}
	if (!$okay) {
		$handle->close();
		return () unless $forced{libdepends};
	}
	really_add($handle, $state);
	rmtree($handle->info());
	delete $handle->{plist};
	$state->{installed}->{$handle->{pkgname}} = 1;
	return ();
}

sub compute_closure
{
	require OpenBSD::RequiredBy;

	my $old = shift;
	my @todo;
	my %done;
	my %toupdate = map {($_, 1)} @$old;
	push(@todo, keys %toupdate);
	while (my $pkgname = pop @todo) {
		next if $done{$pkgname};
		$done{$pkgname} = 1;
		for my $dep (OpenBSD::Requiring->new($pkgname)->list()) {
			next if defined $done{$dep};
			next if defined $toupdate{$dep};
			$toupdate{$dep} = 1;
			push(@todo, $dep);
		}
	}
	return keys %toupdate;
}

sub find_updates
{
	my ($old, $new, $state) = @_;
	my @list = ();

	for my $pkgname (@$old) {
		if (OpenBSD::PackageName::is_stem($pkgname)) {
			my @l = OpenBSD::PackageName::findstem($pkgname,
			    installed_packages());
			if (@l == 1) {
				push(@list, $l[0]);
			} else {
				Fatal("Ambiguous: $pkgname could be", join(',', @l));
			}
		} else {
			push(@list, $pkgname);
		}
	}
	unless (defined $state->{full_update} or defined $state->{forced}->{noclosure}) {
		@list = compute_closure(\@list);
	}
	my @cantupdate = ();
	my $hash = OpenBSD::PackageName::compile_stemlist(OpenBSD::PackageLocator::distant_available());

	for my $pkgname (@list) {
		my $stem = OpenBSD::PackageName::splitstem($pkgname);
		my @l = $hash->findstem($stem);
		if (@l == 0) {
			push(@cantupdate, $pkgname);
			next;
		}
		my @l2 = ();
		if (@l == 1 && $state->{forced}->{pkgpath}) {
			print "Directly updating $pkgname -> ", $l[0], "\n";
			push(@$new, $l[0]);
			next;
		}
		my $plist = OpenBSD::PackingList->from_installation($pkgname, \&OpenBSD::PackingList::ExtraInfoOnly);
		if (!defined $plist) {
			Fatal("Can't locate $pkgname");
		}
		for my $candidate (@l) {
		    my $handle = OpenBSD::PackageLocator->find($candidate, $state->{arch});
		    if (!$handle) {
			    next;
		    }
		    $handle->close();
		    my $dir = $handle->info();
		    my $p2 = OpenBSD::PackingList->fromfile($dir.CONTENTS,
			\&OpenBSD::PackingList::ExtraInfoOnly);
		    if ($p2->has('arch')) {
			unless ($p2->{arch}->check($state->{arch})) {
			    next;
			}
		    }
		    if ($p2->{extrainfo}->{subdir} eq $plist->{extrainfo}->{subdir}) {
			push(@l2, $candidate);
		    }
		}

		print "Updating $pkgname -> ", join(' ', @l2), "\n";
		# if all packages have the same version, but distinct p,
		# grab the most recent.
		# XXX dirty as hell, clean-up after 3.8
		if (@l2 > 1) {
		    my ($bestbase, $bestp, $best);
		    my ($base, $p);
		    for my $i (@l2) {
			if ($i =~ m/p(\d+)$/) {
			    $base = $`;
			    $p = $1;
			} else {
			    $base = $i;
			    $p = -1;
			}
			if (!defined $bestbase) {
			    ($bestbase, $bestp, $best) = ($base, $p, $i);
			} else {
			    if ($base ne $bestbase) {
				undef $best;
				last;
			    }
			    if ($p > $bestp) {
			    	($bestp, $best) = ($p, $i);
			    }
			}
		    }
		    if (defined $best) {
		    	@l2 = ($best);
		    }
		}
			
		if (@l2 == 1) {
			push(@$new, $l2[0]);
		} else {
			push(@cantupdate, $pkgname);
		}
	}
	return @cantupdate;
}

sub reorder
{
	my $l = shift;
	my $n = @$l;
	my ($a, $i, $j);
	for ($i = 0; $i < $n; $i++) {
		$j = int(rand($n-$i));
		$a = $l->[$i];
		$l->[$i] = $l->[$n-$j-1];
		$l->[$n-$j-1] = $a;
	}
}

set_usage('pkg_add [-acInqrvvx] [-A arch] [-B pkg-destdir] [-F keywords]',
'[-L localbase] [-P type] [-Q quick-destdir] pkgname [...]');

our ($opt_a, $opt_v, $opt_n, $opt_I, $opt_L, $opt_B, $opt_A, $opt_P, $opt_Q, $opt_x, $opt_r, $opt_q, $opt_c, $opt_u);
$opt_v = 0;
try { 
	getopts('aqchuvnrxIL:f:F:B:A:P:Q:',
	{'v' => sub {++$opt_v;},
	 'h' => sub { Usage(); },
	 'F' => sub { 
	 		for my $o (split/,/, shift) { 
				$forced{$o} = 1;
			}
	    	},
	 'f' => sub { 
	 		for my $o (split/,/, shift) { 
				$forced{$o} = 1;
			}
	    	}}); 
} catchall {
	Usage($_);
};

try {
$opt_L = '/usr/local' unless defined $opt_L;

my $state = new OpenBSD::Error;
$state->{cache} = {};
$state->{installed} = {};
$state->{deptree} = {};
$state->{do_faked} = 0;
$state->{replace} = $opt_r;
$state->{localbase} = $opt_L;
$state->{arch} = $opt_A;
$state->{forced} = \%forced;

if (defined $opt_Q and defined $opt_B) {
	Usage "-Q and -B are incompatible options";
}
if (defined $opt_Q and defined $opt_r) {
	Usage "-r and -Q are incompatible options";
}
if ($opt_P) {
	if ($opt_P eq 'cdrom') {
		$state->{cdrom_only} = 1;
	}
	elsif ($opt_P eq 'ftp') { 
		$state->{ftp_only} = 1;
	}
	else {
	    Usage "bad option: -P $opt_P";
	}
}
if (defined $opt_Q) {
	$state->{destdir} = $opt_Q;
	$state->{do_faked} = 1;
} elsif (defined $opt_B) {
	$state->{destdir} = $opt_B;
} elsif (defined $ENV{'PKG_PREFIX'}) {
	$state->{destdir} = $ENV{'PKG_PREFIX'};
}
if (defined $state->{destdir}) {
	$state->{destdir}.='/';
	$ENV{'PKG_DESTDIR'} = $state->{destdir};
} else {
	$state->{destdir} = '';
	delete $ENV{'PKG_DESTDIR'};
}


$state->{not} = $opt_n || $opt_u;
# XXX RequiredBy
$not = $opt_n;
$state->{quick} = $opt_q;
$state->{extra} = $opt_c;
$state->{dont_run_scripts} = $opt_I;
$state->{very_verbose} = $opt_v >= 2;
$state->{verbose} = $opt_v;
$state->{beverbose} = $opt_n || ($opt_v >= 2);

if (@ARGV == 0 && !$opt_u) {
	Usage "Missing pkgname";
}
if (!$opt_x && !$state->{beverbose}) {
	OpenBSD::ProgressMeter::enable();
}

if ($< && !$forced{nonroot}) {
	if ($state->{not}) {
		Warn "$0 should be run as root\n";
	} else {
		Fatal "must be run as root";
	}
}

lock_db($state->{not});
if ($opt_u) {
	if (@ARGV == 0) {
		@ARGV = sort(installed_packages());
		$state->{full_update} = 1;
	}
	my @todo = ();
	my @cantupdate = find_updates(\@ARGV, \@todo, $state);
	print "Update using pkg_add -r ", join(' ', @todo), "\n";
	if (@cantupdate > 0) {
		print "Cannot find updates for ",join(' ', @cantupdate), "\n";
	}
	exit(0);
}

my @todo = (@ARGV);
if (defined $state->{forced}->{kitchensink}) {
	reorder(\@todo);
	if (!$opt_r) {
		@todo = grep {s/\.tgz$//; !is_installed($_);} @todo;
	}
	print "Adding in order:\n", (map { "\t$_\n" } @todo), "\n";
}

eval {
while (my $pkg = shift @todo) {
	unshift(@todo, install_package($pkg, $state, @todo));
}
};

my $dielater = $@;

OpenBSD::PackingElement::Fontdir::finish_fontdirs($state);
OpenBSD::Add::manpages_index($state);
OpenBSD::PackingElement::Lib::ensure_ldconfig($state);
# delayed directory/user/group removal
if (defined $state->{dirs_to_rm} or defined $state->{users_to_rm} or
	defined $state->{groups_to_rm}) {
	require OpenBSD::SharedItems;

	OpenBSD::SharedItems::cleanup($state) unless $state->{not};
}

if ($state->{beverbose}) {
	OpenBSD::Vstat::tally();
}
$state->delayed_output();
if (defined $state->{updatedepends} && %{$state->{updatedepends}}) {
	print "Forced updates, bogus dependencies for ", 
	    join(' ', sort(keys %{$state->{updatedepends}})),
	    " may remain\n";
}
if (defined $state->{forced}->{kitchensink}) {
	print "Added:\n", (map { "\t$_\n" } sort keys %{$state->{installed}}), "\n";
}
rethrow $dielater;
} catch {
	print STDERR "$0: $_\n";
	exit(1);
};
