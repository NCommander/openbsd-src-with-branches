/* This is -*-c-*- */

/*
 * Interface to VLDB
 */

package VL_

%#include <fs_errors.h>
%#include <fs.h>

error-function conv_to_arla_errno

#include "common.h"

/*
 * Structures and defines for vldb data
 */

const VLDB_MAXNAMELEN		= 65;
const MAXNSERVERS		= 8;
const NMAXNSERVERS		= 13;
const MAX_NUMBER_OPCODES	= 30;
const MAXTYPES			= 3;
const MAXSERVERID		= 30;
const HASHSIZE			= 8191;
const DEFAULTBULK		= 10000;

typedef opaque bulk<DEFAULTBULK>;

#if 0
typedef struct single_vldbentry *vldblist;
#endif

/*
 * Used in vlentry.server[i].flags
 * ie for each site/server
 */

const VLSF_NEWREPSITE = 0x01;	/* ??? */
const VLSF_ROVOL      = 0x02;	/* Readonly volume on this site */
const VLSF_RWVOL      = 0x04;	/* Readwrite volume on this site */
const VLSF_BACKVOL    = 0x08;	/* Backup volume on this site */
const VLSF_UUID	      = 0x10;	/* Internal flag in Transarc client */
const VLSF_DONTUSE    = 0x20;	/* Not yet released volumes */

/*
 * Used in vlentry.flags
 * ie used for whole entry
 */

/* Internal information in the vldb */
const VLFREE           = 0x1;
const VLDELETED        = 0x2;
const VLLOCKED         = 0x4;

/* Volser information/status */
const VLOP_MOVE		= 0x10;
const VLOP_RELEASE	= 0x20;
const VLOP_BACKUP	= 0x40;
const VLOP_DELETE	= 0x80;
const VLOP_DUMP		= 0x100;

%#define VLOP_ALLOPERS ( VLOP_MOVE | VLOP_RELEASE | VLOP_BACKUP | VLOP_DELETE | VLOP_DUMP)

/* Location  information */
const VLF_RWEXISTS    = 0x1000;
const VLF_ROEXISTS    = 0x2000;
const VLF_BOEXISTS    = 0x4000;
const VLF_BACKEXISTS  = 0x4000;
const VLF_DFSFILESET  = 0x8000;

/* VL error interface */
const VL_IDEXIST       = 363520;
const VL_IO            = 363521;
const VL_NAMEEXIST     = 363522;
const VL_CREATEFAIL    = 363523;
const VL_NOENT         = 363524;
const VL_EMPTY         = 363525;
const VL_ENTDELETED    = 363526;
const VL_BADNAME       = 363527;
const VL_BADINDEX      = 363528;
const VL_BADVOLTYPE    = 363529;
const VL_BADPARTITION  = 363530;
const VL_BADSERVER     = 363531;
const VL_REPSFULL      = 363532;
const VL_NOREPSERVER   = 363533;
const VL_DUPREPSERVER  = 363534;
const VL_RWNOTFOUND    = 363535;
const VL_BADREFCOUNT   = 363536;
const VL_SIZEEXCEEDED  = 363537;
const VL_BADENTRY      = 363538;
const VL_BADVOLIDBUMP  = 363539;
const VL_IDALREADHASED = 363540;
const VL_ENTRYLOCKED   = 363541;
const VL_BADVOLOPER    = 363542;
const VL_BADRELLOCKTYPE= 363543;
const VL_RERELEASE     = 363544;
const VL_BADSERVERFLAG = 363545;
const VL_PERM          = 363546;
const VL_NOMEM         = 363547;
const VL_BADVERSION    = 363548;
const VL_INDEXERANGE   = 363549;
const VL_MULTIPADDR    = 363550;
const VL_BADMASK       = 363551;


/*
 * Opcodes
 */

const VLCREATEENTRY		= 501;
const VLDELETEENTRY		= 502;
const VLGETENTRYBYID		= 503;
const VLGETENTRYBYNAME		= 504;
const VLGETNEWVOLUMEID		= 505;
const VLREPLACEENTRY		= 506;
const VLUPDATEENTRY		= 507;
const VLSETLOCK			= 508;
const VLRELEASELOCK		= 509;
const VLLISTENTRY		= 510;
const VLLISTATTRIBUTES	 	= 511;
const VLLINKEDLIST		= 512;
const VLGETSTATS		= 513;
const VLPROBE			= 514;
const VLGETADDRS		= 515;
const VLCHANGEADDR		= 516;
const VLCREATEENTRYN		= 517;
const VLGETENTRYBYIDN		= 518;
const VLGETENTRYBYNAMEN	 	= 519;
const VLREPLACEENTRYN		= 520;
const VLLISTENTRYN		= 521;
const VLLISTATTRIBUTESN		= 522;
const VLLINKEDLISTN		= 523;
const VLUPDATEENTRYBYNAME	= 524;
const VLCREATEENTRYU		= 525;
const VLGETENTRYBYIDU		= 526;
const VLGETENTRYBYNAMEU		= 527;
const VLREPLACEENTRYU		= 528;
const VLLISTENTRYU		= 529;
const VLLISTATTRIBUTESU		= 530;
const VLLINKEDLISTU		= 531;
const VLREGADDR			= 532;
const VLGETADDRSU		= 533;
const VLLISTATTRIBUTESN2	= 534;

/*
 * ReleaseType argument for VL_ReleaseLock
 */
const LOCKREL_TIMESTAMP = 1;
const LOCKREL_OPCODE    = 2;
const LOCKREL_AFSID     = 4;

struct vldbentry {
     char name[VLDB_MAXNAMELEN];
     long volumeType;		/* currrent unused */
     long nServers;
     long serverNumber[MAXNSERVERS];
     long serverPartition[MAXNSERVERS];
     long serverFlags[MAXNSERVERS];
     u_long volumeId[MAXTYPES];
     long cloneId;
     long flags;
};

struct nvldbentry {
    char name[VLDB_MAXNAMELEN];
    long nServers;
    long serverNumber[NMAXNSERVERS];
    long serverPartition[NMAXNSERVERS];
    long serverFlags[NMAXNSERVERS];
    u_long volumeId[MAXTYPES];
    long cloneId;
    long flags;
    long matchindex;
    long spares2;
    long spares3;
    long spares4;
    long spares5;
    long spares6;
    long spares7;
    long spares8;
    long spares9;
};

struct vlentry {
    u_long volumeId[MAXTYPES];
    long flags;
    long LockAfsId;
    long LockTimestamp;
    long cloneId;
    long AssociatedChain;
    long nextIdHash[MAXTYPES];
    long nextNameHash;
    long spares1[2];
    char name[VLDB_MAXNAMELEN];
    u_char volumeType;
    u_char serverNumber[MAXNSERVERS];
    u_char serverPartition[MAXNSERVERS];
    u_char serverFlags[MAXNSERVERS];
    u_char RefCount;
    char spares2[1];
};

/* disk_vlentry is arla specific */

struct disk_vlentry {
    u_long volumeId[MAXTYPES];
    long flags;
    long cloneId;
    string name<>;
    long serverNumber<>;
    long serverPartition<>;
    long serverFlags<>;
};

struct vital_vlheader {
     long vldbversion;
     long headersize;
     long freePtr;
     long eofPtr;
     long allocs;
     long frees;
     long MaxVolumeId;
     long totalEntries[MAXTYPES];
};

typedef long longarray[MAXTYPES];

struct vlheader {
    struct vital_vlheader vital_header;
    u_long IpMappedAddr[MAXSERVERID];
    long VolnameHash[HASHSIZE];
/*    long VolidHashRW[HASHSIZE];
    long VolidHashRO[HASHSIZE];
    long VolidHashBACK[HASHSIZE];*/
    longarray VolidHash[HASHSIZE];
};


const VLUPDATE_VOLUMENAME 	= 0x1;
const VLUPDATE_FLAGS		= 0x4;
const VLUPDATE_READONLYID	= 0x8;
const VLUPDATE_BACKUPID		= 0x10;
const VLUPDATE_REPSITES		= 0x20;
const VLUPDATE_CLONEID		= 0x80;
const VLUPDATE_VOLNAMEHASH	= 0x100;
const VLUPDATE_RWID		= 0x200;

const VLUPDATE_REPS_DELETE	= 0x100;
const VLUPDATE_REPS_ADD		= 0x200;
const VLUPDATE_REPS_MODSERV	= 0x400;
const VLUPDATE_REPS_MODPART	= 0x800;
const VLUPDATE_REPS_MODFLAG	= 0x1000;

struct VldbUpdateEntry {
     u_long Mask;
     char name[VLDB_MAXNAMELEN];
     long volumeType;
     long flags;
     u_long ReadOnlyId;
     u_long BackupId;
     long cloneid;
     long nModifiedRepsites;
     u_long RepsitesMask[MAXNSERVERS];
     long RepsitesTargetServer[MAXNSERVERS];
     long RepsitesTargetPart[MAXNSERVERS];
     long RepsitesNewServer[MAXNSERVERS];
     long RepsitesNewPart[MAXNSERVERS];
     long RepsitesNewFlags[MAXNSERVERS];
};

/* bit mask for VldbListByAttributes.Mask */
const	VLLIST_SERVER		= 0x1;
const	VLLIST_PARTITION	= 0x2;
/* 0x4 was VLLIST_VOLUMETYPE but now it seems to be depricated */
const	VLLIST_VOLUMEID		= 0x8;
const	VLLIST_FLAG		= 0x10;

struct VldbListByAttributes {
     u_long Mask;
     long server;
     long partition;
     long volumetype; /* depricated */
     long volumeid;
     long flag;
};

struct uvldbentry {
     char name[VLDB_MAXNAMELEN];
     long nServers;
     afsUUID serverNumber[NMAXNSERVERS];
     long serverUnique[NMAXNSERVERS];
     long serverPartition[NMAXNSERVERS];
     long serverFlags[NMAXNSERVERS];
     u_long volumeId[MAXTYPES];
     long cloneId;
     long flags;
     long spares1;
     long spares2;
     long spares3;
     long spares4;
     long spares5;
     long spares6;
     long spares7;
     long spares8;
     long spares9;
};


#if 0
struct single_vldbentry {
     vldbentry VldbEntry;
     vldblist next_vldb;
};

struct vldb_list {
     vldblist node;
};
#endif

struct vldstats {
     unsigned long start_time;
     long requests[MAX_NUMBER_OPCODES];
     long aborts[MAX_NUMBER_OPCODES];
     long reserved[5];
};

const VL_MAX_BULK_ADDRS		= 1024 ;

typedef vldbentry bulkentries<>;
typedef nvldbentry nbulkentries<>;
typedef uvldbentry ubulkentries<>;
typedef int32_t bulkaddrs<VL_MAX_BULK_ADDRS>;


/* 
 * Bits for ListAddrByAttributes.Mask
 * Note, IPADDR/INDEX/UUID are mutually exclusive
 */

const VLADDR_IPADDR = 0x1;
const VLADDR_INDEX  = 0x2;
const VLADDR_UUID   = 0x4;

struct ListAddrByAttributes {
    int32_t Mask;
    uint32_t ipaddr;
    int32_t index;
    int32_t spare;
    afsUUID uuid;
};

struct VL_Callback {
    uint32_t version;
    uint32_t expiration_time;
    uint32_t time;
    uint32_t handle;
};

/*
 * Interface
 */

CreateEntry (IN vldbentry *newentry) = VLCREATEENTRY;

DeleteEntry (IN long Volid,
	     IN long voltype) = VLDELETEENTRY;

GetEntryByID (IN long Volid,
	      IN long voltype,
	      OUT vldbentry *entry) = VLGETENTRYBYID;

GetEntryByName (IN string volumename<VLDB_MAXNAMELEN>,
		OUT vldbentry *entry) = VLGETENTRYBYNAME;

GetNewVolumeId (IN long bumpcount,
		OUT long *newvolumid) = VLGETNEWVOLUMEID;

ReplaceEntry (IN long Volid,
	      IN long voltype,
	      IN vldbentry *newentry,
	      IN long ReleaseType) = VLREPLACEENTRY;

UpdateEntry (IN long Volid,
	     IN long voltype,
	     IN VldbUpdateEntry *UpdateEntry,
	     IN long ReleaseType) = VLUPDATEENTRY;

SetLock (IN long Volid,
	 IN long voltype,
	 IN long voloper) = VLSETLOCK;

ReleaseLock (IN long volid,
	     IN long voltype,
	     IN long ReleaseType) = VLRELEASELOCK;

ListEntry (IN long previous_index,
	   OUT long *count,
	   OUT long *next_index,
	   OUT vldbentry *entry) = VLLISTENTRY;

ListAttributes (IN VldbListByAttributes *attributes,
		OUT long *nentries,
		OUT bulkentries *blkentries) = VLLISTATTRIBUTES;

#if 0
LinkedList (IN VldbListByAttributes *attributes,
	    OUT long *nentries,
	    OUT vldb_list *linkedentries) = 512;
#endif

GetStats (OUT vldstats *stats,
	  OUT vital_vlheader *vital_header) = VLGETSTATS;

Probe () = VLPROBE;

GetAddrs(IN int32_t handle,
	 IN int32_t spare,
	 OUT VL_Callback *spare3,
	 OUT int32_t *nentries,
	 OUT bulkaddrs *blkaddr) = VLGETADDRS;

ChangeAddrs(IN int32_t old_ip,
	    IN int32_t new_ip) = VLCHANGEADDR;		/* obsolete */

CreateEntryN(IN nvldbentry *newentry) = VLCREATEENTRYN;

GetEntryByIDN (IN long Volid,
	       IN long voltype,
	       OUT nvldbentry *entry) = VLGETENTRYBYIDN;

GetEntryByNameN (IN string volumename<VLDB_MAXNAMELEN>,
		 OUT nvldbentry *entry) = VLGETENTRYBYNAMEN;

ReplaceEntryN (IN long Volid,
	      IN long voltype,
	      IN nvldbentry *newentry,
	      IN long ReleaseType) = VLREPLACEENTRYN;

ListEntryN(IN afs_int32 previous_index,
	   OUT afs_int32 *count,
	   OUT afs_int32 *next_index,
	   OUT nvldbentry *entry) = VLLISTENTRYN;

ListAttributesN (IN VldbListByAttributes *attributes,
		OUT long *nentries,
		OUT nbulkentries *blkentries) = VLLISTATTRIBUTESN;

#if 0
LinkedListN() = 523;
#endif

UpdateEntryByName (IN string volname<VLDB_MAXNAMELEN>,
	     IN VldbUpdateEntry *UpdateEntry,
	     IN long ReleaseType) = VLUPDATEENTRYBYNAME;

#ifdef not_implemented_yet
CreateEntryU(IN uvldbentry *newentry) = VLCREATEENTRYU;

GetEntryByIDU() = VLGETENTRYBYIDU;

GetEntryByNameU (IN string volumename<VLDB_MAXNAMELEN>,
		 OUT struct uvldbentry *entry) = VLGETENTRYBYNAMEU;

ReplaceEntryU() = VLREPLACEENTRYU;

ListEntryU() = VLLISTENTRYU;

ListAttributesU (IN VldbListByAttributes *attributes,
		OUT long *nentries,
		OUT ubulkentries *blkentries) = VLLISTATTRIBUTESU;

LinkedListU() = VLLINKEDLISTU;
#endif

GetAddrsU(IN ListAddrByAttributes *inaddr,
	  OUT afsUUID *uuidp1,
	  OUT afs_int32 *uniquifier,
	  OUT afs_int32 *nentries,
	  OUT bulkaddrs *blkaddrs) = VLGETADDRSU;


RegisterAddrs(IN afsUUID *uid,
	      IN int32_t spare,
	      IN bulkaddrs *addrs) = VLREGADDR;


ListAttributesN2(IN VldbListByAttributes *attributes,
		 IN string volumename<VLDB_MAXNAMELEN>,
		 IN  afs_int32 startindex,
		 OUT afs_int32 *nentries,
		 OUT nbulkentries *blkentries,
		 OUT afs_int32 *nextstartindex) = VLLISTATTRIBUTESN2;

#if 0

/*
 *
 */

const	VL_LISTATTRUUID_MAXATTR		= 64;
const	VL_LISTATTRUUID_MAXATTRSIZE	= 512;

struct VL_ListAddrUUID {
    afs_int32 type;
    afs_int32 error;
    opaque data<VL_LISTATTRUUID_MAXATTRSIZE>;
};
    
typedef VL_ListAddrUUID VL_ListAddrUUIDs<>;

const VL_UUID_data_INVALID = 1;

const VL_UUID_data_IPV6	= 1;
struct VL_UUID_data {
    opaque ipv6_addr<128>;
    int ipv6_mtu;
};

const VL_UUID_data_GSSAPI_name	= 2;
struct VL_UUID_data_gss_name {
    opaque gss_name<>;
};

/*
 * `uuid' is the uuid we query information the diffrent types are in
 * `query'. 
 * 
 * For each `query'-item there can be one or more items in `reply'.
 * The reply items have `reply<>.type' set to the same type as in the
 * query. The are always sorted in the same order as the `query'.
 * 
 * If the `query' type isn't supported a `reply<>' is sent back with
 * `reply<>.error' set.
 *
 * The `reply<>.data' is filled with `reply<>.type' specific data.
 * XXX should we use union, I don't think so.
 */

ListAttrUUID(IN afsUUID *uuid,
	     IN afs_int32 query<VL_LISTATTRUUID_MAXATTR>,
	     OUT VL_ListAddrUUIDs *reply) = 10001;

#endif
