Index: Makefile
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/Makefile,v
retrieving revision 1.30
diff -c -r1.30 Makefile
*** Makefile	1997/11/16 22:15:02	1.30
--- Makefile	1997/11/18 13:35:35
***************
*** 4,11 ****
  SRCS=	alias_cmd.c arp.c async.c auth.c ccp.c chap.c chat.c \
  	command.c defs.c filter.c fsm.c hdlc.c id.c ip.c ipcp.c lcp.c \
  	loadalias.c log.c lqr.c main.c mbuf.c modem.c os.c pap.c phase.c \
! 	pred.c route.c server.c sig.c slcompress.c systems.c timer.c tun.c \
! 	vars.c vjcomp.c
  CFLAGS+=-Wall -Wmissing-prototypes
  LDADD+= -lmd -lcrypt -lutil
  DPADD+= ${LIBMD} ${LIBCRYPT} ${LIBUTIL}
--- 4,11 ----
  SRCS=	alias_cmd.c arp.c async.c auth.c ccp.c chap.c chat.c \
  	command.c defs.c filter.c fsm.c hdlc.c id.c ip.c ipcp.c lcp.c \
  	loadalias.c log.c lqr.c main.c mbuf.c modem.c os.c pap.c phase.c \
! 	pred.c route.c server.c sig.c slcompress.c systems.c throughput.c \
! 	timer.c tun.c vars.c vjcomp.c
  CFLAGS+=-Wall -Wmissing-prototypes
  LDADD+= -lmd -lcrypt -lutil
  DPADD+= ${LIBMD} ${LIBCRYPT} ${LIBUTIL}
Index: ip.c
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/ip.c,v
retrieving revision 1.30
diff -c -r1.30 ip.c
*** ip.c	1997/11/16 22:15:03	1.30
--- ip.c	1997/11/18 12:46:18
***************
*** 251,257 ****
      memcpy(MBUF_CTOP(bp), ptr, cnt);
      SendPppFrame(bp);
      RestartIdleTimer();
!     ipOutOctets += cnt;
    }
  #endif
  }
--- 251,257 ----
      memcpy(MBUF_CTOP(bp), ptr, cnt);
      SendPppFrame(bp);
      RestartIdleTimer();
!     IpcpAddOutOctets(cnt);
    }
  #endif
  }
***************
*** 405,411 ****
  	pfree(bp);
  	return;
        }
!       ipInOctets += nb;
  
        nb = ntohs(((struct ip *) tun.data)->ip_len);
        nb += sizeof(tun)-sizeof(tun.data);
--- 405,411 ----
  	pfree(bp);
  	return;
        }
!       IpcpAddInOctets(nb);
  
        nb = ntohs(((struct ip *) tun.data)->ip_len);
        nb += sizeof(tun)-sizeof(tun.data);
***************
*** 450,456 ****
        pfree(bp);
        return;
      }
!     ipInOctets += nb;
      nb += sizeof(tun)-sizeof(tun.data);
      nw = write(tun_out, &tun, nb);
      if (nw != nb)
--- 450,456 ----
        pfree(bp);
        return;
      }
!     IpcpAddInOctets(nb);
      nb += sizeof(tun)-sizeof(tun.data);
      nw = write(tun_out, &tun, nb);
      if (nw != nb)
***************
*** 509,515 ****
  	cnt = plength(bp);
  	SendPppFrame(bp);
  	RestartIdleTimer();
! 	ipOutOctets += cnt;
  	break;
        }
      }
--- 509,515 ----
  	cnt = plength(bp);
  	SendPppFrame(bp);
  	RestartIdleTimer();
!         IpcpAddOutOctets(cnt);
  	break;
        }
      }
Index: ipcp.c
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/ipcp.c,v
retrieving revision 1.36
diff -c -r1.36 ipcp.c
*** ipcp.c	1997/11/14 15:39:14	1.36
--- ipcp.c	1997/11/18 14:09:09
***************
*** 33,38 ****
--- 33,39 ----
  #include <limits.h>
  #include <stdio.h>
  #include <string.h>
+ #include <time.h>
  #include <unistd.h>
  
  #include "mbuf.h"
***************
*** 51,56 ****
--- 52,58 ----
  #include "vars.h"
  #include "vjcomp.h"
  #include "ip.h"
+ #include "throughput.h"
  
  #ifndef NOMSEXT
  struct in_addr ns_entries[2];
***************
*** 62,68 ****
  struct in_range  DefHisAddress;
  struct in_addr   TriggerAddress;
  int HaveTriggerAddress;
- struct pppTimer IpcpReportTimer;
  
  static void IpcpSendConfigReq(struct fsm *);
  static void IpcpSendTerminateAck(struct fsm *);
--- 64,69 ----
***************
*** 73,83 ****
  static void IpcpLayerUp(struct fsm *);
  static void IpcpLayerDown(struct fsm *);
  static void IpcpInitRestartCounter(struct fsm *);
- static int  IpcpOctetsIn(void);
- static int  IpcpOctetsOut(void);
- 
- static int lastInOctets, lastOutOctets;
- static int StartingIpIn, StartingIpOut;
  
  #define	REJECTED(p, x)	(p->his_reject & (1<<x))
  
--- 74,79 ----
***************
*** 126,157 ****
  
  #define NCFTYPES128 (sizeof(cftypes)/sizeof(char *))
  
! /*
!  * Function called every second. Updates connection period and idle period,
!  * also update LQR information.
!  */
! static void
! IpcpReportFunc()
  {
!   ipConnectSecs++;
!   if (lastInOctets == ipInOctets && lastOutOctets == ipOutOctets)
!     ipIdleSecs++;
!   lastInOctets = ipInOctets;
!   lastOutOctets = ipOutOctets;
!   StopTimer(&IpcpReportTimer);
!   IpcpReportTimer.state = TIMER_STOPPED;
!   StartTimer(&IpcpReportTimer);
  }
  
! static void
! IpcpStartReport()
  {
!   ipIdleSecs = ipConnectSecs = 0;
!   StopTimer(&IpcpReportTimer);
!   IpcpReportTimer.state = TIMER_STOPPED;
!   IpcpReportTimer.load = SECTICKS;
!   IpcpReportTimer.func = IpcpReportFunc;
!   StartTimer(&IpcpReportTimer);
  }
  
  int
--- 122,139 ----
  
  #define NCFTYPES128 (sizeof(cftypes)/sizeof(char *))
  
! struct pppThroughput throughput;
! 
! void
! IpcpAddInOctets(int n)
  {
!   throughput_addin(&throughput, n);
  }
  
! void
! IpcpAddOutOctets(int n)
  {
!   throughput_addout(&throughput, n);
  }
  
  int
***************
*** 167,176 ****
  	  inet_ntoa(icp->his_ipaddr), icp->his_compproto);
    fprintf(VarTerm, " my  side: %s, %lx\n",
  	  inet_ntoa(icp->want_ipaddr), icp->want_compproto);
-   fprintf(VarTerm, "Connected: %d secs, idle: %d secs\n\n",
- 	  ipConnectSecs, ipIdleSecs);
-   fprintf(VarTerm, " %d octets in, %d octets out\n",
- 	  IpcpOctetsIn(), IpcpOctetsOut());
  
    fprintf(VarTerm, "Defaults:\n");
    fprintf(VarTerm, " My Address:  %s/%d\n",
--- 149,154 ----
***************
*** 182,187 ****
--- 160,168 ----
    else
      fprintf(VarTerm, " Negotiation(trigger): MYADDR\n");
  
+   fprintf(VarTerm, "\n");
+   throughput_disp(&throughput, VarTerm);
+ 
    return 0;
  }
  
***************
*** 232,239 ****
      icp->want_compproto = 0;
    icp->heis1172 = 0;
    IpcpFsm.maxconfig = 10;
!   StartingIpIn = ipInOctets;
!   StartingIpOut = ipOutOctets;
  }
  
  static void
--- 213,219 ----
      icp->want_compproto = 0;
    icp->heis1172 = 0;
    IpcpFsm.maxconfig = 10;
!   throughput_init(&throughput);
  }
  
  static void
***************
*** 292,321 ****
    NewPhase(PHASE_TERMINATE);
  }
  
- static int
- IpcpOctetsIn()
- {
-   return ipInOctets < StartingIpIn ?
-     INT_MAX - StartingIpIn + ipInOctets - INT_MIN + 1 :
-     ipInOctets - StartingIpIn;
- }
- 
- static int
- IpcpOctetsOut()
- {
-   return ipOutOctets < StartingIpOut ?
-     INT_MAX - StartingIpOut + ipOutOctets - INT_MIN + 1 :
-     ipOutOctets - StartingIpOut;
- }
- 
  static void
  IpcpLayerDown(struct fsm * fp)
  {
    LogPrintf(LogIPCP, "IpcpLayerDown.\n");
!   LogPrintf(LogIPCP, "%d octets in, %d octets out\n",
! 	    IpcpOctetsIn(), IpcpOctetsOut());
!   StopTimer(&IpcpReportTimer);
!   Prompt();
  }
  
  /*
--- 272,283 ----
    NewPhase(PHASE_TERMINATE);
  }
  
  static void
  IpcpLayerDown(struct fsm * fp)
  {
    LogPrintf(LogIPCP, "IpcpLayerDown.\n");
!   throughput_stop(&throughput);
!   throughput_log(&throughput, LogIPCP, NULL);
  }
  
  /*
***************
*** 344,352 ****
    if (mode & MODE_ALIAS)
      VarPacketAliasSetAddress(IpcpInfo.want_ipaddr);
    OsLinkup();
!   StartingIpIn = ipInOctets;
!   StartingIpOut = ipOutOctets;
!   IpcpStartReport();
    StartIdleTimer();
  }
  
--- 306,312 ----
    if (mode & MODE_ALIAS)
      VarPacketAliasSetAddress(IpcpInfo.want_ipaddr);
    OsLinkup();
!   throughput_start(&throughput);
    StartIdleTimer();
  }
  
Index: ipcp.h
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/ipcp.h,v
retrieving revision 1.12
diff -c -r1.12 ipcp.h
*** ipcp.h	1997/10/26 12:42:11	1.12
--- ipcp.h	1997/11/18 12:44:33
***************
*** 76,78 ****
--- 76,80 ----
  extern void IpcpOpen(void);
  extern int ReportIpcpStatus(void);
  extern void IpcpInput(struct mbuf *);
+ extern void IpcpAddInOctets(int);
+ extern void IpcpAddOutOctets(int);
Index: lcp.c
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/lcp.c,v
retrieving revision 1.46
diff -c -r1.46 lcp.c
*** lcp.c	1997/11/16 22:15:04	1.46
--- lcp.c	1997/11/18 13:47:30
***************
*** 332,338 ****
  StopAllTimers()
  {
    StopTimer(&LcpReportTimer);
-   StopTimer(&IpcpReportTimer);
    StopIdleTimer();
    StopTimer(&AuthPapInfo.authtimer);
    StopTimer(&AuthChapInfo.authtimer);
--- 332,337 ----
Index: modem.c
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/modem.c,v
retrieving revision 1.65
diff -c -r1.65 modem.c
*** modem.c	1997/11/18 08:49:03	1.65
--- modem.c	1997/11/18 14:36:46
***************
*** 55,60 ****
--- 55,61 ----
  #include "vars.h"
  #include "main.h"
  #include "chat.h"
+ #include "throughput.h"
  #ifdef __OpenBSD__
  #include <util.h>
  #else
***************
*** 76,81 ****
--- 77,83 ----
  static struct mbuf *modemout;
  static struct mqueue OutputQueues[PRI_LINK + 1];
  static int dev_is_modem;
+ static struct pppThroughput throughput;
  
  static void CloseLogicalModem(void);
  
***************
*** 116,245 ****
  }      speeds[] = {
  
  #ifdef B50
!   {
!     50, B50,
!   },
  #endif
  #ifdef B75
!   {
!     75, B75,
!   },
  #endif
  #ifdef B110
!   {
!     110, B110,
!   },
  #endif
  #ifdef B134
!   {
!     134, B134,
!   },
  #endif
  #ifdef B150
!   {
!     150, B150,
!   },
  #endif
  #ifdef B200
!   {
!     200, B200,
!   },
  #endif
  #ifdef B300
!   {
!     300, B300,
!   },
  #endif
  #ifdef B600
!   {
!     600, B600,
!   },
  #endif
  #ifdef B1200
!   {
!     1200, B1200,
!   },
  #endif
  #ifdef B1800
!   {
!     1800, B1800,
!   },
  #endif
  #ifdef B2400
!   {
!     2400, B2400,
!   },
  #endif
  #ifdef B4800
!   {
!     4800, B4800,
!   },
  #endif
  #ifdef B9600
!   {
!     9600, B9600,
!   },
  #endif
  #ifdef B19200
!   {
!     19200, B19200,
!   },
  #endif
  #ifdef B38400
!   {
!     38400, B38400,
!   },
  #endif
  #ifndef _POSIX_SOURCE
  #ifdef B7200
!   {
!     7200, B7200,
!   },
  #endif
  #ifdef B14400
!   {
!     14400, B14400,
!   },
  #endif
  #ifdef B28800
!   {
!     28800, B28800,
!   },
  #endif
  #ifdef B57600
!   {
!     57600, B57600,
!   },
  #endif
  #ifdef B76800
!   {
!     76800, B76800,
!   },
  #endif
  #ifdef B115200
!   {
!     115200, B115200,
!   },
  #endif
  #ifdef B230400
!   {
!     230400, B230400,
!   },
  #endif
  #ifdef EXTA
!   {
!     19200, EXTA,
!   },
  #endif
  #ifdef EXTB
!   {
!     38400, EXTB,
!   },
  #endif
  #endif				/* _POSIX_SOURCE */
!   {
!     0, 0
!   }
  };
  
  static int
--- 118,197 ----
  }      speeds[] = {
  
  #ifdef B50
!   { 50, B50, },
  #endif
  #ifdef B75
!   { 75, B75, },
  #endif
  #ifdef B110
!   { 110, B110, },
  #endif
  #ifdef B134
!   { 134, B134, },
  #endif
  #ifdef B150
!   { 150, B150, },
  #endif
  #ifdef B200
!   { 200, B200, },
  #endif
  #ifdef B300
!   { 300, B300, },
  #endif
  #ifdef B600
!   { 600, B600, },
  #endif
  #ifdef B1200
!   { 1200, B1200, },
  #endif
  #ifdef B1800
!   { 1800, B1800, },
  #endif
  #ifdef B2400
!   { 2400, B2400, },
  #endif
  #ifdef B4800
!   { 4800, B4800, },
  #endif
  #ifdef B9600
!   { 9600, B9600, },
  #endif
  #ifdef B19200
!   { 19200, B19200, },
  #endif
  #ifdef B38400
!   { 38400, B38400, },
  #endif
  #ifndef _POSIX_SOURCE
  #ifdef B7200
!   { 7200, B7200, },
  #endif
  #ifdef B14400
!   { 14400, B14400, },
  #endif
  #ifdef B28800
!   { 28800, B28800, },
  #endif
  #ifdef B57600
!   { 57600, B57600, },
  #endif
  #ifdef B76800
!   { 76800, B76800, },
  #endif
  #ifdef B115200
!   { 115200, B115200, },
  #endif
  #ifdef B230400
!   { 230400, B230400, },
  #endif
  #ifdef EXTA
!   { 19200, EXTA, },
  #endif
  #ifdef EXTB
!   { 38400, EXTB, },
  #endif
  #endif				/* _POSIX_SOURCE */
!   { 0, 0 }
  };
  
  static int
***************
*** 268,276 ****
    return B0;
  }
  
- static time_t uptime;
- u_long OctetsIn, OctetsOut;
- 
  void
  DownConnection()
  {
--- 220,225 ----
***************
*** 478,485 ****
  static void
  HaveModem()
  {
!   time(&uptime);
!   OctetsIn = OctetsOut = 0;
    connect_count++;
    LogPrintf(LogPHASE, "Connected!\n");
  }
--- 427,433 ----
  static void
  HaveModem()
  {
!   throughput_start(&throughput);
    connect_count++;
    LogPrintf(LogPHASE, "Connected!\n");
  }
***************
*** 497,503 ****
      LogPrintf(LogDEBUG, "OpenModem: Modem is already open!\n");
      /* We're going back into "term" mode */
    else if (mode & MODE_DIRECT) {
-     HaveModem();
      if (isatty(0)) {
        LogPrintf(LogDEBUG, "OpenModem(direct): Modem is a tty\n");
        cp = ttyname(0);
--- 445,450 ----
***************
*** 507,516 ****
--- 454,465 ----
          return -1;
        }
        modem = 0;
+       HaveModem();
      } else {
        LogPrintf(LogDEBUG, "OpenModem(direct): Modem is not a tty\n");
        SetVariable(0, 0, 0, VAR_DEVICE);
        /* We don't call ModemTimeout() with this type of connection */
+       HaveModem();
        return modem = 0;
      }
    } else {
***************
*** 599,605 ****
        if (ioctl(modem, TIOCMGET, &mbits)) {
          LogPrintf(LogERROR, "OpenModem: Cannot get modem status: %s\n",
  		  strerror(errno));
-         uptime = 0;
          CloseLogicalModem();
  	return (-1);
        }
--- 548,553 ----
***************
*** 609,615 ****
      if (oldflag < 0) {
        LogPrintf(LogERROR, "OpenModem: Cannot get modem flags: %s\n",
  		strerror(errno));
-       uptime = 0;
        CloseLogicalModem();
        return (-1);
      }
--- 557,562 ----
***************
*** 674,701 ****
    }
  }
  
! void ModemAddInOctets(int n)
  {
!   OctetsIn += n;
  }
  
! void ModemAddOutOctets(int n)
  {
!   OctetsOut += n;
  }
  
  static void
  ClosePhysicalModem()
  {
    close(modem);
!   if (uptime) {
!     LogPrintf(LogPHASE, "Connect time: %d secs\n", time(NULL) - uptime);
!     LogPrintf(LogPHASE, "Modem: %d octets in, %d octets out\n",
!               OctetsIn, OctetsOut);
!     OctetsIn = OctetsOut = 0;
!     uptime = 0;
!   }
!   modem = -1;			/* Mark modem as closed */
  }
  
  void
--- 621,645 ----
    }
  }
  
! void
! ModemAddInOctets(int n)
  {
!   throughput_addin(&throughput, n);
  }
  
! void
! ModemAddOutOctets(int n)
  {
!   throughput_addout(&throughput, n);
  }
  
  static void
  ClosePhysicalModem()
  {
+   LogPrintf(LogDEBUG, "ClosePhysicalModem\n");
    close(modem);
!   modem = -1;
!   throughput_log(&throughput, LogPHASE, "Modem");
  }
  
  void
***************
*** 703,715 ****
  {
    struct termios tio;
  
!   LogPrintf(LogDEBUG, "Hangup modem (%s), uptime %ld\n",
!             modem >= 0 ? "open" : "closed", (long)uptime);
!   StopTimer(&ModemTimer);
  
    if (modem < 0)
      return;
  
    if (TermMode) {
      LogPrintf(LogDEBUG, "HangupModem: Not in 'term' mode\n");
      return;
--- 647,660 ----
  {
    struct termios tio;
  
!   LogPrintf(LogDEBUG, "Hangup modem (%s)\n", modem >= 0 ? "open" : "closed");
  
    if (modem < 0)
      return;
  
+   StopTimer(&ModemTimer);
+   throughput_stop(&throughput);
+ 
    if (TermMode) {
      LogPrintf(LogDEBUG, "HangupModem: Not in 'term' mode\n");
      return;
***************
*** 735,740 ****
--- 680,686 ----
      char ScriptBuffer[SCRIPT_LEN];
  
      strcpy(ScriptBuffer, VarHangupScript);	/* arrays are the same size */
+     LogPrintf(LogDEBUG, "HangupModem: Script: %s\n", ScriptBuffer);
      if (flag || !(mode & MODE_DEDICATED)) {
        DoChat(ScriptBuffer);
        tcflush(modem, TCIOFLUSH);
***************
*** 755,760 ****
--- 701,707 ----
  static void
  CloseLogicalModem()
  {
+   LogPrintf(LogDEBUG, "CloseLogicalModem\n");
    if (modem >= 0) {
      ClosePhysicalModem();
      if (Utmp) {
***************
*** 957,962 ****
--- 904,912 ----
    fprintf(VarTerm, "DialScript  = %s\n", VarDialScript);
    fprintf(VarTerm, "LoginScript = %s\n", VarLoginScript);
    fprintf(VarTerm, "PhoneNumber(s) = %s\n", VarPhoneList);
+ 
+   fprintf(VarTerm, "\n");
+   throughput_disp(&throughput, VarTerm);
  
    return 0;
  }
Index: ppp.8
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/ppp.8,v
retrieving revision 1.79
diff -c -r1.79 ppp.8
*** ppp.8	1997/11/14 20:07:39	1.79
--- ppp.8	1997/11/18 13:04:44
***************
*** 1548,1563 ****
  may be one of the following:
  
  .Bl -tag -width 20
! .It vjcomp
! Default: Enabled and Accepted.  This option decides if Van Jacobson
! header compression will be used.
! 
! .It lqr
! Default: Disabled and Accepted.  This option decides if Link Quality
! Requests will be sent.  LQR is a protocol that allows
! .Nm
! to determine that the link is down without relying on the modems
! carrier detect.
  
  .It chap
  Default: Disabled and Accepted.  CHAP stands for Challenge Handshake
--- 1548,1557 ----
  may be one of the following:
  
  .Bl -tag -width 20
! .It acfcomp
! Default: Enabled and Accepted.  ACFComp stands for Address and Control
! Field Compression.  Non LCP packets usually have very similar address
! and control fields - making them easily compressible.
  
  .It chap
  Default: Disabled and Accepted.  CHAP stands for Challenge Handshake
***************
*** 1593,1598 ****
--- 1587,1606 ----
  .Dq set encrypt
  command for further details.
  
+ .It lqr
+ Default: Disabled and Accepted.  This option decides if Link Quality
+ Requests will be sent.  LQR is a protocol that allows
+ .Nm
+ to determine that the link is down without relying on the modems
+ carrier detect.
+ 
+ .It msext
+ Default: Disabled.  This option allows the use of Microsoft's
+ .Em PPP
+ extensions, supporting the negotiation of the DNS and the NetBIOS NS.
+ Enabling this allows us to pass back the values given in "set ns"
+ and "set nbns".
+ 
  .It pap
  Default: Disabled and Accepted.  PAP stands for Password Authentication
  Protocol.  Only one of PAP and CHAP (above) may be negotiated.  With
***************
*** 1619,1655 ****
  .Pa /etc/ppp/ppp.conf .
  PAP is accepted by default.
  
! .It acfcomp
! Default: Enabled and Accepted.  ACFComp stands for Address and Control
! Field Compression.  Non LCP packets usually have very similar address
! and control fields - making them easily compressible.
  
  .It protocomp
  Default: Enabled and Accepted.  This option is used to negotiate
  PFC (Protocol Field Compression), a mechanism where the protocol
  field number is reduced to one octet rather than two.
  
! .It pred1
! Default: Enabled and Accepted.  This option decides if Predictor 1
! compression will be used.
! 
! .It msext
! Default: Disabled.  This option allows the use of Microsoft's
! .Em PPP
! extensions, supporting the negotiation of the DNS and the NetBIOS NS.
! Enabling this allows us to pass back the values given in "set ns"
! and "set nbns".
! 
  .El
  The following options are not actually negotiated with the peer.
  Therefore, accepting or denying them makes no sense.
  
  .Bl -tag -width 20
- .It proxy
- Default: Disabled.  Enabling this option will tell
- .Nm
- to proxy ARP for the peer.
- 
  .It passwdauth
  Default: Disabled.  Enabling this option will tell the PAP authentication
  code to use the password file (see
--- 1627,1651 ----
  .Pa /etc/ppp/ppp.conf .
  PAP is accepted by default.
  
! .It pred1
! Default: Enabled and Accepted.  This option decides if Predictor 1
! compression will be used.
  
  .It protocomp
  Default: Enabled and Accepted.  This option is used to negotiate
  PFC (Protocol Field Compression), a mechanism where the protocol
  field number is reduced to one octet rather than two.
  
! .It vjcomp
! Default: Enabled and Accepted.  This option decides if Van Jacobson
! header compression will be used.
  .El
+ 
+ .Pp
  The following options are not actually negotiated with the peer.
  Therefore, accepting or denying them makes no sense.
  
  .Bl -tag -width 20
  .It passwdauth
  Default: Disabled.  Enabling this option will tell the PAP authentication
  code to use the password file (see
***************
*** 1657,1662 ****
--- 1653,1678 ----
  to authenticate the caller rather than the
  .Pa /etc/ppp/ppp.secret
  file.
+ 
+ .It proxy
+ Default: Disabled.  Enabling this option will tell
+ .Nm
+ to proxy ARP for the peer.
+ 
+ .It throughput
+ Default: Disabled.  Enabling this option will tell
+ .Nm
+ to gather thoroughput statistics.  Input and output is sampled over
+ a rolling 5 second window, and current, best and total figures are
+ retained.  This data is output when the relevent
+ .Em PPP
+ layer shuts down, and is also available using the
+ .Dq show
+ command.  Troughput statistics are available at the
+ .Dq IPCP
+ and 
+ .Dq modem
+ levels.
  
  .It utmp
  Default: Enabled.  Normally, when a user is authenticated using PAP or
Index: vars.c
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/vars.c,v
retrieving revision 1.34
diff -c -r1.34 vars.c
*** vars.c	1997/11/11 22:58:14	1.34
--- vars.c	1997/11/18 11:31:31
***************
*** 65,70 ****
--- 65,71 ----
    {"msext", CONF_DISABLE, CONF_NONE},
    {"passwdauth", CONF_DISABLE, CONF_NONE},
    {"utmp", CONF_ENABLE, CONF_NONE},
+   {"throughput", CONF_DISABLE, CONF_NONE},
    {NULL},
  };
  
Index: vars.h
===================================================================
RCS file: /home/ncvs/src/usr.sbin/ppp/vars.h,v
retrieving revision 1.33
diff -c -r1.33 vars.h
*** vars.h	1997/11/09 22:07:29	1.33
--- vars.h	1997/11/18 11:30:37
***************
*** 43,49 ****
  #define ConfMSExt	8
  #define ConfPasswdAuth	9
  #define ConfUtmp	10
! #define	MAXCONFS	11
  
  #define	Enabled(x)	(pppConfs[x].myside & CONF_ENABLE)
  #define	Acceptable(x)	(pppConfs[x].hisside & CONF_ACCEPT)
--- 43,50 ----
  #define ConfMSExt	8
  #define ConfPasswdAuth	9
  #define ConfUtmp	10
! #define ConfThroughput	11
! #define	MAXCONFS	12
  
  #define	Enabled(x)	(pppConfs[x].myside & CONF_ENABLE)
  #define	Acceptable(x)	(pppConfs[x].hisside & CONF_ACCEPT)
