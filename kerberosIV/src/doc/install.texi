@node Installing programs, How to set up a realm, What is Kerberos?, Top
@chapter Installing programs

@menu
* Installing from source::      
* Installing a binary distribution::  
* Finishing the installation::  
* .klogin::
* Authentication modules::      
@end menu

@node Installing from source, Installing a binary distribution, Installing programs, Installing programs
@comment  node-name,  next,  previous,  up
@section Installing from source

KerberosIV is by default built by the standard @code{make build} procedure.

@table @asis

@item Obtain and build the latest usr.bin/compile_et. 
@example
# cd /usr/src/usr.bin/compile_et
# make clean && make depend && make && make install
@end example

@item Obtain and build the latest lib/libcom_err. 
@example
# cd /usr/src/lib/libcom_err
# make clean && make depend && make && make install
@end example

@item If you are not doing a complete make build, regenerate the Kerberos header files, and then rebuild Kerberos: 
@example
# rm -r /usr/include/kerberosIV/*
# cd /usr/src
# make includes
# cd /usr/src/kerberosIV
# make cleandir && make depend && make && make install
@end example

@item Otherwise, simply restart your make build. 

@end table

@node Installing a binary distribution, Finishing the installation, Installing from source, Installing programs
@comment  node-name,  next,  previous,  up
@section Installing a binary distribution

OpenBSD is shipped with KerberosIV builtin, so no installation is necessary.

@node Finishing the installation, .klogin, Installing a binary distribution, Installing programs
@section Finishing the installation

@pindex su
The only program that needs to be installed setuid to root is @code{su}.

If 
@pindex rlogin
@pindex rsh
@code{rlogin} and @code{rsh} are setuid to root they will fall back to
non-kerberised protocols if the kerberised ones fail for some
reason. The old protocols use reserved ports as security, and therefore
the programs have to be setuid to root. If you don't need this
functionality consider turning off the setuid bit.

@menu
* .klogin::
* Authentication modules::      
@end menu

@node .klogin, Authentication modules, Finishing the installation, Installing programs
@comment  node-name,  next,  previous,  up

Each user can have an authorization file @file{~@var{user}/.klogin}
@pindex .klogin
that
determines what principals can login as that user.  It is similar to the
@file{~user/.rhosts} except that it does not use IP and privileged-port
based authentication.  If this file does not exist, the user herself
@samp{user@@LOCALREALM} will be allowed to login.  Supplementary local
realms (@pxref{Install the configuration files}) also apply here.  If the
file exists, it should contain the additional principals that are to
be allowed to login as the local user @var{user}.

This file is consulted by most of the daemons (@code{rlogind},
@code{rshd}, @code{ftpd}, @code{telnetd}, @code{popper}, @code{kauthd}, and
@code{kxd})
@pindex rlogind
@pindex rshd
@pindex ftpd
@pindex telnetd
@pindex popper
@pindex kauthd
@pindex kxd
to determine if the
principal requesting a service is allowed to receive it.  It is also
used by
@pindex su
@code{su}, which is a good way of keeping an access control list (ACL)
on who is allowed to become root.  Assuming that @file{~root/.klogin}
contains:

@example
nisse.root@@FOO.SE
lisa.root@@FOO.SE
@end example

both nisse and lisa will be able to su to root by entering the password
of their root instance.  If that fails or if the user is not listed in
@file{~root/.klogin}, @code{su} falls back to the normal policy of who
is permitted to su.  Also note that that nisse and lisa can login
with e.g. @code{telnet} as root provided that they have tickets for
their root instance.
