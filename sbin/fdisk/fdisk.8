.\"	$OpenBSD: fdisk.8,v 1.4 1996/09/25 11:24:11 deraadt Exp $
.\"	$NetBSD: fdisk.8,v 1.8 1995/03/18 14:55:34 cgd Exp $
.\"
.Dd April 4, 1993
.Dt FDISK 8
.Os OpenBSD
.Sh NAME
.Nm fdisk
.Nd DOS partition maintenance program
.Sh SYNOPSIS
.Nm
.Op Fl aium
.Op f Ar mbrname
.Op Ar device
.Sh PROLOGUE
In order for the BIOS to boot the kernel, certain conventions must be
adhered to.
Sector 0 of the disk must contain boot code, a MBR partition table,
and a magic number.
These MBR partitions (also known as BIOS partitions) can be used to
break the disk up into several pieces.
The BIOS loads sector 0 into memory, verifies the magic number, and
begins executing the code at the first byte.
The normal DOS MBR boot code searches the MBR partition table for an
`active' partition (indicated by a flag value of 0x80); if one is found,
the boot block from that partition is loaded and replaces the original
boot block.
.Pp
The following options are available:
.Bl -tag -width indent
.It Fl a
To change the active partition.
.It Fl i
Initialize the MBR sector from other information.
.It Fl u
Update, or change, the MBR sector information.
.It Fl m
Force creation of a new MBR sector.
.It Fl f Ar mbrname
Specifies an alternate MBR file.
.El
.Pp
The DOS
.Nm
program can be used to divide space on the disk into partitions and set
one active.
This 
.Nm
program serves a similar purpose to the DOS program.
When called with no special flags, it prints the MBR partition
table of the specified device, ie.
.Bd -literal
    # fdisk wd0
    Using device /dev/rwd0c:
    Parameters extracted from in-core disklabel are:
        cylinders=769 heads=15 sectors/track=33
        sectors/cylinder=495 total=380655
    Parameters to be used for BIOS calculations are:
        cylinders=769 heads=15 sectors/track=33
        sectors/cylinder=495 
    Warning: BIOS sector numbers start at 1 (not 0)
    MBR Partition 0: sysid 166=0xa6 (OpenBSD)
        start 495, size 380160 (185 MB), flag 0x80
        beg: cylinder    1, head   0, sector  1
        end: cylinder  768, head  14, sector 33
    MBR Partition 1: sysid 6=0x06 (Primary 'big' DOS (> 32MB))
        start 380655, size 2475 (1 MB), flag 0x00
        beg: cylinder  764, head   0, sector  1
        end: cylinder  768, head  14, sector 33
    MBR Partition 2: <UNUSED>
    MBR Partition 3: sysid 165=0xa5 (386BSD/FreeBSD/NetBSD)
        start 383130, size 224234 (109 MB), flag 0x00
        beg: cylinder  769, head   0, sector  2
        end: cylinder  197, head  14, sector 33
.Ed
.Pp
This disk is divided into three partitions that happen to fill the disk.
The second partition overlaps the end of the first.
(Used for debugging purposes)
.Bl -tag -width "cyl, sector and head"
.It Em "sysid"
is used to label the partition.
.oS
reserves the
magic number 166 decimal (A6 in hex).
If no 166 partition is found, it will use an older 386BSD partition
(with a magic number of 165).
.It Em "start and size"
fields provide the start address
and size of a partition in sectors.
.It Em "flag 0x80"
specifies that this is the active partition.
.It Em "cyl, sector and head"
fields are used to specify the beginning address
and end address for the partition.
.It Em "Note:"
these numbers are calculated using BIOS's understanding of the disk
geometry and saved in the bootblock.
.El
.Pp
The flags
.Fl i
or
.Fl u
are used to indicate that the partition data is to be updated.
In this mode,
.Nm
will enter a conversational mode.
This mode is designed not to change any data unless you explicitly
tell it to;
.Nm
selects defaults for its questions to guarantee that behavior.
.Pp
It displays each partition and asks if you want to edit it.
If you reply affirmatively,
it will step through each field showing the old value
and asking for a new one.
When you are done with a partition,
.Nm
will display the information again and ask if it is correct.
.Nm
will then procede to the next entry.
.Pp
Getting the
.Em cyl, sector,
and
.Em head
fields correct is tricky.
So by default,
they will be calculated for you;
you can specify them if you choose.
.Pp
After all the partitions are processed,
you are given the option to change the
.Em active
partition.
To change only the
.Em active
partition, you can use the
.Fl a
flag instead.
.Pp
Finally,
when the all the data for the first sector has been accumulated,
.Nm
will ask if you really want to rewrite sector 0.
Only if you reply affirmatively to this question will
.Nm
write anything to the disk.
.Pp
The difference between the
.Fl u
flag and
.Fl i
flag is that
the
.Fl u
flag just edits the fields as they appear on the disk, while the
.Fl i
flag is used to `initialize' sector 0.
The
.Fl i
flag instructs
.Nm
to start by making the first 3 partitions empty, setting the last partition
to use the whole disk for
.oS ,
and marking the last partition active.
.Sh NOTES
The automatic calculation of starting cylinder etc. uses
a set of figures that represent what the BIOS thinks is the
geometry of the drive.
These figures are by default taken from the incore disklabel, but
.Nm
gives you an opportunity to change them.
This allows the user to create a bootblock that can work with drives
that use geometry translation under the BIOS.
.Pp
If you hand craft your disk layout,
please make sure that the
.oS
partition starts on a cylinder boundary.
(This restriction may be changed in the future.)
.Pp
Editing an existing partition is risky, and may cause you to
lose all the data in that partition.
.Pp
You should run this program interactively once or twice to see how it works.
This is completely safe as long as you answer the last question in the negative.
.Sh FILES
.Pa /usr/mdec/mbr
- the default MBR that can be written onto the disk
.Sh SEE ALSO
.Xr disklabel 8
.Sh BUGS
There are subtleties that the program detects that are not explained in
this manual page.
