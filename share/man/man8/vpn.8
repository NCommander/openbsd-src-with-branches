.\" $OpenBSD: vpn.8,v 1.32 2000/04/22 02:04:23 angelos Exp $
.\" Copyright 1998 Niels Provos <provos@physnet.uni-hamburg.de>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Niels Provos.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" Manual page, using -mandoc macros
.\"
.Dd February 9, 1999
.Dt VPN 8
.Os
.Sh NAME
.Nm vpn
.Nd configuring the system for virtual private networks
.Sh DESCRIPTION
A virtual private network is used to securely connect two or more subnets
over the internet. For each subnet there is a security gateway which is
linked via a cryptographically secured tunnel to the security gateway of
the other subnet.
.Xr ipsec 4
is used to provide the necessary network-layer cryptographic services.
This document describes the configuration process for setting up a
.Nm VPN .
.Pp
Briefly, creating a VPN consists of the following steps:
.Pp
.Bl -enum -compact
.It
Choose a key exchange method: manual keyed, or automated via
.Xr isakmpd 8
or
.Xr photurisd 8 .
.It
Create a Security Association (SA) for each endpoint.
.It
Create the appropriate IPSec flows.
.It
Configure your firewall rules appropriately.
.El
.Ss Choosing a key exchange method
There are currently two key exchange methods available:
.Pp
.Bl -bullet -inset -compact
.It
manual (symmetric shared secret)
.It
.Xr photurisd 8
.El
.Pp
At present VPNs between private (RFC 1918) networks must use
manual keying, as
.Xr photurisd 8
can only be used if the IP address of the security gateway actually
falls within the range of addresses being tunnelled to.
This can clearly never occur if the addresses being tunnelled to
are non-routable private networks.
.Ss Generating Manual Keys
The shared secret symmetric keys used to create a VPN can
be any hexadecimal value, so long as both sides of the connection use
the same values. Since the security of the VPN is based on these keys
being unguessable, it is very important that the keys be chosen using a
strong random source. One practical method of generating them
is by using the
.Xr random 4
device. To produce 160 bits (20 bytes) of randomness, for example, do a:
.Bd -literal
   dd if=/dev/urandom bs=20 count=1 |perl -pe 's/(.)/unpack('H2',)/ges'
.Ed
.Pp
Different cipher types may require different sized keys.
.Pp
.Bl -column "Cipher" "Key Length" -compact
.It Em Cipher	Key Length
.It Li DES Ta "56 bits"
.It Li 3DES Ta "168 bits"
.It Li BLF Ta "Variable (160 bits recommended)"
.It Li CAST Ta "Variable (160 bits recommended)"
.It Li SKIPJACK Ta "80 bits"
.El
.Pp
Use of DES or SKIPJACK as an encryption algorithm is not recommended
(except for backwards compatibility) due to their short key length.
Furthermore, recent attacks on SKIPJACK have shown severe weaknesses
in its structure.
.Pp
Note that DES requires 8 bytes to form a 56-bit key and 3DES requires 24 bytes
to form its 168-bit key. This is because the most significant bit of each byte
is ignored by both algorithms.
.Ss Enabling the Appropriate Kernel Operations
.Xr ipsec 4
operations must be first enabled using
.Xr sysctl 8 .
Before creating security associations, or performing
encryption (ESP) or authentication (AH) operation, ensure the appropriate
kernel operation has been enabled:
.Bd -literal
sysctl -w net.inet.esp.enable=1
sysctl -w net.inet.ah.enable=1
.Ed
.Pp
and
.Bd -literal
sysctl -w net.inet.ip.ipsec-acl=1
.Ed
.Pp
if inbound packet verification is desired (strongly recommended).
.Pp
For more permanent operation, these options should be enabled in your
.Xr sysctl.conf 5 .
.Pp

.Ss Creating Security Associations
Before the IPSec flows can be defined, two Security Associations (SAs)
must be defined on each end of the VPN, e.g.:
.Bd -literal
ipsecadm new esp -spi SPI_OUT -src A_EXTERNAL_IP
         -dst B_EXTERNAL_IP -forcetunnel
         -enc 3des -auth sha1
         -keyfile ENCRYPTION_KEY_FILE -authkeyfile AUTHENTICATION_KEY_FILE

ipsecadm new esp -spi SPI_IN -src B_EXTERNAL_IP
         -dst A_EXTERNAL_IP -forcetunnel
         -enc 3des -auth sha1
         -keyfile ENCRYPTION_KEY_FILE -authkeyfile AUTHENTICATION_KEY_FILE
.Ed
.Pp
Note that the
.Fl key
and
.Fl authkey
may be used to specify the keys directly in the
.Xr ipsecadm 8
command line.  However, another user could view the files by using the
.Xr ps 1
command at the appropriate time (or use a program for doing so).
.Pp
.Ss Creating IPSec Flows
Both IPsec gateways need to configure
.Xr ipsec 4
routes with the
.Xr ipsecadm 8
tool:
.Pp
On the security gateway of subnet A:
.Bd -literal
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_EXTERNAL_IP 255.255.255.255
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_EXTERNAL_IP 255.255.255.255

ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_EXTERNAL_IP 255.255.255.255 -ingress
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK -ingress
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK -ingress
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_EXTERNAL_IP 255.255.255.255 -ingress
.Ed
.Pp
and on the security gateway of subnet B:
.Bd -literal
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_EXTERNAL_IP 255.255.255.255
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_IN -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr B_EXTERNAL_IP 255.255.255.255
               A_INTERNAL_NETWORK A_INTERNAL_NETMASK
ipsecadm flow -dst A_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr B_INTERNAL_NETWORK B_INTERNAL_NETMASK
               A_EXTERNAL_IP 255.255.255.255

ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_EXTERNAL_IP 255.255.255.255 -ingress
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK -ingress
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_EXTERNAL_IP 255.255.255.255
               B_INTERNAL_NETWORK B_INTERNAL_NETMASK -ingress
ipsecadm flow -dst B_EXTERNAL_IP -spi SPI_OUT -proto esp
         -addr A_INTERNAL_NETWORK A_INTERNAL_NETMASK
               B_EXTERNAL_IP 255.255.255.255 -ingress
.Ed
.Pp
Furthermore, unless manual keying is used,
both security gateways need to start the
.Xr photurisd 8
key management daemon with the
.Fl v
flag and make sure it is configured properly on both sides to
provide the required security services (typically, encryption and
authentication).
.Ss Configuring Firewall Rules
.Xr ipf 8
needs to be configured such that all packets from the outside are blocked
by default. Only successfully IPSec-processed packets (from the
.Xr enc0 4
interface), or key management packets (for
.Xr photurisd 8 ,
.Tn UDP
packets with source and destination ports of 468, and for
.Xr isakmpd 8 ,
.Tn UDP
packets with source and destination ports of 500) should be allowed to pass.
.Pp
The
.Xr ipf 5
rules for a tunnel which uses encryption (the ESP IPsec protocol) and
.Xr photurisd 8
on security gateway A might look like this:
.Bd -literal
# ne0 is the only interface going to the outside.
block in log on ne0 from any to any
block out log on ne0 from any to any
block in log on enc0 from any to any

# Passing in encrypted traffic from security gateways
pass in proto esp from gatewB/32 to gatewA/32
pass out proto esp from gatewA/32 to gatewB/32

# Passing in traffic from the designated subnets.
pass in on enc0 from netB/netBmask to netA/netAmask

# Passing in Photuris traffic from the security gateways
pass in on ne0 proto udp from gatewB/32 port = 468 to gatewA/32 port = 468
pass out on ne0 proto udp from gatewA/32 port = 468 to gatewB/32 port = 468
.Ed
.Pp
If there are no other
.Xr ipf 5
rules, the "quick" clause can be added to the last three rules.
.Sh EXAMPLES
To create a manual keyed VPN between two class C networks using
3DES encryption and the following IP addresses:
.Pp
.Bd -literal
 A_INTERNAL_IP = 10.0.50.1
 A_EXTERNAL_IP = 192.168.1.254
 B_EXTERNAL_IP = 192.168.2.1
 B_INTERNAL_IP = 10.0.99.1
.Ed
.Pp
.Bl -enum
.It
Choose the shared secrets using a suitably random method:
.Pp
.Bd -literal
# dd if=/dev/urandom bs=1024 count=1 | sha1
cd28c327c7fd0943596a96cc7bf9108cd896f33c

# dd if=/dev/urandom bs=1024 count=1 | sha1
44aedc8aa8acf0b8c74acd626cd1b1057fb12c76

# dd if=/dev/urandom bs=1024 count=1 | sha1
c9fff55b501206a6607fb45c392c5e1568db2aaf
.Ed
.Pp
.It
Create the Security Associations (on both endpoints):
.Pp
.Bd -literal
# echo 596a96cc7bf9108cd896f33c44aedc8aa8acf0b8c74acd62 > enc_key
# echo c9fff55b501206a6607fb45c392c5e1568db2aaf > auth_key 
# /sbin/ipsecadm new esp -src 192.168.2.1 -dst 192.168.1.254 \e\ 
   -forcetunnel -spi 1000 -enc 3des -auth sha1 \e\ 
   -keyfile enc_key -authkeyfile auth_key

# /sbin/ipsecadm new esp -src 192.168.1.254 -dst 192.168.2.1  \e\ 
   -forcetunnel -spi 1001 -enc 3des -auth sha1 \e\ 
   -keyfile enc_key -authkeyfile auth_key
.Ed
.Pp
.It
Create the IPsec flows on machine A (the first four are the
outbound flows, the latter four are the ingress filters for the
incoming security association):
.Pp
.Bd -literal
# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          192.168.2.1 255.255.255.255

# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0

# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          10.0.99.0 255.255.255.0

# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255

# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
    -addr 192.168.2.1 255.255.255.255 \e\ 
          192.168.1.254 255.255.255.255 -ingress

# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0 -ingress

# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
     -addr 192.168.2.1 255.255.255.255 \e\ 
           10.0.50.0 255.255.255.0 -ingress

# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
     -addr 10.0.99.0 255.255.255.0 \e\ 
	   192.168.1.254 255.255.255.255 -ingress
.Ed
.It
Create the ipsec flows on machine B:
.Bd -literal
# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
    -addr 192.168.2.1 255.255.255.255 \e\ 
          192.168.1.254 255.255.255.255

# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
    -addr 10.0.99.0 255.255.255.0 10.0.50.0 255.255.255.0

# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
     -addr 192.168.2.1 255.255.255.255 \e\ 
           10.0.50.0 255.255.255.0

# /sbin/ipsecadm flow -dst 192.168.1.254 -spi 1000 -proto esp \e\ 
     -addr 10.0.99.0 255.255.255.0 192.168.1.254 255.255.255.255

# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          192.168.2.1 255.255.255.255 -ingress

# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 10.0.99.0 255.255.255.0 -ingress

# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 192.168.1.254 255.255.255.255 \e\ 
          10.0.99.0 255.255.255.0 -ingress

# /sbin/ipsecadm flow -dst 192.168.2.1 -spi 1001 -proto esp \e\ 
    -addr 10.0.50.0 255.255.255.0 192.168.2.1 255.255.255.255 -ingress
.Ed
.It
Configure the firewall rules on machine A:
.Bd -literal
# ne0 is the only interface going to the outside.
block in log on ne0 from any to any
block out log on ne0 from any to any
block in log on enc0 from any to any

# Passing in encrypted traffic from security gateways
pass in proto esp from 192.168.2.1/32 to 192.168.1.254/32
pass out proto esp from 192.168.1.254/32 to 192.168.2.1/32

# Passing in traffic from the designated subnets.
pass in quick on enc0 from 10.0.99.0/24 to 10.0.50.0/24
.Ed
.It
Configure the firewall rules on machine B:
.Bd -literal
# ne0 is the only interface going to the outside.
block in log on ne0 from any to any
block out log on ne0 from any to any
block in log on enc0 from any to any

# Passing in encrypted traffic from security gateways
pass in proto esp from 192.168.1.254/32 to 192.168.2.1/32
pass out proto esp from 192.168.2.1/32 to 192.168.1.254/32

# Passing in traffic from the designated subnets.
pass in quick on enc0 from 10.0.50.0/24 to 10.0.99.0/24
.Ed
.El
.Sh FILES
.Bl -tag -width /etc/photuris/photuris.conf -compact
.It Pa /usr/share/ipsec/rc.vpn
Sample VPN configuration file
.It Pa /etc/photuris/photuris.conf
Photuris configuration file
.It Pa /etc/ipf.rules
Firewall configuration file
.El
.Sh BUGS
.Xr photurisd 8
can not be used in VPN mode unless both of the security gateway IP addresses
lie within the network ranges being tunnelled to.
In situations where the gateway IP is outside the desired netrange, such
as with private (RFC 1918) networks, manual keying must be used.
.Sh SEE ALSO
.Xr enc 4 ,
.Xr ipsec 4 ,
.Xr options 4 ,
.Xr ipf 5 ,
.Xr ipf 8 ,
.Xr ipsecadm 8 ,
.Xr isakmpd 8 ,
.Xr photurisd 8
