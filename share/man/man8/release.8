.\"	$OpenBSD: release.8,v 1.75 2016/09/02 12:17:33 tb Exp $
.\"
.\"	Copyright (c) 2000 Marco S. Hyman
.\"
.\"	Permission to copy all or part of this material for any purpose is
.\"	granted provided that the above copyright notice and this paragraph
.\"	are duplicated in all copies.  THIS SOFTWARE IS PROVIDED ``AS IS''
.\"	AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT
.\"	LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
.\"	FOR A PARTICULAR PURPOSE.
.\"
.Dd $Mdocdate: September 2 2016 $
.Dt RELEASE 8
.Os
.Sh NAME
.Nm release
.Nd building an OpenBSD release
.Sh DESCRIPTION
There are several steps necessary to build a system release.
They are:
.Pp
.Bl -enum -compact -offset indent
.It
Update sources.
.It
Build and install a new kernel.
.It
Build a new system.
.It
Make and validate the system release.
.It
Build and install xenocara.
.It
Make and validate the xenocara release.
.It
Make the third party packages.
.It
Create boot and installation disk images.
.El
.Pp
The following sections describe each of the required steps
for the
.Em release
and
.Em stable
branches.
To build a
.Em current
release, additional steps may be required.
See
.Lk https://www.openbsd.org/faq/current.html
for any needed workarounds.
.Pp
Commands to be run as a user are preceded by a dollar sign
.Sq $ .
Commands that must be run as the superuser are preceded by a hash mark
.Sq # .
.Ss 1. Update sources
A
.Nm
should always start from a known set of
.Em coherent
sources.
The easiest way to ensure that the sources are complete and coherent
is to check them out using the appropriate
.Xr cvs 1
tag.
There are two families of tags:
.Bl -tag -width OPENBSD_x_y_BASE
.It Va OPENBSD_x_y_BASE
This tag marks the source for the
.Ox x.y
release.
.It Va OPENBSD_x_y
This tag is a moving target.
It marks the sources that belong to the stable branch and
contains the patches described in
.Lk https://www.openbsd.org/stable.html .
.El
.Pp
See
.Lk https://www.openbsd.org/anoncvs.html
for instructions on fetching the sources for the first time.
.Pp
To update existing sources to the versions identified by one of the above
tags, use the commands:
.Bd -literal -offset indent
$ cd /usr/src && cvs up -r TAG -Pd
$ cd XSRCDIR && cvs up -r TAG -Pd
$ cd PORTSPATH && cvs up -r TAG -Pd
.Ed
.Pp
Here,
.Va XSRCDIR
and
.Va PORTSPATH
are the path to the X Window System and ports tree sources, typically
.Pa /usr/xenocara
and
.Pa /usr/ports .
.Pp
.Sy Warning :
.Xr cvs 1
tags are
.Sq sticky .
See
.Xr cvs 1
for more information.
.Ss 2. Build and install a new kernel
Always build and install a new kernel and reboot before
building the programs that will use the kernel.
This ensures that any new system calls, for example, will be present
when needed.
.Pp
Change to the kernel configuration directory
.Pp
.Dl $ cd /usr/src/sys/arch/${ARCH}/conf
.Pp
where
.Va ${ARCH}
is the architecture of the machine, e.g.\&
.Li i386 .
Choose a kernel
.Xr config 8
file
.Va ${NAME}
or create a new one.
Build the kernel compilation directory and compile the kernel:
.Bd -literal -offset indent
$ config ${NAME}
$ cd ../compile/${NAME}
$ make clean && make
.Ed
.Pp
Install the new kernel with
.Bd -literal -offset indent
# make install
.Ed
.Pp
The current kernel is copied to
.Pa /obsd
and the new kernel to
.Pa /bsd .
Reboot.
.Ss 3. Build a new system
The build process will place the object files in a tree under
.Pa /usr/obj ,
which is assumed to be empty.
Create the tree of obj directories with
.Pp
.Dl $ cd /usr/src && make obj
.Pp
and begin the build:
.Pp
.Dl # make build
.Pp
After the build is completed, update
.Pa /etc ,
.Pa /var ,
and
.Pa /dev ,
using
.Xr sysmerge 8
and
.Xr MAKEDEV 8 .
.Pp
At this point, the system is up-to-date and running the code that will be
made into a release.
.Ss 4. Make and validate the system release
The system release consists of at least one generic kernel,
some installation media, the release tarballs,
installation instructions, and checksum files.
.Pp
The release process requires two work areas.
They are:
.Bl -tag -width "RELEASEDIR "
.It Va DESTDIR
This is the name of a directory which will be the root of a complete
.Ox
installation.
.It Va RELEASEDIR
This is the name of a directory where the release output files are stored.
.It " "
.Sy Warning :
.Va DESTDIR
and
.Va RELEASEDIR
must not refer to any directory with
.Pa /mnt
in its path, as
.Pa /mnt
is used in the release generation process.
Additionally the first
.Xr vnd 4
device, vnd0,
is also used and must not be configured.
.El
.Pp
Ensure
.Va ${DESTDIR}
exists as an empty directory and
.Va ${RELEASEDIR}
exists.
.Pp
Make the release and check that the contents of
.Va ${DESTDIR}
match the contents of the release tarballs:
.Bd -literal -offset indent
# export DESTDIR=your-destdir; export RELEASEDIR=your-releasedir
# cd /usr/src/etc && make release
# cd /usr/src/distrib/sets && sh checkflist
# unset RELEASEDIR DESTDIR
.Ed
.Ss 5. Build and install xenocara
.Va Xenocara
is based on the X.Org modular build system.
Xenocara sources are supposed to be in
.Va XSRCDIR
which defaults to
.Pa /usr/xenocara .
This variable should be set in
.Xr mk.conf 5
if a non-default value is used.
The
.Pa /usr/src
tree is also needed while building xenocara.
The following steps will build and install everything for the first time.
.Bd -literal -offset indent
# cd XSRCDIR
# make bootstrap
# make obj
# make build
.Ed
.Pp
The X Window System is created and installed in
.Pa /usr/X11R6 .
.Ss 6. Make and validate the xenocara release
.Va xenocara
uses
.Va DESTDIR
and
.Va RELEASEDIR
as described above.
While they may be set to the values used to build the rest of the
system, be aware that the existing contents of
.Va DESTDIR
will be removed as part of the xenocara build (this is necessary for
release checklist processing).
.Pp
The steps to build the release are:
.Bd -literal -offset indent
# export DESTDIR=your-destdir; export RELEASEDIR=your-releasedir
# make release
# unset RELEASEDIR DESTDIR
.Ed
.Pp
At this point,
.Ox
system and X Window System tarballs are in
.Va RELEASEDIR .
.Ss 7. Make the third party packages
The ports subsystem of contributed applications is capable of producing
packages for installation, either individually or in bulk.
This is described in
.Xr ports 7 .
.Ss 8. Create boot and installation disk images
At this point,
.Va RELEASEDIR
contains the
.Ox
tarballs necessary to upgrade.
.Pp
The following steps will create the boot and installation images
.No install${ Ns Ar VERSION Ns }.fs
and
.No install${ Ns Ar VERSION Ns }.iso
suitable for installs without network connectivity.
These images contain the tarballs and ports built in the previous
steps.
.Bd -literal -offset indent
# export RELDIR=your-releasedir
# export RELXDIR=your-xenocara-releasedir
# cd /usr/src/distrib/${ARCH}/iso && make
# make install
# unset RELDIR RELXDIR
.Ed
.Pp
The two installer images are now stored in the local release
directory.
.Sh SEE ALSO
.Xr cvs 1 ,
.Xr pkg_add 1 ,
.Xr mk.conf 5 ,
.Xr ports 7 ,
.Xr sysmerge 8
.Sh HISTORY
This document first appeared in
.Ox 2.8 .
