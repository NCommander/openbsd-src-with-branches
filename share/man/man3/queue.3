.\"	$OpenBSD$
.\"	$NetBSD: queue.3,v 1.4 1995/07/03 00:25:36 mycroft Exp $
.\"
.\" Copyright (c) 1993 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)queue.3	8.1 (Berkeley) 12/13/93
.\"
.Dd December 13, 1993
.Dt QUEUE 3
.Os
.Sh NAME
.Nm LIST_ENTRY ,
.Nm LIST_HEAD ,
.Nm LIST_HEAD_INITIALIZER ,
.Nm LIST_FIRST ,
.Nm LIST_NEXT ,
.Nm LIST_END ,
.Nm LIST_INIT ,
.Nm LIST_INSERT_AFTER ,
.Nm LIST_INSERT_BEFORE ,
.Nm LIST_INSERT_HEAD ,
.Nm LIST_REMOVE ,
.Nm SIMPLEQ_ENTRY ,
.Nm SIMPLEQ_HEAD ,
.Nm SIMPLEQ_HEAD_INITIALIZER ,
.Nm SIMPLEQ_FIRST ,
.Nm SIMPLEQ_NEXT ,
.Nm SIMPLEQ_END ,
.Nm SIMPLEQ_INIT ,
.Nm SIMPLEQ_INSERT_HEAD ,
.Nm SIMPLEQ_INSERT_TAIL ,
.Nm SIMPLEQ_INSERT_AFTER ,
.Nm SIMPLEQ_REMOVE_HEAD ,
.Nm TAILQ_ENTRY ,
.Nm TAILQ_HEAD ,
.Nm TAILQ_HEAD_INITIALIZER ,
.Nm TAILQ_FIRST ,
.Nm TAILQ_NEXT ,
.Nm TAILQ_END ,
.Nm TAILQ_LAST ,
.Nm TAILQ_PREV ,
.Nm TAILQ_INIT ,
.Nm TAILQ_INSERT_AFTER ,
.Nm TAILQ_INSERT_BEFORE ,
.Nm TAILQ_INSERT_HEAD ,
.Nm TAILQ_INSERT_TAIL ,
.Nm TAILQ_REMOVE ,
.Nm CIRCLEQ_ENTRY ,
.Nm CIRCLEQ_HEAD ,
.Nm CIRCLEQ_HEAD_INITIALIZER ,
.Nm CIRCLEQ_FIRST ,
.Nm CIRCLEQ_LAST ,
.Nm CIRCLEQ_END ,
.Nm CIRCLEQ_NEXT ,
.Nm CIRCLEQ_PREV ,
.Nm CIRCLEQ_INIT ,
.Nm CIRCLEQ_INSERT_AFTER ,
.Nm CIRCLEQ_INSERT_BEFORE ,
.Nm CIRCLEQ_INSERT_HEAD ,
.Nm CIRCLEQ_INSERT_TAIL ,
.Nm CIRCLEQ_REMOVE
.Nd "implementations of lists, simple queues, tail queues, and circular queues"
.Sh SYNOPSIS
.Fd #include <sys/queue.h>
.sp
.Fn LIST_ENTRY "TYPE"
.Fn LIST_HEAD "HEADNAME" "TYPE"
.Fn LIST_HEAD_INITIALIZER "LIST_HEAD head"
.Ft "struct TYPE *"
.Fn LIST_FIRST "LIST_HEAD *head"
.Ft "struct TYPE *"
.Fn LIST_NEXT "struct TYPE *listelm" "LIST_ENTRY NAME"
.Ft "struct TYPE *"
.Fn LIST_END "LIST_HEAD *head"
.Ft void
.Fn LIST_INIT "LIST_HEAD *head"
.Ft void
.Fn LIST_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_INSERT_HEAD "LIST_HEAD *head" "struct TYPE *elm" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_REMOVE "struct TYPE *elm" "LIST_ENTRY NAME"
.sp
.Fn SIMPLEQ_ENTRY "TYPE"
.Fn SIMPLEQ_HEAD "HEADNAME" "TYPE"
.Fn SIMPLEQ_HEAD_INITIALIZER "SIMPLEQ_HEAD head"
.Ft "struct TYPE *"
.Fn SIMPLEQ_FIRST "SIMPLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn SIMPLEQ_NEXT "struct TYPE *listelm" "SIMPLEQ_ENTRY NAME"
.Ft "struct TYPE *"
.Fn SIMPLEQ_END "SIMPLEQ_HEAD *head"
.Ft void
.Fn SIMPLEQ_INIT "SIMPLEQ_HEAD *head"
.Ft void
.Fn SIMPLEQ_INSERT_HEAD "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
.Ft void
.Fn SIMPLEQ_INSERT_TAIL "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
.Ft void
.Fn SIMPLEQ_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
.Ft void
.Fn SIMPLEQ_REMOVE_HEAD "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
.sp
.Fn TAILQ_ENTRY "TYPE"
.Fn TAILQ_HEAD "HEADNAME" "TYPE"
.Fn TAILQ_HEAD_INITIALIZER "TAILQ_HEAD head"
.Ft "struct TYPE *"
.Fn TAILQ_FIRST "TAILQ_HEAD *head"
.Ft "struct TYPE *"
.Fn TAILQ_NEXT "struct TYPE *listelm" "TAILQ_ENTRY NAME"
.Ft "struct TYPE *"
.Fn TAILQ_END "TAILQ_HEAD *head"
.Ft "struct TYPE *"
.Fn TAILQ_LAST "TAILQ_HEAD *head" "HEADNAME NAME"
.Fn TAILQ_PREV "TAILQ_HEAD *head" "HEADNAME NAME"
.Ft void
.Fn TAILQ_INIT "TAILQ_HEAD *head"
.Ft void
.Fn TAILQ_INSERT_AFTER "TAILQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_INSERT_HEAD "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_INSERT_TAIL "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_REMOVE "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.sp
.Fn CIRCLEQ_ENTRY "TYPE"
.Fn CIRCLEQ_HEAD "HEADNAME" "TYPE"
.Fn CIRCLEQ_HEAD_INITIALIZER "CIRCLEQ_HEAD head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_FIRST "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_LAST "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_END "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_NEXT "struct TYPE *listelm" "CIRCLEQ_ENTRY NAME"
.Ft "struct TYPE *"
.Fn CIRCLEQ_PREV "struct TYPE *listelm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INIT "CIRCLEQ_HEAD *head"
.Ft void
.Fn CIRCLEQ_INSERT_AFTER "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INSERT_BEFORE "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INSERT_HEAD "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INSERT_TAIL "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_REMOVE "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Sh DESCRIPTION
These macros define and operate on four types of data structures:
lists, simple queues, tail queues, and circular queues.
All structures except simple queues support the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new entry at the head of the list.
.It
Insertion of a new entry before or after any list element.
.It
Removal of any entry in the list.
.It
Forward traversal through the list.
.El
.Pp
Lists support only the above functionality.
.Pp
Simple queues are simplified list structures in exchange for 
restricted functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Simple queue entries require only one pointer.
.It
Code is roughly twice as small and fast as lists.
.It
Entries can be added to the end of the queue.
.It
No insertion of a new entry before a list element.
.It
Only the first element can be removed.
.El
.Pp
.Bl -enum -compact -offset indent
.Pp
Tail queues add the following functionality:
.Bl -enum -offset indent
.It
Entries can be added to the end of the list.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions and removals, except insertion before another element, must
specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
Code size is about 15% greater and operations run about 20% slower
than lists.
.El
.Pp
Circular queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added to the end of a list.
.It
They may be traversed backwards, from tail to head.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions and removals must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
The termination condition for traversal is more complex.
.It
Code size is about 40% greater and operations run about 45% slower
than lists.
.El
.Pp
In the macro definitions,
.Fa TYPE
is the name tag of a user defined structure,
that must contain a field of type
.Li LIST_ENTRY ,
.Li SIMPLEQ_ENTRY ,
.Li TAILQ_ENTRY ,
or
.Li CIRCLEQ_ENTRY ,
named
.Fa NAME .
The argument
.Fa HEADNAME
is the name tag of a user defined structure that must be declared
using the macros
.Fn LIST_HEAD ,
.Fn SIMPLEQ_HEAD ,
.Fn TAILQ_HEAD ,
or
.Fn CIRCLEQ_HEAD .
See the examples below for further explanation of how these
macros are used.
.Sh LISTS
A list is headed by a structure defined by the
.Fn LIST_HEAD
macro.
This structure contains a single pointer to the first element
on the list.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the list.
New elements can be added to the list after an existing element,
before an existing element, or at the head of the list.
A
.Fa LIST_HEAD
structure is declared as follows:
.Bd -literal -offset indent
LIST_HEAD(HEADNAME, TYPE) head;
.Ed
.sp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.sp
(The names
.Li head
and
.Li headp
are user selectable.)
.sp
The 
.Fa HEADNAME 
facility is often not used, leading to the following bizarre code:
.Bd -literal -offset indent
LIST_HEAD(, TYPE) head, *headp;
.Ed
.Pp
The
.Fn LIST_ENTRY
macro declares a structure that connects the elements in
the list.
.Pp
The
.Fn LIST_INIT
macro initializes the list referenced by
.Fa head .
.Pp
The list can also be initialized statically by using the 
.Fn LIST_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
LIST_HEAD(HEADNAME, TYPE) head = LIST_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn LIST_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the list.
.Pp
The
.Fn LIST_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn LIST_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn LIST_REMOVE
macro removes the element
.Fa elm
from the list.
.Pp
The 
.Fn LIST_FIRST ,
and
.Fn LIST_NEXT
macros can be used to traverse the list:
.Bd -literal -offset indent
for (np = LIST_FIRST(&head); np != NULL; np = LIST_NEXT(np, NAME))
.Ed
.Sh LIST EXAMPLE
.Bd -literal
LIST_HEAD(listhead, entry) head;
struct listhead *headp;		/* List head. */
struct entry {
	...
	LIST_ENTRY(entry) entries;	/* List. */
	...
} *n1, *n2, *np;

LIST_INIT(&head);			/* Initialize the list. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
LIST_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
LIST_INSERT_AFTER(n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
LIST_INSERT_BEFORE(n1, n2, entries);
					/* Forward traversal. */
for (np = head.lh_first; np != NULL; np = np->entries.le_next)
	np-> ...

while (head.lh_first != NULL)		/* Delete. */
	LIST_REMOVE(head.lh_first, entries);
.Ed
.Sh SIMPLE QUEUES
A simple queue is headed by a structure defined by the
.Fn LIST_HEAD
macro.
This structure contains a pair of pointers, 
one to the first element in the simple queue and the other to 
the last element in the simple queue.
The elements are simply linked.
New elements can be added to the queue after an existing element,
at the head of the queue or at the tail of the queue.
A
.Fa SIMPLEQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
SIMPLEQ_HEAD(HEADNAME, TYPE) head;
.Ed
.sp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the queue.
A pointer to the head of the queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.sp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn SIMPLEQ_ENTRY
macro declares a structure that connects the elements in
the queue.
.Pp
The
.Fn SIMPLEQ_INIT
macro initializes the queue referenced by
.Fa head .
.Pp
The queue can also be initialized statically by using the 
.Fn SIMPLEQ_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
SIMPLEQ_HEAD(HEADNAME, TYPE) head = SIMPLEQ_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn SIMPLEQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the queue.
.Pp
The
.Fn SIMPLEQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the queue.
.Pp
The
.Fn SIMPLEQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn SIMPLEQ_REMOVE_HEAD
macro removes the first element
from the queue.
.Pp
The 
.Fn SIMPLEQ_FIRST ,
and
.Fn SIMPLEQ_NEXT
macros can be used to traverse the queue.
.Sh SIMPLE QUEUE EXAMPLE
.Bd -literal
SIMPLEQ_HEAD(listhead, entry) head = SIMPLEQ_HEAD_INITIALIZER(head);
struct entry {
	...
	SIMPLEQ_ENTRY(entry) entries;	/* List. */
	...
} *n1, *n2, *np;

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
SIMPLEQ_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
SIMPLEQ_INSERT_AFTER(n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert at the tail. */
SIMPLEQ_INSERT_TAIL(&head, n1, entries);
					/* Forward traversal. */
for (np = SIMPLEQ_FIRST(&head); np != NULL; np = SIMPLEQ_NEXT(np, entries))
	np-> ...
					/* Delete. */
while (SIMPLEQ_FIRST(&head) != NULL)		
	SIMPLEQ_REMOVE_HEAD(&head, n1, entries);
.Ed
.Sh TAIL QUEUES
A tail queue is headed by a structure defined by the
.Fn TAILQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the tail queue and the other to
the last element in the tail queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the tail queue.
New elements can be added to the queue after an existing element,
before an existing element, at the head of the queue, or at the end
the queue.
A
.Fa TAILQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
TAILQ_HEAD(HEADNAME, TYPE) head;
.Ed
.sp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the tail queue.
A pointer to the head of the tail queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.sp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn TAILQ_ENTRY
macro declares a structure that connects the elements in
the tail queue.
.Pp
The
.Fn TAILQ_INIT
macro initializes the tail queue referenced by
.Fa head .
.Pp
The tail queue can also be initialized statically by using the
.Fn TAILQ_HEAD_INITIALIZER
macro.
.Pp
The
.Fn TAILQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the tail queue.
.Pp
The
.Fn TAILQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the tail queue.
.Pp
The
.Fn TAILQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn TAILQ_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn TAILQ_REMOVE
macro removes the element
.Fa elm
from the tail queue.
.Pp
The
.Fn TAIL_FIRST ,
.Fn TAILQ_NEXT ,
.Fn TAILQ_LAST 
and
.Fn TAILQ_PREV 
macros can be used to traverse a tail queue.
.Sh TAIL QUEUE EXAMPLE
.Bd -literal
TAILQ_HEAD(tailhead, entry) head;
struct tailhead *headp;		/* Tail queue head. */
struct entry {
	...
	TAILQ_ENTRY(entry) entries;	/* Tail queue. */
	...
} *n1, *n2, *np;

TAILQ_INIT(&head);			/* Initialize the queue. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
TAILQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));	/* Insert at the tail. */
TAILQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
TAILQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
TAILQ_INSERT_BEFORE(n1, n2, entries);
					/* Forward traversal. */
for (np = head.tqh_first; np != NULL; np = np->entries.tqe_next)
	np-> ...
					/* Delete. */
while (head.tqh_first != NULL)
	TAILQ_REMOVE(&head, head.tqh_first, entries);
.Ed
.Sh CIRCULAR QUEUES
A circular queue is headed by a structure defined by the
.Fn CIRCLEQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the circular queue and the other to the
last element in the circular queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the queue.
New elements can be added to the queue after an existing element,
before an existing element, at the head of the queue, or at the end
of the queue.
A
.Fa CIRCLEQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
CIRCLEQ_HEAD(HEADNAME, TYPE) head;
.Ed
.sp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the circular queue.
A pointer to the head of the circular queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.sp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn CIRCLEQ_ENTRY
macro declares a structure that connects the elements in
the circular queue.
.Pp
The
.Fn CIRCLEQ_INIT
macro initializes the circular queue referenced by
.Fa head .
.Pp
The circular queue can also be initialized statically by using the
.Fn CIRCLEQ_HEAD_INITIALIZER
macro.
.Pp
The
.Fn CIRCLEQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the circular queue.
.Pp
The
.Fn CIRCLEQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the circular queue.
.Pp
The
.Fn CIRCLEQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn CIRCLEQ_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn CIRCLEQ_REMOVE
macro removes the element
.Fa elm
from the circular queue.
.Pp
The
.Fn CIRCLEQ_FIRST ,
.Fn CIRCLEQ_LAST ,
.Fn CIRCLEQ_END ,
.Fn CIRCLEQ_NEXT 
and
.Fn CIRCLEQ_PREV
macros can be used to traverse a circular queue.
.Sh CIRCULAR QUEUE EXAMPLE
.Bd -literal
CIRCLEQ_HEAD(circleq, entry) head;
struct circleq *headp;			/* Circular queue head. */
struct entry {
	...
	CIRCLEQ_ENTRY entries;		/* Circular queue. */
	...
} *n1, *n2, *np;

CIRCLEQ_INIT(&head);			/* Initialize the circular queue. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
CIRCLEQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));	/* Insert at the tail. */
CIRCLEQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
CIRCLEQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
CIRCLEQ_INSERT_BEFORE(&head, n1, n2, entries);
					/* Forward traversal. */
for (np = CIRCLEQ_FIRST(&head); np != CIRCLEQ_END(&head); 
    np = CIRCLEQ_NEXT(np, entries))
	np-> ...
					/* Reverse traversal. */
for (np = CIRCLEQ_LAST(&head); np != CIRCLEQ_END(&head); 
    np = CIRCLEQ_PREV(np, entries))
	np-> ...
					/* Delete. */
while (CIRCLEQ_FIRST(&head) != CIRCLEQ_END(&head))
	CIRCLEQ_REMOVE(&head, CIRCLEQ_FIRST(&head), entries);
.Ed
.Sh NOTES
The
.Fn LIST_END ,
.Fn SIMPLEQ_END 
and
.Fn TAILQ_END
macros are provided for symetry with
.Fn CIRCLEQ_END .
They expand to 
.Dv NULL
and don't serve any useful purpose.
.Sh HISTORY
The
.Nm queue
functions first appeared in
.Bx 4.4 .
