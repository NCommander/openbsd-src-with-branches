.\"	$OpenBSD: port-modules.5,v 1.82 2010/12/03 11:53:24 ajacoutot Exp $
.\"
.\" Copyright (c) 2008 Marc Espie
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 3 2010 $
.Dt PORT-MODULES 5
.Os
.Sh NAME
.Nm port-modules
.Nd format and conventions used in port modules
.Sh DESCRIPTION
The
.Ox
Ports framework is based on a gigantic makefile named
.Xr bsd.port.mk 5 .
.Pp
In order to curb unwieldy growth, parts of the framework
that are not always needed have been set apart in optional
files called
.Nm port modules ,
which are retrieved as needed through the
.Ev MODULES
variable of
.Xr bsd.port.mk 5 .
.Pp
Some of these modules correspond to basic mechanisms which are not
always needed, such as GNU autoconf, or perl5.
.Pp
Other modules correspond to shortcuts for using some other ports as
dependencies without needing to hardcode too much, such as libiconv or
the qt ports.
.Sh THE MODULES LOOK-UP MECHANISM
The variable
.Ev MODULES
should contain a list of module names.
Some core modules are a single word, all other modules should be
${PKGPATH}.
If the module is
.Pa some/dir/portname ,
the ports framework will look for a file named
.Pa ${PORTSDIR}/some/dir/portname/portname.port.mk
and include it.
.Pp
Most modules should conform to this syntax.
The historic practice of having a redirection file directly under
.Pa ${PORTSDIR}/infrastructure/mk
is deprecated for new modules.
.Pp
Modules may refer to each other.
The modules mechanism has specific recursion handling such that
adding
.Li MODULES += foo/bar
to a module will work as expected.
.Sh NAMING CONVENTIONS
Since there is no actual scope in makefiles, everything defined within
a module will be global to the ports framework, and thus may interfere
with other ports.
.Pp
As far as possible, all variables and targets belonging to a module named
.Pa some/dir/foo
should be named
.Ev MODFOO_*
and
.Ar modfoo_* .
.Pp
Following the same conventions as
.Xr bsd.port.mk 5 ,
internal variables and targets not intended for user consumption should be
named
.Ev _MODFOO_*
and
.Ar _modfoo_* .
.Pp
For instance, if a module wants some value to be available for the rest
of the world, it should define
.Ev MODFOO_VARNAME ,
with a name matching the basic infrastructure as far as possible.
That is, a port that defines specific dependencies will usually
define
.Ev MODFOO_WANTLIB ,
.Ev MODFOO_LIB_DEPENDS ,
and
.Ev MODFOO_RUN_DEPENDS ,
as appropriate.
.Pp
As an exception to the naming mechanism, some ports have several distinct
versions in the ports tree, say
.Pa x11/qt3
and
.Pa x11/qt4 .
Instead of using the namespace
.Ev MODQT3* ,
variables will usually drop the version suffix and be simply called
.Ev MODQT_*
so that a port using the module can be switched from version to version
without needing to change everything.
.Pp
It is highly desirable to define names in both namespaces for such ports,
for example to define both
.Ev MODQT3_LIB_DEPENDS
and
.Ev MODQT_LIB_DEPENDS .
Normal client ports will use
.Ev MODQT_LIB_DEPENDS ,
but a port may exceptionally import both modules with
.Li MODULES += x11/qt3 x11/qt4
and differentiate between qt3 and qt4 needs with
.Ev MODQT3_LIB_DEPENDS
and
.Ev MODQT4_LIB_DEPENDS .
See
.Pa print/poppler
for an example.
.Sh OVERRIDING TARGET BEHAVIOR
The main framework contains several hooks that allow ports to override
normal behavior.
This evolved as an ad-hoc framework, where only hooks that turned out
to be needed were added.
If several modules define the same hook, hook behaviors will be
invoked in sequence.
.Bl -tag -width do-configure
.It Ar patch
There is a
.Ar post-patch
hook that can be activated by defining
.Ev MODFOO_post-patch .
It will be run right after
.Ar post-patch
and before
.Ev REORDER_DEPENDENCIES
touches things.
.It Ar configure
There is a
.Ar pre-configure
hook that can be activated by defining
.Ev MODFOO_pre-configure .
It will be run right after
.Ar pre-configure .
The normal
.Ar do-configure
behavior is to invoke all
.Ev MODFOO_configure
contents that are defined in
.Ev CONFIGURE_STYLE .
By default,
.Ar configure
will do nothing.
Some
.Ev CONFIGURE_STYLE
values, namely perl, gnu, imake, automake, autoconf, and autoupdate
will automatically import the correct module.
User-defined modules must both add to
.Ev CONFIGURE_STYLE
and import the correct module to override behavior.
Contrary to other hooks, module behavior is not invoked in
addition to
.Ar do-configure ,
but as the normal configure process.
If
.Ar do-configure
is overridden, normal hook processing will not happen.
.It Ar fake
There is a
.Ar pre-fake
hook that can be activated by defining
.Ev MODFOO_pre-fake .
This will be invoked right after
.Xr mtree 8 ,
and before the normal
.Ar pre-fake
behavior.
.It Ar install
There is a
.Ar pre-install
hook that can be activated by defining
.Ev MODFOO_pre-install .
It will be run right before installing the package with
.Xr pkg_add 1 .
.El
.Sh OVERRIDING VARIABLE BEHAVIOR
Some variables can be overridden by modules.
Be very cautious, as this can make the module difficult to use,
or interact badly with other modules.
As a rule, always provide the override as:
.Pp
.Dl VARIABLE ?= value
.Pp
and provide a module-specific variable with the same value:
.Pp
.Dl MODFOO_VARIABLE = value .
.Pp
The following variables can be overridden in a relatively safe fashion:
.Ev ALL_TARGET ,
.Ev CONFIGURE_SCRIPT ,
.Ev DESTDIRNAME ,
.Ev DIST_SUBDIR ,
.Ev DISTNAME ,
.Ev DISTFILES ,
.Ev EXTRACT_SUFX ,
.Ev FAKE_FLAGS ,
.Ev FETCH_MANUALLY ,
.Ev HOMEPAGE ,
.Ev IGNORE ,
.Ev IS_INTERACTIVE ,
.Ev LIBTOOL_FLAGS ,
.Ev MAKE_FILE ,
.Ev MASTER_SITES ,
.Ev MULTI_PACKAGES ,
.Ev NO_BUILD ,
.Ev NO_REGRESS ,
.Ev PATCH_LIST ,
.Ev PKG_ARCH ,
.Ev PKGNAME* ,
.Ev PREFIX ,
.Ev REGRESS_TARGET ,
.Ev REGRESS_IS_INTERACTIVE ,
.Ev REORDER_DEPENDENCIES ,
.Ev SEPARATE_BUILD ,
.Ev SHARED_ONLY ,
.Ev USE_GMAKE ,
.Ev USE_LIBTOOL ,
.Ev USE_MOTIF .
.Pp
The following variables can be added to in a relatively safe fashion:
.Ev BUILD_DEPENDS ,
.Ev CATEGORIES ,
.Ev CONFIGURE_ARGS ,
.Ev CONFIGURE_ENV ,
.Ev ERRORS ,
.Ev FAKE_FLAGS ,
.Ev FLAVOR ,
.Ev FLAVORS ,
.Ev INSTALL_TARGET ,
.Ev LIB_DEPENDS ,
.Ev MAKE_ENV ,
.Ev MAKE_FLAGS ,
.Ev PKG_ARGS ,
.Ev PSEUDO_FLAVORS ,
.Ev REGRESS_DEPENDS ,
.Ev REORDER_DEPENDENCIES ,
.Ev RUN_DEPENDS ,
.Ev SUBST_VARS ,
.Ev WANTLIB .
.Sh SPECIFIC MODULE INTERACTIONS
Some modules correspond to extra ports that will be used mostly as
.Ev BUILD_DEPENDS
or
.Ev RUN_DEPENDS .
Such modules can safely append values directly to the
.Ev BUILD_DEPENDS ,
.Ev RUN_DEPENDS ,
.Ev LIB_DEPENDS ,
and
.Ev WANTLIB
variables, as long as they also define module-specific variables for
all runtime dependencies.
.Pp
Simple client ports will use the module directly, and thus inherit extra
build and runtime dependencies.
.Pp
More sophisticated ports can use
.Ev MULTI_PACKAGES
to select specific behavior: build-time dependencies will always be
needed.
Runtime dependencies will be selected on a subpackage basis,
since runtime dependencies such as
.Ev LIB_DEPENDS-sub
do not inherit the default
.Ev LIB_DEPENDS
value.
The client port's author must only bear in mind that external modules
may add values to the default
.Ev WANTLIB ,
.Ev LIB_DEPENDS ,
and
.Ev RUN_DEPENDS ,
and thus that it is not safe to inherit from it blindly.
.Pp
Modules are imported during
.Pp
.Dl .include <bsd.port.mk>
.Pp
Thus they can be affected by user choices such as setting a variable
to Yes or No.
Modules may make decisions based on documented
.Ev MODFOO_BEHAVIOR
values.
.Pp
When modules are processed, only a few
.Xr bsd.port.mk 5
variables are already defined.
Modules may depend upon the following variables already having a sane
value:
.Ev APM_ARCHS ,
.Ev ARCH ,
.Ev DISTDIR ,
.Ev LOCALBASE ,
.Ev LP64_ARCHS ,
.Ev NO_DEPENDS ,
.Ev NO_SHARED_ARCHS ,
.Ev NO_SHARED_LIBS ,
.Ev PKGPATH ,
.Ev PORTSDIR ,
.Ev X11BASE .
Note that this is only relevant for tests.
It is perfectly okay to define variables or targets that depend on the
basic ports framework without having to care whether that variable is
already defined, since
.Xr make 1
performs lazy evaluation.
.Sh CORE MODULES DOCUMENTATION
The following modules are available.
.Bl -tag -width do-configure
.It apache-module
.It converters/libiconv
.It cpan
For perl ports coming from CPAN.
Wrapper around the normal perl module that fetches the file from
the correct location depending on DISTNAME, and sets a default
PKGNAME.
Also affects REGRESS_DEPENDS, CONFIGURE_STYLE, PKG_ARCH, and CATEGORIES.
.Pp
Some CPAN modules are only indexed by author, set CPAN_AUTHOR=ID
to locate the right directory.
.Pp
If no HOMEPAGE is defined, it will default to
http://search.cpan.org/dist/${DISTNAME:C/-[^-]*$//}/
.Pp
User settings: set CPAN_REPORT to Yes, CPAN_REPORT_DB to a valid directory,
and CPAN_REPORT_FROM to a valid email address to automate the reporting
of regress tests to CPAN.
.Pp
If MODCPAN_EXAMPLES is set, the following variables will be set.
MODCPAN_EXAMPLES_DIST will hold the default directory in the distfile with
example scripts.
MODCPAN_EXAMPLES_DIR will be set to the standard installation directory for
examples.
Sets the post-install target if none has been defined to install the examples,
otherwise MODCPAN_POST_INSTALL should be used as such:
.Bd -literal
post-install:
	...
	${MODCPAN_POST_INSTALL}
.Ed
.It devel/cmake
.It devel/gconf2
A link from
.Xr gconftool-2 1
to
.Xr true 1
will be put at the front of the path.
Sets CONFIGURE_ARGS, BUILD_DEPENDS and RUN_DEPENDS.
According to the values of MODGCONF2_LIBDEP, sets LIB_DEPENDS.
User settings: set MODGCONF2_SCHEMAS_DIR to the directory name under
${LOCALBASE}/share/schemas/ where schemas files will be installed.
.It devel/gettext
.It devel/pmk
Sets CONFIGURE_SCRIPT, CONFIGURE_ARGS and MODPMK_configure.
It appends
.Pa devel/pmk
to BUILD_DEPENDS.
.It devel/scons
Adds
.Pa devel/scons
to BUILD_DEPENDS.
Sets MODSCONS_BIN and MODSCONS_ENV.
Also defines an overridable MODSCONS_FLAGS.
It provides a do-build and do-install target that can be overridden in the
port Makefile.
.It devel/waf
Adds
.Pa devel/waf
to BUILD_DEPENDS,
.Pa lang/python
to MODULES, and provides do-configure, do-build, do-install and
post-install targets.
do-build, do-install and post-install can be overridden in the port
Makefile.
.It fortran
Sets MODFORTRAN_LIB_DEPENDS, MODFORTRAN_WANTLIB, MODFORTRAN_BUILD_DEPENDS.
Set MODFORTRAN_COMPILER to `g77' or `gfortran', depending on what the
port requires.
The default is `g77'.
The dependencies are chosen according to COMPILER_VERSION and
MODFORTRAN_COMPILER.
.It gcc3
If COMPILER_VERSION is not gcc3 (defined by
.Pa /usr/share/mk/bsd.own.mk ) ,
and architecture is in MODGCC3_ARCHES, then the gcc 3.3.6
compilers will be put at the front of the path.
By default, only C language support is included by this module.
If other languages are needed, they must be listed in MODGCC3_LANGS
(e.g. c++, g77).
.It gcc4
If COMPILER_VERSION is not gcc4 (defined by
.Pa /usr/share/mk/bsd.own.mk ) ,
and architecture is in MODGCC4_ARCHES, then the gcc 4.2 compilers
will be put at the front of the path.
By default, only C language support is included by this module.
If other languages are needed, they must be listed in MODGCC4_LANGS
(e.g. c++, fortran).
.It gnu
This module is documented in the main
.Xr bsd.port.mk 5
manpage.
.It imake
This module is documented in the main
.Xr bsd.port.mk 5
manpage.
.It java
Set MODJAVA_VER=x.y to use exactly the JDK x.y, MODJAVA_VER=x.y+ to
use any x.y or higher version.
Set MODJAVA_JRERUN=Yes if the port only needs the JRE at runtime.
The module sets JAVA_HOME, ONLY_FOR_ARCHS, MODJAVA_RUN_DEPENDS, and
appends to BUILD_DEPENDS and RUN_DEPENDS.
It heeds NO_BUILD.
.It lang/ghc
Sets ONLY_FOR_ARCHS, MODGHC_VER, BUILD_DEPENDS, and RUN_DEPENDS.
The build and further actions are based on MODGHC_BUILD.
It accepts the following values: nort (no runtime dependency on
.Pa lang/ghc
and hs- prefix will not be added), cabal (to get the typical Cabal
targets defined), haddock (to generate API documenation using
.Pa devel/haddock ,
register (to create and include register/unregister scripts), hackage
(if the distfiles are available on Hackage).
Also affects CATEGORIES, CONFIGURE_STYLE, and SUBST_VARS.
do-build, do-install and do-regress targets are provided if the port
itself didn't set them.
If register has been set, the PLIST needs to be modified in order to
add the relevant @exec/@unexec lines.
This module will run the Setup script and ensure the documentation
will be built (if haddock has been set), and that the package is
registered as a library useable by
.Pa lang/ghc
(if register has been set).
.It lang/lua
Sets MODLUA_VERSION, MODLUA_LIBDIR, MODLUA_DATADIR.
Appends to RUN_DEPENDS and CATEGORIES.
Also appends to BUILD_DEPENDS, unless NO_BUILD has been set to Yes.
Also affects PKG_ARCH when SHARED_ONLY is not set or set to No.
.It lang/mono
Sets MODMONO_ONLY_FOR_ARCHS, CONFIGURE_ENV, MAKE_FLAGS,
MODMONO_BUILD_DEPENDS and MODMONO_RUN_DEPENDS.
If MODMONO_DEPS is set to Yes,
.Pa lang/mono
is appended to BUILD_DEPENDS and RUN_DEPENDS.
If USE_NANT is defined, NANT and NANT_FLAGS are set,
.Pa devel/nant
is appended to BUILD_DEPENDS and the do-build and do-install targets are
provided to use nant for building
.Pq can be overridden in the port Makefile .
DLLMAP_FILES defines in which files the module will substitute hardcoded
shared library versions using a post-configure target.
.It lang/ocaml
Sets OCAML_VERSION, MODOCAML_NATIVE.
Appends to BUILD_DEPENDS and MAKE_ENV.
This also selects a %%native%% plist fragment depending on whether
the architecture supports native compilation or not.
.It lang/python
Sets MODPY_VERSION, MODPY_BIN, MODPY_INCDIR, MODPY_LIBDIR, MODPY_SITEPKG,
MODPY_SETUP, MODPY_WANTLIB, MODPY_LIB_DEPENDS, MODPY_RUN_DEPENDS,
MODPY_BUILD_DEPENDS, MODPY_BIN_ADJ and MODPY_ADJ_FILES.
Appends to RUN_DEPENDS unless MODPY_RUNDEP is set to No.
Appends to BUILD_DEPENDS unless MODPY_BUILDDEP is set to No or NO_BUILD
is set to Yes.
MODPY_VERSION is the default version used by all python modules.
Ports which use the setuptools module should set MODPY_SETUPTOOLS to Yes.
All ports that generate egg-info files should set MODPY_EGG_VERSION
to the version string used by the port's setup.py setup() function.
Extra arguments to the build and install commands can be passed via
MODPY_DISTUTILS_BUILDARGS and MODPY_DISTUTILS_INSTALLARGS.
MODPY_BIN_ADJ is a command that takes filename arguments and replaces
the python shebang line with MODPY_BIN.
MODPY_ADJ_FILES is a list of filenames that will automatically have
MODPY_BIN_ADJ called on them at the end of pre-configure.
Also affects CATEGORIES, MAKE_ENV, CONFIGURE_ENV, SHARED_ONLY, and SUBST_VARS.
May affect the regress target.
.It lang/ruby
Sets MODRUBY_REV, RUBY, RAKE, RSPEC, MODRUBY_RUN_DEPENDS, MODRUBY_LIB_DEPENDS,
MODRUBY_BUILD_DEPENDS, MODRUBY_ICONV_DEPENDS, MODRUBY_LIBDIR, MODRUBY_DOCDIR,
MODRUBY_EXAMPLEDIR, MODRUBY_ARCH, MODRUBY_REGRESS, MODRUBY_RUBY_ADJ,
MODRUBY_ADJ_FILES, GEM_BIN_SUFFIX, MODRUBY_LIBREV, MODRUBY_BINREV,
MODRUBY_PKGSPEC, MODRUBY_PKG_PREFIX, MODRUBY_RAKE_DEPENDS,
MODRUBY_RSPEC_DEPENDS, MODRUBY_WANTLIB, MODRUBY_FLAVOR.
RUBY, RAKE, and RSPEC are the path to the ruby, rake, and rspec binaries.
MODRUBY_RUBY_ADJ is a command that takes filename arguments and replaces
the /usr/bin/env ruby shebang lines with RUBY.
MODRUBY_ADJ_FILES is a list of filename patterns that will automatically
have MODRUBY_RUBY_ADJ called on them during pre-configure.
Appends to CATEGORIES and SUBST_VARS.
Appends to BUILD_DEPENDS unless MODRUBY_BUILDDEP is set to No or NO_BUILD
is set to Yes.
Appends to RUN_DEPENDS unless MODRUBY_RUNDEP is set to No.
May affect the regress target if MODRUBY_REGRESS is used.
Supports additional CONFIGURE_STYLEs, and setting specific CONFIGURE_STYLEs
modifies some additional parameters.
The "ruby gem" CONFIGURE_STYLE should be used for pure ruby gems without
C extensions.
This adds PKG_ARCH = * and adds ruby19, rbx, and jruby FLAVORs to the port,
so the same port can build packages for multiple versions of ruby.
The "ruby gem ext" CONFIGURE_STYLE should be used for ruby gems with C
extensions.
This adds SHARED_ONLY = Yes and adds MODRUBY_LIB_DEPENDS to LIB_DEPENDS and
c, m, and MODRUBY_WANTLIB to WANTLIB.
It also adds ruby19 and rbx FLAVORs to the port.
The "ruby extconf" CONFIGURE_STYLE is similar to the "ruby gem ext"
CONFIGURE_STYLE, except that it is used when the package is not distributed
as a ruby gem.
In order for ruby 1.9, rubinius, and jruby packages to be built from the same
port directory, any gem dependencies specified in the port should use this
format: category/ruby-foo,${MODRUBY_FLAVOR}.
Use of a ruby19, rbx, or jruby FLAVOR causes the FULLPKGNAME to use the FLAVOR
instead of ruby as the package prefix.
Specifying MODRUBY_FLAVOR is necessary so that if you are building a ruby 1.9
package for the current port, it depends on the ruby 1.9 package of the
dependencies.
For ruby gem ports that can work on both ruby 1.8 and ruby 1.9, any binary
file entries in the PLIST should be appended with ${GEM_BIN_SUFFIX}.
This is because the ruby 1.9 gem binaries are installed with a 19 suffix.
make update-plist tends to remove ${GEM_BIN_SUFFIX}, so be careful when
updating such ports.
.It lang/tcl
Sets MODTCL_VERSION, MODTCL_BIN, MODTCL_INCDIR, MODTCL_LIBDIR,
MODTCL_BUILD_DEPENDS, MODTCL_RUN_DEPENDS, MODTCL_LIB, MODTCL_LIB_DEPENDS,
and MODTCL_CONFIG.
MODTCL_VERSION is the default version used by all Tcl ports and
may be overridden.
Provides MODTCL_TCLSH_ADJ and MODTCL_WISH_ADJ shell fragments to
patch the interpreter path in executable scripts.
Also affects CATEGORIES and SUBST_VARS.
.It perl
This module is documented in the main
.Xr bsd.port.mk 5
manpage.
.It textproc/intltool
Sets MODINTLTOOL_OVERRIDE.
.Pa textproc/intltool
is added to BUILD_DEPENDS.
MODINTLTOOL_OVERRIDE changes the paths of INTLTOOL_EXTRACT, INTLTOOL_MERGE and
INTLTOOL_UPDATE to use the installed versions of intltool-extract,
intltool-merge and intltool-update, instead of the version's packages into the
distfile of the port using this module.
Also affects CONFIGURE_ENV, MAKE_ENV and MAKE_FLAGS by appending
MODINTLTOOL_OVERRIDE to them.
.It www/drupal5
.It www/drupal6
.It www/horde
.It www/mozilla
Sets PKGNAME, HOMEPAGE, MASTER_SITES, DISTNAME, USE_GMAKE, ONLY_FOR_ARCHS and
SHARED_ONLY.
EXTRACT_SUFX defaults to .tar.bz2.
.Pp
Adds common dependencies to LIB_DEPENDS, WANTLIB, RUN_DEPENDS and
BUILD_DEPENDS.
Sets common CONFIGURE_ARGS, MAKE_ENV and CONFIGURE_ENV.
Sets MOB variable as source directory
and MOZ as target directory within do-install.
.Pp
Port Makefile has to set MOZILLA_PROJECT, MOZILLA_CODENAME, MOZILLA_VERSION,
MOZILLA_BRANCH, MOZILLA_LIBS and MOZILLA_DATADIRS variables.
Port can also append values to MOZILLA_SUBST_FILES which contains the list of
files to run SUBST_CMD on during pre-configure, and MOZILLA_AUTOCONF_DIRS which
contains the list of dirs where AUTOCONF will be run during pre-configure.
.It www/pear
.It www/plone
Sets MODPLONE_VERSION and MODZOPE_VERSION.
MODPLONE_VERSION is the default version used by all Plone ports and may be overridden.
It appends
.Pa www/plone
to RUN_DEPENDS and also sets NO_REGRESS to Yes.
.It www/zope
.It x11/gnome
If both GNOME_PROJECT and GNOME_VERSION are set, this module defines
DISTNAME, VERSION, MASTER_SITES, adds x11/gnome to CATEGORIES and
EXTRACT_SUFX will default to .tar.bz2 if unset.
Unconditionally sets DESKTOP_FILES, MODGNOME_HELP_FILES,
MODGNOME_BUILD_DEPENDS, MODGNOME_RUN_DEPENDS and USE_GMAKE.
If CONFIGURE_STYLE is set to either gnu or autoconf
--disable-silent-rules and --disable-shave
are appended to CONFIGURE_ARGS.
If DESKTOP_FILES=Yes, a dependency on
.Pa devel/desktop-file-utils
is appended to MODGNOME_RUN_DEPENDS.
If MODGNOME_HELP_FILES=Yes, then
.Pa x11/gnome/yelp
is appended to MODGNOME_RUN_DEPENDS and
.Pa x11/gnome/doc-utils
is appended to MODGNOME_BUILD_DEPENDS.
This option is to be used when .xml GNOME help files are installed into
.Pa share/gnome/help/ .
Unless NO_BUILD=Yes, USE_LIBTOOL is set to Yes and
.Pa textproc/intltool
is appended to MODULES.
.Pp
.It x11/gnustep
.It x11/kde
.It x11/qt3
.It x11/qt4
.It x11/tk
Sets MODTK_VERSION, MODTK_BIN, MODTK_INCDIR, MODTK_LIBDIR,
MODTK_BUILD_DEPENDS, MODTK_RUN_DEPENDS, MODTK_LIB, MODTK_LIB_DEPENDS,
and MODTK_CONFIG.
MODTK_VERSION is the default version used by all Tk ports and
may be overridden.
Automatically adds the lang/tcl module, provides a default
MODTCL_VERSION to match MODTK_VERSION, and affects CATEGORIES
and SUBST_VARS.
Note the MODTCL_WISH_ADJ shell fragment in the lang/tcl module.
.It x11/xfce4
Sets DIST_SUBDIR, EXTRACT_SUFX, CONFIGURE_STYLE,
CONFIGURE_ENV and USE_GMAKE.
If DESKTOP_FILES is set to yes, it adds
.Pa devel/desktop-file-utils
to RUN_DEPENDS.
Unless XFCE_NO_SRC is set, USE_LIBTOOL is set to yes and
.Pa devel/gettext
and
.Pa textproc/intltool
are added to MODULES.
Also affects CATEGORIES.
.Pp
Xfce ports can be divided into five categories: core libraries and
applications, goodies, artwork, thunar plugins, and panel plugins.
HOMEPAGE, MASTER_SITES and DISTNAME are built using XFCE_VERSION (which
defaults to XFCE_DESKTOP_VERSION if not set) and either XFCE_PROJECT,
XFCE_GOODIE, XFCE_ARTWORK, THUNAR_PLUGIN or XFCE_PLUGIN.
One of the latter has to be provided by the port Makefile.
.El
.Sh SEE ALSO
.Xr make 1 ,
.Xr bsd.port.mk 5 ,
.Xr ports 7
