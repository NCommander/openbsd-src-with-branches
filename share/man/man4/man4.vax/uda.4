.\"	$OpenBSD: uda.4,v 1.23 2015/02/15 22:26:45 bentley Exp $
.\"	$NetBSD: uda.4,v 1.3 1996/03/03 17:14:10 thorpej Exp $
.\"
.\" Copyright (c) 1980, 1987, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     from: @(#)uda.4	6.6 (Berkeley) 3/27/91
.\"
.Dd $Mdocdate: February 15 2015 $
.Dt UDA 4 vax
.Os
.Sh NAME
.Nm uda
.Nd UDA50 disk controller interface
.Sh SYNOPSIS
.Cd "uda0 at uba? csr 0172150"
.Cd "uda1 at uba? csr 0160334"
.Cd "mscpbus* at uda?"
.Sh DESCRIPTION
This is a driver for the DEC UDA50 disk controller and other
compatible controllers.
The UDA50 communicates with the host through
a packet protocol known as the Mass Storage Control Protocol (MSCP).
Consult the file
.In vax/mscp.h
for a detailed description of this protocol.
.Pp
The
.Nm uda
driver
is a typical block-device disk driver; see
.Xr physio 9
for a description of block I/O.
The script
.Xr MAKEDEV 8
should be used to create the
.Nm uda
special files; should a special
file need to be created by hand, consult
.Xr mknod 8 .
.Pp
The
.Dv MSCP_PARANOIA
option enables runtime checking on all transfer completion responses
from the controller.
This increases disk I/O
overhead and may
be undesirable on slow machines, but is otherwise recommended.
.Pp
The first sector of each disk contains both a first-stage bootstrap program
and a disk label containing geometry information and partition layouts (see
.Xr disklabel 5 ) .
This sector is normally write-protected, and disk-to-disk copies should
avoid copying this sector.
The label may be updated with
.Xr disklabel 8 ,
which can also be used to write-enable and write-disable the sector.
The next 15 sectors contain a second-stage bootstrap program.
.Sh DISK SUPPORT
During autoconfiguration,
as well as when a drive is opened after all partitions are closed,
the first sector of the drive is examined for a disk label.
If a label is found, the geometry of the drive and the partition tables
are taken from it.
If no label is found,
the driver configures the type of each drive when it is first
encountered.
A default partition table in the driver is used for each type
of disk when a pack is not labelled.
The origin and size (in sectors) of the default pseudo-disks on each
drive are shown below.
Not all partitions begin on cylinder boundaries, as on other drives,
because previous drivers used one partition table for all drive types.
Variants of the partition tables are common; check the driver and the file
.Pa /etc/disktab
.Pq Xr disktab 5
for other possibilities.
.Pp
Special file names begin with
.Ql ra
and
.Ql rra
for the block and character files respectively.
The second component of the name, a drive unit number in the range of zero to
seven, is represented by a
.Ql \&?
in the disk layouts below.
The last component of the name is the file system partition designated
by a letter from
.Ql a
to
.Ql h
and which corresponds to a minor device number set: zero to seven,
eight to 15, 16 to 23 and so forth for drive zero, drive two and drive
three respectively (see
.Xr physio 9 ) .
The location and size (in sectors) of the partitions:
.Pp
RA60 partitions
.Bl -column "disk" "start" "length" -offset indent -compact
.It Sy "disk" Ta Sy "start" Ta Sy "length"
.It ra?a Ta 0 Ta 15884
.It ra?b Ta 15884 Ta 33440
.It ra?c Ta 0 Ta 400176
.It ra?d Ta 49324 Ta 82080 Ta "same as 4.2BSD ra?g"
.It ra?e Ta 131404 Ta 268772 Ta "same as 4.2BSD ra?h"
.It ra?f Ta 49324 Ta 350852
.It ra?g Ta 242606 Ta 157570
.It ra?h Ta 49324 Ta 193282
.El
.Pp
RA70 partitions
.Bl -column "disk" "start" "length" -offset indent -compact
.It Sy "disk" Ta Sy "start" Ta Sy "length"
.It ra?a Ta 0 Ta 15884
.It ra?b Ta 15972 Ta 33440
.It ra?c Ta 0 Ta 547041
.It ra?d Ta 34122 Ta 15884
.It ra?e Ta 357192 Ta 55936
.It ra?f Ta 413457 Ta 133584
.It ra?g Ta 341220 Ta 205821
.It ra?h Ta 49731 Ta 29136
.El
.Pp
RA80 partitions
.Bl -column "disk" "start" "length" -offset indent -compact
.It Sy "disk" Ta Sy "start" Ta Sy "length"
.It ra?a Ta 0 Ta 15884
.It ra?b Ta 15884 Ta 33440
.It ra?c Ta 0 Ta 242606
.It ra?e Ta 49324 Ta 193282 Ta "same as old Berkeley ra?g"
.It ra?f Ta 49324 Ta 82080 Ta "same as 4.2BSD ra?g"
.It ra?g Ta 49910 Ta 192696
.It ra?h Ta 131404 Ta 111202 Ta "same as 4.2BSD"
.El
.Pp
RA81 partitions
.Bl -column "disk" "start" "length" -offset indent -compact
.It Sy "disk" Ta Sy "start" Ta Sy "length"
.It ra?a Ta 0 Ta 15884
.It ra?b Ta 16422 Ta 66880
.It ra?c Ta 0 Ta 891072
.It ra?d Ta 375564 Ta 15884
.It ra?e Ta 391986 Ta 307200
.It ra?f Ta 699720 Ta 191352
.It ra?g Ta 375564 Ta 515508
.It ra?h Ta 83538 Ta 291346
.El
.Pp
RA81 partitions with 4.2BSD-compatible partitions
.Bl -column "disk" "start" "length" -offset indent -compact
.It Sy "disk" Ta Sy "start" Ta Sy "length"
.It ra?a Ta 0 Ta 15884
.It ra?b Ta 16422 Ta 66880
.It ra?c Ta 0 Ta 891072
.It ra?d Ta 49324 Ta 82080 Ta "same as 4.2BSD ra?g"
.It ra?e Ta 131404 Ta 759668 Ta "same as 4.2BSD ra?h"
.It ra?f Ta 412490 Ta 478582 Ta "same as 4.2BSD ra?f"
.It ra?g Ta 375564 Ta 515508
.It ra?h Ta 83538 Ta 291346
.El
.Pp
RA82 partitions
.Bl -column "disk" "start" "length" -offset indent -compact
.It Sy "disk" Ta Sy "start" Ta Sy "length"
.It ra?a Ta 0 Ta 15884
.It ra?b Ta 16245 Ta 66880
.It ra?c Ta 0 Ta 1135554
.It ra?d Ta 375345 Ta 15884
.It ra?e Ta 391590 Ta 307200
.It ra?f Ta 669390 Ta 466164
.It ra?g Ta 375345 Ta 760209
.It ra?h Ta 83790 Ta 291346
.El
.Pp
The ra?a partition is normally used for the root file system, the ra?b
partition as a paging area, and the ra?c partition for pack-pack
copying (it maps the entire disk).
.Sh FILES
.Bl -tag -width /dev/rra[0-9][a-p] -compact
.It Pa /dev/ra[0-9][a-p]
.It Pa /dev/rra[0-9][a-p]
.El
.Sh DIAGNOSTICS
.Bl -diag
.It "panic: udaslave"
No command packets were available while the driver was looking
for disk drives.
The controller is not extending enough credits to use the drives.
.It "uda0: no response to Get Unit Status request"
A disk drive was found, but did not respond to a status request.
This is either a hardware problem or someone pulling unit number
plugs very fast.
.It "uda0: unit N off line"
While searching for drives, the controller found one that
seems to be manually disabled.
It is ignored.
.It "uda0: unable to get unit status"
Something went wrong while trying to determine the status of
a disk drive.
This is followed by an error detail.
.It "uda0: unit N, next X"
This probably never happens, but I wanted to know if it did.
I have no idea what one should do about it.
.It "uda0: cannot handle unit number N (max is X)"
The controller found a drive whose unit number is too large.
Valid unit numbers are those in the range [0..7].
.It "uda0: uballoc map failed"
UNIBUS resource map allocation failed during initialization.
This can only happen if you have 496 devices on a UNIBUS.
.It "uda0: timeout during init"
The controller did not initialize within ten seconds.
A hardware problem, but it sometimes goes away if you try again.
.It "uda0: init failed, sa=..."
The controller refused to initialize.
.It "uda0: controller hung"
The controller never finished initialization.
Retrying may sometimes fix it.
.It "uda0: still hung"
When the controller hangs, the driver occasionally tries to reinitialize
it.
This means it just tried, without success.
.It "uda0: command ring too small"
If you increase
.Dv NCMDL2 ,
you may see a performance improvement.
(See
.Pa /sys/arch/vax/mscp/mscpreg.h . )
.It "uda0: controller error, sa=0%o (...)"
The controller reported an error.
The error code is printed in
octal, along with a short description if the code is known (see the
.%T UDA50 Maintenance Guide ,
DEC part number AA-M185B-TC, pp. 18-22).
If this occurs during normal
operation, the driver will reset it and retry pending I/O.
If
it occurs during configuration, the controller may be ignored.
.It "uda0: stray intr"
The controller interrupted when it should have stayed quiet.
The interrupt has been ignored.
.It "uda0: init step N failed, sa=..."
The controller reported an error during the named initialization step.
The driver will retry initialization later.
.It "uda0: version X model Y"
An informational message giving the revision level of the controller.
.It "uda0: DMA burst size set to N"
An informational message showing the DMA burst size, in words.
.It "uda0: SETCTLRC failed:  `detail'"
The Set Controller Characteristics command (the last part of the
controller initialization sequence) failed.
The
.Em detail
message tells why.
.It "uda0: attempt to bring ra0 on line failed:  `detail'"
The drive could not be brought on line.
The
.Em detail
message tells why.
.It "uda0: ra0: unknown type N"
The type index of the named drive is not known to the driver, so the
drive will be ignored.
.It "uda0: attempt to get status for ra0 failed:  `detail'"
A status request failed.
The
.Em detail
message should tell why.
.It "panic: udareplace"
The controller reported completion of a REPLACE operation.
The driver never issues any REPLACE operations, so something is wrong.
.It "panic: udabb"
The controller reported completion of bad block related I/O.
The
driver never issues any such, so something is wrong.
.It "uda0: lost interrupt"
The controller has gone out to lunch, and is being reset to try to bring
it back.
.It "panic: mscp_go: AEB_MAX_BP too small"
You defined
.Dv AVOID_EMULEX_BUG
and increased
.Dv NCMDL2
and Emulex has
new firmware.
Raise
.Dv AEB_MAX_BP
or turn off
.Dv AVOID_EMULEX_BUG .
.It "uda0: unit N: unknown message type 0xXXX ignored"
The controller responded with a mysterious message type.
See
.Pa /sys/vax/mscp.h
for a list of known message types.
This is probably a controller hardware problem.
.It "uda0: unit N out of range"
The disk drive unit number (the unit plug) is higher than the
maximum number the driver allows (currently 7).
.It "uda0: unit N not configured, message ignored"
The named disk drive has announced its presence to the controller,
but was not, or cannot now be, configured into the running system.
.Em Message
is one of `available attention' (an `I am here' message) or
`stray response op 0xXXXX status 0xXXXX' (anything else).
.It "Emulex SC41/MS screwup: uda0, got N correct, then changed 0xXXXX to 0xYYYY"
You turned on
.Dv AVOID_EMULEX_BUG ,
and the driver successfully
avoided the bug.
The number of correctly handled requests is
reported, along with the expected and actual values relating to
the bug being avoided.
.It "panic: unrecoverable Emulex screwup"
You turned on
.Dv AVOID_EMULEX_BUG ,
but Emulex was too clever and
avoided the avoidance.
Try turning on
.Dv MSCP_PARANOIA
instead.
.It "uda0: bad response packet ignored"
You turned on
.Dv MSCP_PARANOIA ,
and the driver caught the controller in
a lie.
The lie has been ignored, and the controller will soon be
reset (after a `lost' interrupt).
This is followed by a hex dump of the offending packet.
.It "uda0: ... error datagram"
The controller has reported some kind of error, either `hard'
(unrecoverable) or `soft' (recoverable).
If the controller is going on
(attempting to fix the problem), this message includes the remark
`(continuing)'.
Emulex controllers wrongly claim that all soft errors
are hard errors.
This message may be followed by
one of the following 5 messages, depending on its type, and will always
be followed by a failure detail message (also listed below).
.Bd -filled -offset indent
.Bl -diag
.It memory addr 0x%x
A host memory access error; this is the address that could not be
read.
.It "unit N: level N retry N, ... N"
A typical disk error; the retry count and error recovery levels are
printed, along with the block type (`lbn', or logical block; or `rbn',
or replacement block) and number.
If the string is something else, DEC
has been clever, or your hardware has gone to Australia for vacation
(unless you live there; then it might be in New Zealand, or Brazil).
.It unit N: ... N
Also a disk error, but an `SDI' error, whatever that is.
.Po
I doubt it has anything to do with Ronald Reagan.
.Pc
This lists the block type (`lbn' or `rbn') and number.
This is followed by a second
message indicating a microprocessor error code and a front panel code.
These latter codes are drive-specific, and are intended to
be used by field service as an aid in locating failing hardware.
The codes for RA81s can be found in the
.%T RA81 Maintenance Guide ,
DEC order number AA-M879A-TC, in appendices E and F.
.It "unit N: small disk error, cyl N"
Yet another kind of disk error, but for small disks.
.Po
.Do
That's what it says, guv'nor.
Dunnask me what it means.
.Dc
.Pc
.It "unit N: unknown error, format 0x%x"
A mysterious error: the given format code is not known.
.El
.Ed
.Pp
The detail messages are as follows:
.Bd -filled -offset indent
.Bl -diag
.It success (...) (code 0, subcode N)
Everything worked, but the controller thought it would let you know
that something went wrong.
No matter what subcode, this can probably
be ignored.
.It "invalid command (...) (code 1, subcode N)"
This probably cannot occur unless the hardware is out; ... should be
`invalid msg length', meaning some command was too short or too long.
.It "command aborted (unknown subcode) (code 2, subcode N)"
This should never occur, as the driver never aborts commands.
.It "unit offline (...) (code 3, subcode N)"
The drive is offline, either because it is not around (`unknown
drive'), stopped (`not mounted'), out of order (`inoperative'), has the
same unit number as some other drive (`duplicate'), or has been
disabled for diagnostics (`in diagnosis').
.It "unit available (unknown subcode) (code 4, subcode N)"
The controller has decided to report a perfectly normal event as
an error.
(Why?)
.It "media format error (...) (code 5, subcode N)"
The drive cannot be used without reformatting.
The Format Control
Table cannot be read (`fct unread - edc'), there is a bad sector
header (`invalid sector header'), the drive is not set for 512-byte
sectors (`not 512 sectors'), the drive is not formatted (`not formatted'),
or the FCT has an uncorrectable ECC error (`fct ecc').
.It "write protected (...) (code 6, subcode N)"
The drive is write protected, either by the front panel switch
(`hardware') or via the driver (`software').
The driver never sets software write protect.
.It "compare error (unknown subcode) (code 7, subcode N)"
A compare operation showed some sort of difference.
The driver never uses compare operations.
.It "data error (...) (code 7, subcode N)"
Something went wrong reading or writing a data sector.
A `forced
error' is a software-asserted error used to mark a sector that contains
suspect data.
Rewriting the sector will clear the forced error.
This is normally set only during bad block replacement, and the driver does
no bad block replacement, so these should not occur.
A `header compare' error probably means the block is shot.
A `sync timeout' presumably has something to do with sector synchronisation.
An `uncorrectable ecc' error is an ordinary data error that cannot
be fixed via ECC logic.
A `N symbol ecc' error is a data error
that can be (and presumably has been) corrected by the ECC logic.
It might indicate a sector that is imperfect but usable, or that
is starting to go bad.
If any of these errors recur, the sector
may need to be replaced.
.It "host buffer access error (...) (code N, subcode N)"
Something went wrong while trying to copy data to or from the host
(Vax).
The subcode is one of `odd xfer addr', `odd xfer count',
`non-exist. memory', or `memory parity'.
The first two could be a
software glitch; the last two indicate hardware problems.
.It controller error (...) (code N, subcode N)
The controller has detected a hardware error in itself.
A `serdes overrun' is a serialiser / deserialiser overrun; `edc'
probably stands for `error detection code'; and `inconsistent
internal data struct' is obvious.
.It "drive error (...) (code N, subcode N)"
Either the controller or the drive has detected a hardware error
in the drive.
I am not sure what an `sdi command timeout' is, but
these seem to occur benignly on occasion.
A `ctlr detected protocol'
error means that the controller and drive do not agree on a protocol;
this could be a cabling problem, or a version mismatch.
A `positioner'
error means the drive seek hardware is ailing; `lost rd/wr ready'
means the drive read/write logic is sick; and `drive clock dropout'
means that the drive clock logic is bad, or the media is hopelessly
scrambled.
I have no idea what `lost recvr ready' means.
A `drive detected error' is a catch-all for drive hardware trouble; `ctlr
detected pulse or parity' errors are often caused by cabling problems.
.El
.Ed
.El
.Sh SEE ALSO
.Xr intro 4 ,
.Xr mscpbus 4 ,
.Xr uba 4 ,
.Xr disklabel 5 ,
.Xr disklabel 8
.Sh HISTORY
The
.Nm
driver appeared in
.Bx 4.2 .
