#!/usr/bin/perl
#
# $OpenBSD: mdoclint,v 1.73 2017/06/24 16:10:01 schwarze Exp $
# $NetBSD: mdoclint,v 1.77 2017/06/08 10:19:56 wiz Exp $
#
# Copyright (c) 2001-2017 Thomas Klausner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR, THOMAS KLAUSNER,
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

use strict;
use warnings;

$| = 1;

package Parser;
use Getopt::Std;

use constant {
	OPENBSD => 1,
	NETBSD => 0,
};

use vars qw($opt_F $opt_h $opt_m $opt_p $opt_v $opt_x);

my $arch=`uname -m`;
chomp($arch);
my $options="Fhmpvx";

sub usage
{
	print STDERR <<"EOF";
mdoclint: verify man page correctness
usage:	mdoclint [-$options] file ...
	-F	fix whitespace problems (asks before overwriting)
	-h	display this help text
	-m	warn about man pages that are not in mdoc(7) format
	-p	warn about punctuation problems
	-v	verbose output
	-x	warn about cross-references with missing targets
Default is -mpx if no flag is specified.
EOF
	exit(0);
}

# constants to build
my $sections_re;
my $esections_re;

# and the code that builds them
{
	if (OPENBSD) {
		$sections_re = qr{(?:3p|[1-9])}o;
		$esections_re = qr{(?:3p|[0-9])}o;
	}
	if (NETBSD) {
		$sections_re = qr{[1-9](?:lua)?}o;
		$esections_re = qr{[0-9](?:lua)?}o;
	}
}

sub debug
{
	my $self = shift;
    	print STDOUT "debug: $self->{fn}:$self->{ln}: @_\n" if $opt_v;
}

sub warning
{
	my $self = shift;
	print STDOUT "$self->{fn}:$self->{ln}: ", join('', @_), "\n";
}

sub handle_options
{
	getopts($options);
	$opt_h and usage();

	# default to all warnings if no flag is set
	$opt_m = $opt_p = $opt_x = 1 unless $opt_m or $opt_p or $opt_x;
}

sub verify_xref
{
	my ($self, $page, $section, $pre, $post) = @_;
	if ($self->{names}{$page.$section}) {
		$self->warning("Xref to itself (use .Nm instead)") if $opt_x;
	}
	# try to find corresponding man page
	if (OPENBSD) {
		open my $saveout, '>&', STDOUT;
		open my $saveerr, '>&', STDERR;
		open STDOUT, '>', '/dev/null';
		open STDERR, '>', '/dev/null';
		my $irc = system 'man', '-M', '/usr/share/man:/usr/X11R6/man',
		    '-s', $section, '-f', $page;
		open STDOUT, '>&', $saveout;
		open STDERR, '>&', $saveerr;
		return 1 unless $irc;
	} else {
		for my $dir ('/usr/share/man', '/usr/X11R7/man') {
			for my $a ('', $arch) {
				for my $page ("man$section/$a/$page.$section") {
					return 1 if -f "$dir/$page";
				}
			}
		}
	}
	return 1 if -f "./$page.$section";
	return 1 if -f "./$page.mdoc";

	$self->warning($pre."trailing Xref to $page($section)$post") if $opt_x;
	return 0;
}

sub new
{
	my ($class, $fn) = @_;

	my $o = {
		mandoc_p => 1,
		all => [],
		changes => 0,
		in_name => 0,
		sec => '0',
		names => { $fn => 1 },
		fn => $fn
	};
	$o->{sec} = $1 if $fn =~ /\.(.+?)$/;
	open my $input, '<', $fn or die "can't open input file $fn";
	$o->{file} = $input;
	$o->{ln} = 0;
	bless $o, $class;
}

sub next_line
{
	my ($self) = @_;

	my $l = readline($self->{file});
	if (defined $l) {
		$self->{ln}++;
	}
	return $l;
}

sub close
{
	my ($self) = @_;

	close($self->{file});
}

sub process_and_save_line
{
	my ($s, $input) = @_;
	my $result = $s->process_line($input);
	# note that process_line chomps \n, then re-adds it,
	# so we detect a change on last lines without a \n.
	if ($result ne "$input") {
		$s->{changes} = 1;
	}
	push(@{$s->{all}}, $result);
}

sub process_line
{
	my $s;
	($s, $_) = @_;
	chomp;
	# always cut trailing spaces
	s/\s+$//o;
	# comments
	if (/^\.\\\"/) {
		return "$_\n";
	}
	if (/^\.TH\s+/o) {
		$s->warning("not mandoc") if $opt_m;
		$s->{mandoc_p} = 0;
		return "$_\n";
	}
	if (/^\.Dt\s+\S+\s+([1-9])/o) {
		$s->{sec} = $1;
	}
	if ($s->{mandoc_p}) {
		if (/^\.Sh\s+"?(.*?)"?\s*$/o) {
			my $line = $_;
			$s->{in_name} = $1 eq 'NAME';
			return "$line\n";
		}
	} else {
		if (/^\.SH\s+"?(.*?)"?\s*$/o) {
			my $line = $_;
			$s->{in_name} = $1 eq 'NAME';
			return "$line\n";
		}
	}
	if ($s->{in_name}) {
		if (/^\.Nm\s+(\S+)/o) {
			$s->{names}{$1.$s->{sec}} = 1;
		}
	}
	if (/^\./o and /Ns [\.();,\[\]\{\}:]/o) {
		$s->warning("possible Ns abuse: `$_'") if $opt_p;
	}

	my $destruct = $_;
	if ($s->{mandoc_p}) {
		$destruct =~ s/\\\&([\w\.])/$1/o;
		if ($destruct =~ /^\.Xr\s+([\w\:\.\-\+\/]+)\s+($esections_re)(.*)/o) {
			$s->debug("Xref to $1($2) found: `$_'");
			$s->verify_xref($1, $2, "", "");
			if ($3 =~ /^\S/o) {
				$s->warning("No space after section number in Xref: `$_'") if $opt_x;
			}
		} elsif ($destruct =~ /^\.Xr/o) {
			$s->warning("Weird Xref found: `$_'") if $opt_x;
		}
	} else {
		$destruct =~ s/\\f.//go;
		if ($destruct !~ /^\.\\\"/o) {
			while ($destruct =~ s/([-\w.]+)\s*\(($esections_re)\)//o) {
				$s->debug("possible Xref to $1($2) found: `$_'");
				$s->verify_xref($1, $2, "possible ", ": `$_'");
				# so that we have a chance to find more than one
				# per line
				$destruct =~ s/(\w+)\s*\(($sections_re)\)//o;
			}
		}
	}
	return "$_\n";
}

package main;

sub handle_file
{
	my $parser = Parser->new($_[0]);

	while ($_ = $parser->next_line) {
		$parser->process_and_save_line($_);
	}
	$parser->close;
	if ($Parser::opt_F and $parser->{changes}) {
		open OUT, ">$_[0].new" or
		    die "can't open output file `$_[0].new'";
		for my $l (@{$parser->{all}}) {
			print OUT $l
		}
		close OUT;
		system("mv -i $_[0].new $_[0]");
	}
}

Parser->handle_options;
foreach my $file (@ARGV) {
	handle_file($file);
}
