!GROK!THIS!
# Descrip.MMS for perl5 on VMS
# Last revised 5-Dec-2001 by Craig Berry -- craigberry@mac.com
#
#: This file uses MMS syntax, and can be processed using DEC's MMS product,
#: or the free MMK clone (available by ftp at ftp.spc.edu).  If you want to
#: a Unix-style MAKE tool, run this file through mms2make.pl, which should
#: be found in the same directory as this file.
#:
#: Lines beginning with "#:" will be removed by mms2make.pl when converting
#: this file to MAKE syntax.
#
#	tidy      -- purge files generated by executing this file
#	clean     -- remove all intermediate (e.g. object files, C files generated
#	             during build) files generated by executing this file,
#	             but leave `installable' files (images, library) intact
#	realclean -- remove all files generated by executing this file
#	cleansrc  -- `realclean' + purge *.c,*.h,descrip.mms
#	crtl.opt  -- compiler-specific linker options file (made automatically)
#

#### Start of system configuration section. ####

~DECC~
~DECCXX~
~GNUC~
~ARCH-TYPE~ = 1
~THREAD~
~SOCKET~
~MALLOC~
~CC~
~MT~
~FLAGS~

#: >>>>> Architecture-specific options <<<<<
.ifdef AXE
# File type to use for object files
O = .abj
# File type to use for object libraries
OLB = .alb
# File type to use for executable images
E = .axe
.else
# File type to use for object files
O = .obj
# File type to use for object libraries
OLB = .olb
# File type to use for executable images
E = .exe
.endif

.ifdef __AXP__
ARCH = VMS_AXP
OBJVAL = $(O)
.else
ARCH = VMS_VAX
OBJVAL = $(MMS$TARGET_NAME)$(O)
.endif

PERL_VERSION = ~PV~

.ifdef MALLOC
MALLOC_O = malloc$(O)
MALLOC_C = malloc$(C)
.endif

.ifdef DECC_SOCKETS
SOCKET=1
.endif

.ifdef SOCKETSHR_SOCKETS
SOCKET=1
.endif

# If they defined SOCKET but didn't choose a stack, default to SOCKETSHR
.ifdef DECC_SOCKETS
.else
.ifdef SOCKETSHR_SOCKETS
.else
.ifdef SOCKET
SOCKETSHR_SOCKETS=1
.endif
.endif
.endif


ARCHDIR =  [.lib.$(ARCH).$(PERL_VERSION)]
ARCHCORE = [.lib.$(ARCH).$(PERL_VERSION).CORE]
ARCHAUTO = [.lib.$(ARCH).$(PERL_VERSION).auto]


#: Backwards compatibility
.ifdef DECC_PIPES_BROKEN
PIPES_BROKEN = 1
.endif

#: >>>>>Compiler-specific options <<<<<
.ifdef GNUC
.first
	@ If F$TrnLnm("Sys").eqs."" Then Define/NoLog SYS GNU_CC_Include:[VMS]
CC = gcc
PIPES_BROKEN = 1
# -fno-builtin avoids bug in gcc up to version 2.6.2 which can destroy
# data when memcpy() is called on large (>64 kB) blocks of memory
# (fixed in gcc 2.6.3)
XTRACCFLAGS = /Obj=$(MMS$TARGET_NAME)$(O)/NoCase_Hack/Optimize=2
DBGSPECFLAGS =
XTRADEF = 
XTRAOBJS =
LIBS1 = GNU_CC:[000000]GCCLIB.OLB/Library
LIBS2 = Sys$Share:VAXCRTL/Shareable
POSIX =
.else
XTRAOBJS = 
LIBS1 = $(XTRAOBJS)
DBGSPECFLAGS = /Show=All
# Some versions of DECCRTL on AXP have a bug in chdir() which causes the change
# to persist after the image exits, even when this was not requested, iff
# SYSNAM is enabled.  This is fixed in CSC Patch # AXPACRT04_061, but turning
# off SYSNAM for the MM[SK] subprocess doesn't hurt anything, so we do it
# just in case.
.first
	@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").nes."" Then Define/NoLog SYS DECC$System_Include
.ifdef __AXP__
	@ Set Process/Privilege=(NoSYSNAM)
	@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").eqs."" Then Define/NoLog SYS Sys$Library
.else
	@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").eqs."" Then Define/NoLog SYS DECC$Library_Include
.endif

.ifdef DECCXX
XTRACCFLAGS = /Include=[]/Standard=ANSI/Prefix=All/Obj=$(OBJVAL)
.else
XTRACCFLAGS = /Include=[]/Standard=Relaxed_ANSI/Prefix=All/Obj=$(OBJVAL)
.endif
XTRADEF =
POSIX = POSIX
.endif


#: >>>>> Configuration options <<<<<
#: __DEBUG__: builds images with full VMS debugger support
.ifdef __DEBUG__
DBGCCFLAGS = /List/Debug/NoOpt$(DBGSPECFLAGS)
DBGLINKFLAGS = /Trace/Debug/Map/Full/Cross
DBG = DBG
.else
DBGCCFLAGS = /NoList
DBGLINKFLAGS = /NoTrace/NoMap
DBG = 
.endif

#: SOCKET: build in support for TCP/IP sockets
#: By default, used SOCKETSHR library; see ReadMe.VMS
#: for information on changing socket support
.ifdef SOCKET
.ifdef DECC_SOCKETS
SOCKDEF = 
SOCKLIB = 
.else
SOCKDEF = 
SOCKLIB = SocketShr/Share
.endif
# N.B. the targets for $(SOCKC) and $(SOCKH) assume that the permanent
# copies live in [.vms], and the `clean' target will delete copies of
# these files in the current default directory.
SOCKC = sockadapt.c
SOCKH = sockadapt.h
SOCKARCH = $(ARCHCORE)$(SOCKH)
SOCKO = sockadapt$(O)
SOCKPM = [.lib]Socket.pm
.else
SOCKDEF =
SOCKLIB =
SOCKC =
SOCKH =
SOCKARCH =
SOCKO =
SOCKPM =
.endif

.ifdef THREADED
THREADDEF = 
THREAD = THREAD
.endif

.ifdef OLDTHREADED
THREADDEF = 
THREAD = THREAD
THRLIBS1 = sys$share:cma$lib_shr/share|sys$share:cma$rtl/share
.ifdef __AXP__
THRLIBS2 = sys$share:cma$open_lib_shr/share|sys$share:cma$open_rtl/share
.endif
.endif

.ifdef FAKETHREADED
THREADDEF = 
THREADH = fakethr.h
THREAD = THREAD
.else
THREADH =
.endif

# C preprocessor manifest "DEBUGGING" ==> perl -D, not the VMS debugger
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)
# Flags for a core compile
X2PCFLAGS = $(CFLAGS)/Define=PERL_FOR_X2P
# Flags for an x2p compile
CORECFLAGS = $(CFLAGS)/Define=PERL_CORE
LINKFLAGS = $(DBGLINKFLAGS)

MAKE = $(MMS)
MAKEFILE = Descrip.MMS   # this file
NOOP = continue

# Macros to invoke a copy of miniperl during the build.  Targets which
# are built using these macros should depend on $(MINIPERL_EXE)
MINIPERL_EXE = Sys$Disk:[]miniperl$(E)
MINIPERL = MCR $(MINIPERL_EXE) "-I[.lib]"
MINIPERLQ = MCR $(MINIPERL_EXE) ""-I[.lib]""
XSUBPP = $(MINIPERL) "-I[.ext.re]" [.lib.extutils]xsubpp -noprototypes
# Macro to invoke a preexisting copy of Perl.  This is used to regenerate
# some header files when rebuilding Perl, but premade versions are provided
# in the distribution, so it's OK if this doesn't work; it's here to make
# life easier for those who modify Perl and rebuild it.
INSTPERL = perl

# Space-separated list of "static" extensions to build into perlshr (case counts).
MYEXT = DynaLoader
# object files for these extensions; the trailing comma is required if
# there are any object files specified
# These must be built separately, or you must add rules below to build them
myextobj = [.ext.dynaloader]dl_vms$(O),
EXT = $(MYEXT)
extobj = $(myextobj)

.ifdef LIBS2
.else
LIBS2=
.endif

.ifdef THRLIBS1
.else
THRLIBS1=
.endif

.ifdef THRLIBS2
.else
THRLIBS2=
.endif

FULLLIBS2 = $(LIBS2)|$(THRLIBS1)|$(THRLIBS2)

#### End of system configuration section. ####

c0 = $(MALLOC_C) $(SOCKC) av.c deb.c doio.c doop.c dump.c globals.c gv.c hv.c
c1 = mg.c locale.c miniperlmain.c numeric.c op.c pad.c perl.c perlapi.c perlio.c
c2 = perly.c pp.c pp_ctl.c pp_hot.c pp_pack.c pp_sort.c pp_sys.c regcomp.c regexec.c reentr.c
c3 = run.c scope.c sv.c taint.c toke.c universal.c utf8.c util.c vms.c xsutils.c
c = $(c0) $(c1) $(c2) $(c3)

obj0 = $(MALLOC_O) $(SOCKO) av$(O) deb$(O) doio$(O) doop$(O) dump$(O)
obj1 = globals$(O) gv$(O) hv$(O) locale$(O) mg$(O) miniperlmain$(O) numeric$(O) op$(O) pad$(O)
obj2 = perl$(O) perlapi$(O) perlio$(O) perly$(O) pp$(O) pp_ctl$(O) pp_hot$(O) reentr$(O)
obj3 = pp_pack$(O) pp_sort$(O) pp_sys$(O) regcomp$(O) regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) toke$(O)
obj4 = universal$(O) utf8$(O) util$(O) vms$(O) xsutils$(O)
obj = $(obj0) $(obj1) $(obj2) $(obj3) $(obj4)

h0 = av.h cc_runtime.h config.h cop.h cv.h embed.h embedvar.h
h1 = EXTERN.h form.h gv.h handy.h hv.h INTERN.h intrpvar.h
h2 = iperlsys.h keywords.h mg.h nostdio.h op.h opcode.h opnames.h pad.h
h3 = patchlevel.h perl.h perlapi.h perlio.h perlsdio.h perlvars.h perly.h
h4 = pp.h pp_proto.h proto.h regcomp.h regexp.h regnodes.h scope.h
h5 = sv.h thrdvar.h thread.h utf8.h util.h vmsish.h warnings.h
h6 = xsub.h $(SOCKH) $(THREADH)
h = $(h0) $(h1) $(h2) $(h3) $(h4) $(h5) $(h6)

ac0 = $(ARCHCORE)$(sockh) $(ARCHCORE)av.h $(ARCHCORE)cc_runtime.h
ac1 = $(ARCHCORE)config.h $(ARCHCORE)cop.h $(ARCHCORE)cv.h $(ARCHCORE)embed.h
ac2 = $(ARCHCORE)embedvar.h $(ARCHCORE)EXTERN.h $(ARCHCORE)fakethr.h
ac3 = $(ARCHCORE)form.h $(ARCHCORE)gv.h $(ARCHCORE)handy.h $(ARCHCORE)hv.h
ac4 = $(ARCHCORE)INTERN.h $(ARCHCORE)intrpvar.h $(ARCHCORE)iperlsys.h
ac5 = $(ARCHCORE)keywords.h $(ARCHCORE)mg.h $(ARCHCORE)nostdio.h
ac6 = $(ARCHCORE)op.h $(ARCHCORE)opcode.h $(ARCHCORE)opnames.h 
ac7 = $(ARCHCORE)pad.h $(ARCHCORE)patchlevel.h $(ARCHCORE)perl.h
ac8 = $(ARCHCORE)perlapi.h $(ARCHCORE)perlio.h $(ARCHCORE)perlsdio.h
ac9 = $(ARCHCORE)perlsfio.h $(ARCHCORE)perlvars.h $(ARCHCORE)perly.h $(ARCHCORE)pp.h
.ifdef THREADED
ac10 = $(ARCHCORE)pp_proto.h $(ARCHCORE)proto.h $(ARCHCORE)reentr.h $(ARCHCORE)regcomp.h
.else
ac10 = $(ARCHCORE)pp_proto.h $(ARCHCORE)proto.h $(ARCHCORE)regcomp.h
.endif
ac11 = $(ARCHCORE)regexp.h $(ARCHCORE)regnodes.h $(ARCHCORE)scope.h
.ifdef SOCKARCH
ac12 = $(ARCHCORE)sv.h $(ARCHCORE)thrdvar.h $(SOCKARCH)
.else
ac12 = $(ARCHCORE)sv.h $(ARCHCORE)thrdvar.h
.endif 
ac13 = $(ARCHCORE)thread.h $(ARCHCORE)utf8.h $(ARCHCORE)util.h
ac14 = $(ARCHCORE)vmsish.h $(ARCHCORE)warnings.h $(ARCHCORE)xsub.h
acopt = $(ARCHCORE)perlshr_attr.opt $(ARCHCORE)$(DBG)perlshr_bld.opt
ac = $(ac0) $(ac1) $(ac2) $(ac3) $(ac4) $(ac5) $(ac6) $(ac7) $(ac8) $(ac9) $(ac10) $(ac11) $(ac12) $(ac13) $(ac14) $(acopt)

CRTL = []crtl.opt
CRTLOPTS =,$(CRTL)/Options

.SUFFIXES

.ifdef LINK_ONLY
.else
.SUFFIXES $(O) .c .xs

.xs.c :
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$TARGET)


.c$(O) :
	$(CC) $(CFLAGS) $(MMS$SOURCE)

.xs$(O) :
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$SOURCE_NAME).c
	$(CC) $(CFLAGS) $(MMS$SOURCE_NAME).c
.endif

# Modules which must be installed before we can build extensions
LIBPREREQ = $(ARCHDIR)Config.pm [.lib.VMS]Filespec.pm [.lib]DynaLoader.pm [.lib]XSLoader.pm [.lib]lib.pm [.lib.ExtUtils]XSSymSet.pm $(ARCHDIR)vmspipe.com [.lib]re.pm

utils1 = [.lib.pod]perldoc.com [.lib.ExtUtils]Miniperl.pm [.utils]c2ph.com [.utils]h2ph.com 
utils2 = [.utils]h2xs.com [.utils]libnetcfg.com [.lib]perlbug.com [.lib]perlcc.com [.utils]dprofpp.com 
utils3 = [.utils]perlivp.com [.lib]splain.com [.utils]pl2pm.com [.lib.ExtUtils]xsubpp.com
utils4 = [.utils]enc2xs.com [.utils]piconv.com [.utils]cpan.com

.ifdef NOX2P
all : base extras archcorefiles preplibrary perlpods
	@ QUALIFIERS := $(MMSQUALIFIERS)
	@ QUALIFIERS = QUALIFIERS - """" - """"
	@ write sys$output " "
	@ write sys$output " Everything is up to date. '$(MMS)''QUALIFIERS' test' to run test suite."
.else
all : base extras x2p archcorefiles preplibrary perlpods
	@ QUALIFIERS := $(MMSQUALIFIERS)
	@ QUALIFIERS = QUALIFIERS - """" - """"
	@ write sys$output " "
	@ write sys$output " Everything is up to date. '$(MMS)''QUALIFIERS' test' to run test suite."
.endif
base : miniperl perl
	@ $(NOOP)
extras : dynext libmods utils podxform extra.pods
	@ $(NOOP)
libmods : $(LIBPREREQ)
	@ $(NOOP)
utils : $(utils1) $(utils2) $(utils3) $(utils4)
	@ $(NOOP)
podxform : [.lib.pod]pod2text.com [.lib.pod]pod2html.com [.lib.pod]pod2latex.com [.lib.pod]pod2man.com [.lib.pod]podchecker.com [.lib.pod]pod2usage.com [.lib.pod]podselect.com
	@ $(NOOP)
x2p : [.x2p]$(DBG)a2p$(E) [.x2p]s2p.com [.x2p]find2perl.com 
	@ $(NOOP)
extra.pods : miniperl
	@ @extra_pods.com

pod0 = [.lib.pod]perl.pod [.lib.pod]perl5004delta.pod [.lib.pod]perl5005delta.pod [.lib.pod]perl561delta.pod [.lib.pod]perl56delta.pod
pod1 = [.lib.pod]perl570delta.pod [.lib.pod]perl571delta.pod [.lib.pod]perl572delta.pod [.lib.pod]perl573delta.pod [.lib.pod]perl581delta.pod
pod2 = [.lib.pod]perl58delta.pod [.lib.pod]perlaix.pod [.lib.pod]perlamiga.pod [.lib.pod]perlapi.pod [.lib.pod]perlapio.pod [.lib.pod]perlapollo.pod
pod3 = [.lib.pod]perlartistic.pod [.lib.pod]perlbeos.pod [.lib.pod]perlbook.pod [.lib.pod]perlboot.pod [.lib.pod]perlbot.pod [.lib.pod]perlbs2000.pod
pod4 = [.lib.pod]perlcall.pod [.lib.pod]perlce.pod [.lib.pod]perlcheat.pod [.lib.pod]perlclib.pod [.lib.pod]perlcn.pod [.lib.pod]perlcompile.pod
pod5 = [.lib.pod]perlcygwin.pod [.lib.pod]perldata.pod [.lib.pod]perldbmfilter.pod [.lib.pod]perldebguts.pod [.lib.pod]perldebtut.pod
pod6 = [.lib.pod]perldebug.pod [.lib.pod]perldelta.pod [.lib.pod]perldgux.pod [.lib.pod]perldiag.pod [.lib.pod]perldoc.pod [.lib.pod]perldos.pod
pod7 = [.lib.pod]perldsc.pod [.lib.pod]perlebcdic.pod [.lib.pod]perlembed.pod [.lib.pod]perlepoc.pod [.lib.pod]perlfaq.pod [.lib.pod]perlfaq1.pod
pod8 = [.lib.pod]perlfaq2.pod [.lib.pod]perlfaq3.pod [.lib.pod]perlfaq4.pod [.lib.pod]perlfaq5.pod [.lib.pod]perlfaq6.pod [.lib.pod]perlfaq7.pod
pod9 = [.lib.pod]perlfaq8.pod [.lib.pod]perlfaq9.pod [.lib.pod]perlfilter.pod [.lib.pod]perlfork.pod [.lib.pod]perlform.pod [.lib.pod]perlfreebsd.pod
pod10 = [.lib.pod]perlfunc.pod [.lib.pod]perlgpl.pod [.lib.pod]perlguts.pod [.lib.pod]perlhack.pod [.lib.pod]perlhist.pod [.lib.pod]perlhpux.pod
pod11 = [.lib.pod]perlhurd.pod [.lib.pod]perlintern.pod [.lib.pod]perlintro.pod [.lib.pod]perliol.pod [.lib.pod]perlipc.pod [.lib.pod]perlirix.pod
pod12 = [.lib.pod]perljp.pod [.lib.pod]perlko.pod [.lib.pod]perllexwarn.pod [.lib.pod]perllocale.pod [.lib.pod]perllol.pod [.lib.pod]perlmachten.pod
pod13 = [.lib.pod]perlmacos.pod [.lib.pod]perlmacosx.pod [.lib.pod]perlmint.pod [.lib.pod]perlmod.pod [.lib.pod]perlmodinstall.pod [.lib.pod]perlmodlib.pod
pod14 = [.lib.pod]perlmodstyle.pod [.lib.pod]perlmpeix.pod [.lib.pod]perlnetware.pod [.lib.pod]perlnewmod.pod [.lib.pod]perlnumber.pod [.lib.pod]perlobj.pod
pod15 = [.lib.pod]perlop.pod [.lib.pod]perlopentut.pod [.lib.pod]perlos2.pod [.lib.pod]perlos390.pod [.lib.pod]perlos400.pod [.lib.pod]perlothrtut.pod
pod16 = [.lib.pod]perlpacktut.pod [.lib.pod]perlplan9.pod [.lib.pod]perlpod.pod [.lib.pod]perlpodspec.pod [.lib.pod]perlport.pod [.lib.pod]perlqnx.pod
pod17 = [.lib.pod]perlre.pod [.lib.pod]perlref.pod [.lib.pod]perlreftut.pod [.lib.pod]perlrequick.pod [.lib.pod]perlreref.pod [.lib.pod]perlretut.pod
pod18 = [.lib.pod]perlrun.pod [.lib.pod]perlsec.pod [.lib.pod]perlsolaris.pod [.lib.pod]perlstyle.pod [.lib.pod]perlsub.pod [.lib.pod]perlsyn.pod
pod19 = [.lib.pod]perlthrtut.pod [.lib.pod]perltie.pod [.lib.pod]perltoc.pod [.lib.pod]perltodo.pod [.lib.pod]perltooc.pod [.lib.pod]perltoot.pod
pod20 = [.lib.pod]perltrap.pod [.lib.pod]perltru64.pod [.lib.pod]perltw.pod [.lib.pod]perlunicode.pod [.lib.pod]perluniintro.pod [.lib.pod]perlutil.pod
pod21 = [.lib.pod]perluts.pod [.lib.pod]perlvar.pod [.lib.pod]perlvmesa.pod [.lib.pod]perlvms.pod [.lib.pod]perlvos.pod [.lib.pod]perlwin32.pod
pod22 = [.lib.pod]perlxs.pod [.lib.pod]perlxstut.pod
pod = $(pod0) $(pod1) $(pod2) $(pod3) $(pod4) $(pod5) $(pod6) $(pod7) $(pod8) $(pod9) $(pod10) $(pod11) $(pod12) $(pod13) $(pod14) $(pod15) $(pod16) $(pod17) $(pod18) $(pod19) $(pod20) $(pod21) $(pod22)

perlpods : $(pod)
	@ $(NOOP)

archcorefiles : $(ac) $(ARCHAUTO)time.stamp
	@ $(NOOP)

[.lib]re.pm  : [.ext.re]re.pm
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib]

vmspipe.com : [.vms]vmspipe.com
	Copy/NoConfirm/Log $(MMS$SOURCE) []

miniperl : $(DBG)miniperl$(E)  vmspipe.com
	@ Continue
$(MINIPERL_EXE) :  miniperlmain$(O), $(DBG)libperl$(OLB) $(CRTL)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MMS$TARGET) miniperlmain$(O), $(DBG)libperl$(OLB)/Library/Include=globals $(CRTLOPTS)
$(DBG)miniperl$(E) :  miniperlmain$(O), $(DBG)libperl$(OLB) $(CRTL)
	Link $(LINKFLAGS)/Trace/Exe=$(MMS$TARGET) miniperlmain$(O),$(DBG)libperl$(OLB)/Library/Include=globals  $(CRTLOPTS)

$(DBG)libperl$(OLB) : $(obj)
	@ If F$Search("$(MMS$TARGET)").eqs."" Then Library/Object/Create $(MMS$TARGET)
	Library/Object/Replace $(MMS$TARGET) $(MMS$SOURCE_LIST)

perlmain.c : miniperlmain.c $(MINIPERL_EXE) [.vms]writemain.pl
	$(MINIPERL) [.VMS]Writemain.pl "$(EXT)"

.ifdef __DEBUG__
# Link an extra perl that doesn't invoke the debugger
perl : $(DBG)perl$(E)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoCross/NoFull/Exe=N$(DBG)perl$(E) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
.else
perl : $(DBG)perl$(E)
	@ Continue
.endif

$(DBG)perl$(E) : perlmain$(O), $(DBG)perlshr$(E), $(MINIPERL_EXE)
	@ @[.vms]genopt "PerlShr.Opt/Write" "|" "''F$Environment("Default")'$(DBG)PerlShr$(E)/Share"
.ifdef MT
	Link $(LINKFLAGS)/Exe=$(MMS$TARGET) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)/THREAD=(MULTI,UPCALL)
.else
	Link $(LINKFLAGS)/Exe=$(MMS$TARGET) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
.endif

$(DBG)perlshr$(E) : $(DBG)libperl$(OLB) $(extobj) $(DBG)perlshr_xtras.ts
	Link $(LINKFLAGS)/Share=$(MMS$TARGET) $(extobj) []$(DBG)perlshr_bld.opt/Option, perlshr_attr.opt/Option

# The following files are built in one go by gen_shrfls.pl:
#  perlshr_attr.opt, $(DBG)perlshr_bld.opt - VAX and AXP
#  perlshr_gbl*.mar, perlshr_gbl*$(O) - VAX only
# The song and dance with gen_shrfls.opt accommodates DCL's 255 character
# line length limit.
.ifdef PIPES_BROKEN
# This is a backup target used only with older versions of the DECCRTL which
# can't deal with pipes properly.  See ReadMe.VMS for details.
$(DBG)perlshr_xtras.ts : perl.h config.h vmsish.h proto.h [.vms]gen_shrfls.pl $(MINIPERL_EXE) $(MAKEFILE) $(CRTL)
	$(CC) $(CFLAGS)/NoObject/NoList/PreProcess=perl.i perl.h
	@ $(MINIPERL) -e "print join('|',@ARGV),'|';" "~~NOCC~~perl.i~~$(CC)$(CFLAGS)" >gen_shrfls.opt
	@ $(MINIPERL) -e "print join('|',@ARGV);" "$(O)" "$(DBG)" "$(OLB)" "$(EXT)" "$(CRTL)" >>gen_shrfls.opt
	$(MINIPERL) [.vms]gen_shrfls.pl -f gen_shrfls.opt
	@ Delete/NoLog/NoConfirm perl.i;, gen_shrfls.opt;
	@ If F$Search("$(DBG)perlshr_xtras.ts").nes."" Then Delete/NoLog/NoConfirm $(DBG)perlshr_xtras.ts;*
	@ Copy _NLA0: $(DBG)perlshr_xtras.ts
.else
$(DBG)perlshr_xtras.ts : perl.h config.h vmsish.h proto.h [.vms]gen_shrfls.pl $(MINIPERL_EXE) $(MAKEFILE) $(CRTL)
	@ $(MINIPERL) -e "print join('|',@ARGV),'|';" "$(CC)$(CFLAGS)" >gen_shrfls.opt
	@ $(MINIPERL) -e "print join('|',@ARGV);" "$(O)" "$(DBG)" "$(OLB)" "$(EXT)" "$(CRTL)" >>gen_shrfls.opt
	$(MINIPERL) [.vms]gen_shrfls.pl -f gen_shrfls.opt
	@ Delete/NoLog/NoConfirm gen_shrfls.opt;
	@ If F$Search("$(DBG)perlshr_xtras.ts").nes."" Then Delete/NoLog/NoConfirm $(DBG)perlshr_xtras.ts;*
	@ Copy _NLA0: $(DBG)perlshr_xtras.ts
.endif

$(ARCHDIR)Config.pm : [.lib]Config.pm
	Create/Directory $(ARCHDIR)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHDIR)

[.lib]Config.pm : config.h $(MINIPERL_EXE)
	$(MINIPERL) ConfigPM.

$(ARCHDIR)vmspipe.com : vmspipe.com
        Copy $(MMS$SOURCE) $(ARCHDIR)

[.ext.dynaloader]dl_vms.c : [.ext.dynaloader]dl_vms.xs $(ARCHDIR)Config.pm [.lib.ExtUtils]XSSymSet.pm $(MINIPERL_EXE)
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$TARGET)

[.ext.dynaloader]dl_vms$(O) : [.ext.dynaloader]dl_vms.c
	$(CC) $(CFLAGS) /Include=([],[.ext.dynaloader])/Object=$(MMS$TARGET) $(MMS$SOURCE)

[.lib]DynaLoader.pm : [.ext.Dynaloader]Dynaloader.pm
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib]
	@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@ $(MINIPERL) -e "use AutoSplit; autosplit_lib_modules(@ARGV)" [.lib]DynaLoader.pm

[.lib]XSLoader.pm : [.ext.Dynaloader]XSLoader.pm
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib]
	@ If F$Search("[.lib]auto.dir").eqs."" Then Create/Directory [.lib.auto]
	@ $(MINIPERL) -e "use AutoSplit; autosplit_lib_modules(@ARGV)" [.lib]XSLoader.pm

[.ext.dynaloader]dynaloader.pm : [.ext.dynaloader]dynaloader_pm.pl
	$(MINIPERL) $(MMS$SOURCE)
	@ Rename/Log dynaloader.pm [.ext.dynaloader]

[.ext.dynaloader]xsloader.pm : [.ext.dynaloader]xsloader_pm.pl
	$(MINIPERL) $(MMS$SOURCE)
	@ Rename/Log xsloader.pm [.ext.dynaloader]

dynext : $(LIBPREREQ) $(DBG)perlshr$(E) preplibrary
       @make_ext "$(MINIPERL_EXE)" "$(MMS)"

[.lib]lib.pm : [.lib]lib_pm.PL
	$(MINIPERL) $(MMS$SOURCE)

[.lib.VMS]Filespec.pm : [.vms.ext]Filespec.pm
	@ If F$Search("[.lib]VMS.Dir").eqs."" Then Create/Directory [.lib.VMS]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.VMS]

[.lib.ExtUtils]XSSymSet.pm : [.vms.ext]XSSymSet.pm
	@ If F$Search("[.lib]ExtUtils.Dir").eqs."" Then Create/Directory [.lib.ExtUtils]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.ExtUtils]

[.lib.pod]perldoc.com : [.utils]perldoc.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]perldoc.com [.lib.pod]

[.lib.ExtUtils]Miniperl.pm : Minimod.PL miniperlmain.c $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE) >$(MMS$TARGET)

[.utils]perlivp.com : [.utils]perlivp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]cpan.com : [.utils]cpan.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]c2ph.com : [.utils]c2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]dprofpp.com : [.utils]dprofpp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]enc2xs.com : [.utils]enc2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]h2ph.com : [.utils]h2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]h2xs.com : [.utils]h2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]libnetcfg.com : [.utils]libnetcfg.PL $(ARCHDIR)Config.pm
       $(MINIPERL) $(MMS$SOURCE)

[.lib]perlbug.com : [.utils]perlbug.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]perlbug.com [.lib]

[.lib]perlcc.com : [.utils]perlcc.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]perlcc.com [.lib]

[.utils]piconv.com : [.utils]piconv.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.utils]pl2pm.com : [.utils]pl2pm.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.lib]splain.com : [.utils]splain.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]splain.com [.lib]

[.x2p]find2perl.com : [.x2p]find2perl.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.x2p]s2p.com : [.x2p]s2p.PL $(ARCHDIR)Config.pm
	$(MINIPERL) $(MMS$SOURCE)

[.lib.ExtUtils]xsubpp.com : [.lib.ExtUtils]xsubpp 
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.ExtUtils]xsubpp.com

# Rename catches problem with some DECC versions in which object file is
# placed in current default dir, not same one as source file.
[.x2p]$(DBG)a2p$(E) : [.x2p]a2p$(O), [.x2p]hash$(O), [.x2p]str$(O), [.x2p]util$(O), [.x2p]walk$(O)
	@ If F$Search("hash$(O)").nes."" Then Rename/NoLog hash$(O),str$(O),util$(O),walk$(O) [.x2p]
	Link $(LINKFLAGS) /Exe=$(MMS$TARGET) $(MMS$SOURCE_LIST) $(CRTLOPTS)

# Accommodate buggy cpp in some version of DECC, which chokes on illegal
# filespec "y.tab.c", and broken gcc cpp, which doesn't start #include ""
# search in same dir as source file
[.x2p]a2p$(O) : [.x2p]a2p.c [.x2p]a2py.c [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h config.h handy.h vmsish.h $(SOCKH) $(MINIPERL_EXE)
	$(MINIPERL) -pe "s/^#line\s+(\d+)\s+\Q""y.tab.c""/#line $1 ""y_tab.c""/;" $(MMS$SOURCE) >$(MMS$TARGET_NAME)_vms.c
	$(CC) $(X2PCFLAGS) /Object=$(MMS$TARGET)/Include=([.x2p],[]) $(MMS$TARGET_NAME)_vms.c
	Delete/Log/NoConfirm $(MMS$TARGET_NAME)_vms.c;

# gcc cpp broken -- doesn't look in directory of source file for #include ""
.ifdef GNUC
[.x2p]hash$(O) : [.x2p]hash.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)

[.x2p]str$(O) : [.x2p]str.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)

[.x2p]util$(O) : [.x2p]util.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)

[.x2p]walk$(O) : [.x2p]walk.c
	$(CC) $(X2PCFLAGS) /Include=[.x2p] $(MMS$SOURCE)
.endif

[.lib.pod]pod2html.com : [.pod]pod2html.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2html.com [.lib.pod]

[.lib.pod]pod2latex.com : [.pod]pod2latex.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2latex.com [.lib.pod]

[.lib.pod]pod2man.com : [.pod]pod2man.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2man.com [.lib.pod]

[.lib.pod]pod2text.com : [.pod]pod2text.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2text.com [.lib.pod]

[.lib.pod]podchecker.com : [.pod]podchecker.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]podchecker.com [.lib.pod]

[.lib.pod]pod2usage.com : [.pod]pod2usage.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]pod2usage.com [.lib.pod]

[.lib.pod]podselect.com : [.pod]podselect.PL $(ARCHDIR)Config.pm
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	$(MINIPERL) $(MMS$SOURCE)
	Copy/NoConfirm/Log [.pod]podselect.com [.lib.pod]

preplibrary : $(MINIPERL_EXE) $(LIBPREREQ) 
	@ Write Sys$Output "Autosplitting Perl library . . ."
	@ Create/Directory [.lib.auto]
	@ $(MINIPERL) -e "use AutoSplit; autosplit_lib_modules(@ARGV)" [.lib]*.pm [.lib.*]*.pm

[.lib.pod]perl.pod : [.pod]perl.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl5004delta.pod : [.pod]perl5004delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl5005delta.pod : [.pod]perl5005delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl561delta.pod : [.pod]perl561delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl56delta.pod : [.pod]perl56delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl570delta.pod : [.pod]perl570delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl571delta.pod : [.pod]perl571delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl572delta.pod : [.pod]perl572delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl573delta.pod : [.pod]perl573delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl581delta.pod : [.pod]perl581delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perl58delta.pod : [.pod]perl58delta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlaix.pod : [.pod]perlaix.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlamiga.pod : [.pod]perlamiga.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlapi.pod : [.pod]perlapi.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlapio.pod : [.pod]perlapio.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlapollo.pod : [.pod]perlapollo.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlartistic.pod : [.pod]perlartistic.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlbeos.pod : [.pod]perlbeos.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlbook.pod : [.pod]perlbook.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlboot.pod : [.pod]perlboot.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlbot.pod : [.pod]perlbot.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlbs2000.pod : [.pod]perlbs2000.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcall.pod : [.pod]perlcall.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlce.pod : [.pod]perlce.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcheat.pod : [.pod]perlcheat.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlclib.pod : [.pod]perlclib.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcn.pod : [.pod]perlcn.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcompile.pod : [.pod]perlcompile.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlcygwin.pod : [.pod]perlcygwin.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldata.pod : [.pod]perldata.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldbmfilter.pod : [.pod]perldbmfilter.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldebguts.pod : [.pod]perldebguts.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldebtut.pod : [.pod]perldebtut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldebug.pod : [.pod]perldebug.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldelta.pod : [.pod]perldelta.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldgux.pod : [.pod]perldgux.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldiag.pod : [.pod]perldiag.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldoc.pod : [.pod]perldoc.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldos.pod : [.pod]perldos.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perldsc.pod : [.pod]perldsc.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlebcdic.pod : [.pod]perlebcdic.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlembed.pod : [.pod]perlembed.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlepoc.pod : [.pod]perlepoc.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq.pod : [.pod]perlfaq.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq1.pod : [.pod]perlfaq1.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq2.pod : [.pod]perlfaq2.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq3.pod : [.pod]perlfaq3.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq4.pod : [.pod]perlfaq4.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq5.pod : [.pod]perlfaq5.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq6.pod : [.pod]perlfaq6.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq7.pod : [.pod]perlfaq7.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq8.pod : [.pod]perlfaq8.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfaq9.pod : [.pod]perlfaq9.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfilter.pod : [.pod]perlfilter.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfork.pod : [.pod]perlfork.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlform.pod : [.pod]perlform.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfreebsd.pod : [.pod]perlfreebsd.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlfunc.pod : [.pod]perlfunc.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlgpl.pod : [.pod]perlgpl.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlguts.pod : [.pod]perlguts.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlhack.pod : [.pod]perlhack.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlhist.pod : [.pod]perlhist.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlhpux.pod : [.pod]perlhpux.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlhurd.pod : [.pod]perlhurd.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlintern.pod : [.pod]perlintern.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlintro.pod : [.pod]perlintro.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perliol.pod : [.pod]perliol.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlipc.pod : [.pod]perlipc.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlirix.pod : [.pod]perlirix.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perljp.pod : [.pod]perljp.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlko.pod : [.pod]perlko.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perllexwarn.pod : [.pod]perllexwarn.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perllocale.pod : [.pod]perllocale.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perllol.pod : [.pod]perllol.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmachten.pod : [.pod]perlmachten.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmacos.pod : [.pod]perlmacos.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmacosx.pod : [.pod]perlmacosx.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmint.pod : [.pod]perlmint.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmod.pod : [.pod]perlmod.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmodinstall.pod : [.pod]perlmodinstall.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmodlib.pod : [.pod]perlmodlib.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmodstyle.pod : [.pod]perlmodstyle.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlmpeix.pod : [.pod]perlmpeix.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlnetware.pod : [.pod]perlnetware.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlnewmod.pod : [.pod]perlnewmod.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlnumber.pod : [.pod]perlnumber.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlobj.pod : [.pod]perlobj.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlop.pod : [.pod]perlop.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlopentut.pod : [.pod]perlopentut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlos2.pod : [.pod]perlos2.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlos390.pod : [.pod]perlos390.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlos400.pod : [.pod]perlos400.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlothrtut.pod : [.pod]perlothrtut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlpacktut.pod : [.pod]perlpacktut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlplan9.pod : [.pod]perlplan9.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlpod.pod : [.pod]perlpod.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlpodspec.pod : [.pod]perlpodspec.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlport.pod : [.pod]perlport.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlqnx.pod : [.pod]perlqnx.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlre.pod : [.pod]perlre.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlref.pod : [.pod]perlref.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlreftut.pod : [.pod]perlreftut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlrequick.pod : [.pod]perlrequick.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlreref.pod : [.pod]perlreref.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlretut.pod : [.pod]perlretut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlrun.pod : [.pod]perlrun.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlsec.pod : [.pod]perlsec.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlsolaris.pod : [.pod]perlsolaris.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlstyle.pod : [.pod]perlstyle.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlsub.pod : [.pod]perlsub.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlsyn.pod : [.pod]perlsyn.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlthrtut.pod : [.pod]perlthrtut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltie.pod : [.pod]perltie.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltoc.pod : [.pod]perltoc.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltodo.pod : [.pod]perltodo.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltooc.pod : [.pod]perltooc.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltoot.pod : [.pod]perltoot.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltrap.pod : [.pod]perltrap.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltru64.pod : [.pod]perltru64.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perltw.pod : [.pod]perltw.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlunicode.pod : [.pod]perlunicode.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perluniintro.pod : [.pod]perluniintro.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlutil.pod : [.pod]perlutil.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perluts.pod : [.pod]perluts.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlvar.pod : [.pod]perlvar.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlvmesa.pod : [.pod]perlvmesa.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlvms.pod : [.vms]perlvms.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlvos.pod : [.pod]perlvos.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlwin32.pod : [.pod]perlwin32.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlxs.pod : [.pod]perlxs.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

[.lib.pod]perlxstut.pod : [.pod]perlxstut.pod
	@ If F$Search("[.lib]pod.dir").eqs."" Then Create/Directory [.lib.pod]
	Copy/NoConfirm/Log $(MMS$SOURCE) [.lib.pod]

install.html : $(perlpods)
	@ @perl_setup.com
	@ If F$Search("perl_root:[lib]html.dir").eqs."" Then Create/Directory perl_root:[lib.html]
	$(MINIPERL) installhtml. "--podroot=. --recurse --htmldir=/perl_root/lib/html --htmlroot=.. --verbose"

printconfig :
        @ @[.vms]make_command $(MMS) $(MMSQUALIFIERS) $(MMSTARGETS)
        @ @[.vms]myconfig "$(CC)" "$(CFLAGS)" "$(LINKFLAGS)" "$(LIBS1)" "$(FULLLIBS2)" "$(SOCKLIB)" "$(EXT)" "$(DBG)"

.ifdef SOCKET

vmsish.h : $(SOCKH)

$(SOCKO) : $(SOCKC) $(h)

$(SOCKC) : [.vms]$(SOCKC)
	Copy/NoConfirm/Log $(MMS$SOURCE) []

$(SOCKH) : [.vms]$(SOCKH)
	Copy/NoConfirm/Log $(MMS$SOURCE) []

.endif

# The following files are generated automatically
#	keywords.h:	keywords.pl
#	opcode.h:	opcode.pl
#	opnames.h:	opcode.pl
#	pp_proto.h:	opcode.pl
#	pp.sym:		opcode.pl
#	embed.h:  	embed.pl  [* needs pp.sym generated by opcode.pl! *]
#	embedvar.h:  	embed.pl  [* needs pp.sym generated by opcode.pl! *]
#	ext/ByteLoader/byterun.h:	bytecode.pl
#	ext/ByteLoader/byterun.c:	bytecode.pl
#	ext/B/Asmdata.pm:	bytecode.pl
#	global.sym:	embed.pl
#	regnodes.h:	regcomp.pl
#	warnings.h lib/warnings.pm:	warnings.pl
# The correct versions should be already supplied with the perl kit,
# in case you don't have perl available.
# To force them to run, type
#	MMS regen_headers
regen_headers :
	$(INSTPERL) keywords.pl
	$(INSTPERL) opcode.pl
	$(INSTPERL) embed.pl
	$(INSTPERL) bytecode.pl
	$(INSTPERL) regcomp.pl
	$(INSTPERL) warnings.pl

# VMS uses modified perly.[ch] with tags for globaldefs if using DEC compiler
perly.c : [.vms]perly_c.vms
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)
perly.h : [.vms]perly_h.vms
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)

.ifdef LINK_ONLY
.else
perly$(O) : perly.c, perly.h, $(h)
.endif

[.t.lib]vmsfspec.t : [.vms.ext]filespec.t
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)

[.t.lib]vms_dclsym.t : [.vms.ext.DCLsym]test.pl
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)

[.t.lib]vms_stdio.t : [.vms.ext.Stdio]test.pl
	Copy/NoConfirm/Log $(MMS$SOURCE) $(MMS$TARGET)

check : test
	@ Continue

test : all [.t.lib]vmsfspec.t [.t.lib]vms_dclsym.t [.t.lib]vms_stdio.t
	- @[.VMS]Test.Com "$(E)" "$(__DEBUG__)"
	@ $(MINIPERL) -e "print ""Ran tests"";" > [.t]rantests.

# install ought not need a source, but it doesn't work if one's not
# there. Go figure...
install : $(MINIPERL_EXE)
	@ @perl_setup.com
	If F$TrnLnm("Sys") .nes. "" Then Deass SYS
	$(MINIPERL) installperl

archify : all
	@ Write Sys$Output "Moving files to architecture-specific locations for $(ARCH)"
	archroot = "$(ARCHAUTO)" - "]" + "...]"
	Backup/Log/Verify [.lib.auto...]*.*;/Exclude=(*.al,*.ix) 'archroot'/New_Version
	Delete/Log/NoConfirm [.lib.auto...]*.*;*/exclude=(*.al,*.ix,*.dir)
	Delete/Log/NoConfirm [.lib]Config.pm;*
	Copy/Log/NoConfirm *$(E);,[.x2p]$(DBG)a2p$(E); $(ARCHDIR)
	Delete/Log/NoConfirm Perl*$(E);*,[.x2p]$(DBG)a2p$(E);*
	@ QUALIFIERS := $(MMSQUALIFIERS)
	@ QUALIFIERS = QUALIFIERS - """" - """"
	@ Write Sys$Output "Architecture-specific setup completed."
	@ Write Sys$Output "Before building for another architecture, be sure to"
	@ Write Sys$Output "    1. $(MMS)''QUALIFIERS' clean"
	@ Write Sys$Output "    2. Delete Miniperl$(E)"

# CORE subset for MakeMaker, so we can build Perl without sources
# Should move to VMS installperl when we get one
.ifdef SOCKET
$(SOCKARCH) : $(SOCKH)
       @ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
       Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
.endif
$(ARCHCORE)av.h : av.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)cc_runtime.h : cc_runtime.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)config.h : config.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)cop.h : cop.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)cv.h : cv.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)embed.h : embed.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)embedvar.h : embedvar.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)EXTERN.h : EXTERN.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)fakethr.h : fakethr.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)form.h : form.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)gv.h : gv.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)handy.h : handy.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)hv.h : hv.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)INTERN.h : INTERN.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)intrpvar.h : intrpvar.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)iperlsys.h : iperlsys.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)keywords.h : keywords.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)mg.h : mg.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)nostdio.h : nostdio.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)op.h : op.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)opcode.h : opcode.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)opnames.h : opnames.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)pad.h : pad.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)patchlevel.h : patchlevel.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perl.h : perl.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlapi.h : perlapi.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlio.h : perlio.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlsdio.h : perlsdio.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlsfio.h : perlsfio.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlvars.h : perlvars.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perly.h : perly.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)pp.h : pp.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)pp_proto.h : pp_proto.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)proto.h : proto.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
.ifdef THREADED
$(ARCHCORE)reentr.h : reentr.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
.endif
$(ARCHCORE)regcomp.h : regcomp.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)regexp.h : regexp.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)regnodes.h : regnodes.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)scope.h : scope.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)sv.h : sv.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)thrdvar.h : thrdvar.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)thread.h : thread.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)utf8.h : utf8.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)util.h : util.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)vmsish.h : vmsish.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)warnings.h : warnings.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)xsub.h : xsub.h
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)$(DBG)libperl$(OLB) : $(DBG)libperl$(OLB) $(DBG)perlshr_xtras.ts
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlshr_attr.opt : $(DBG)perlshr_xtras.ts
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log perlshr_attr.opt $(ARCHCORE)
$(ARCHCORE)$(DBG)perlshr_bld.opt : $(DBG)perlshr_xtras.ts
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(DBG)perlshr_bld.opt $(ARCHCORE)
$(ARCHAUTO)time.stamp :
	@ If F$Search("$(ARCHDIR)auto.dir").eqs."" Then Create/Directory $(ARCHAUTO)
	@ If F$Search("$(MMS$TARGET)").eqs."" Then Copy/NoConfirm _NLA0: $(MMS$TARGET)

.ifdef LINK_ONLY
.else
# We need an action line here for broken older versions of MMS which
# otherwise conclude that they should be compiling [.x2p]utils.c :-(
#util$(O) : util.c
#	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
# AUTOMATICALLY GENERATED MAKE DEPENDENCIES--PUT NOTHING BELOW THIS LINE
.ifdef SOCKET
$(SOCKO) : $(SOCKC) $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
.endif
av$(O) : av.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
deb$(O) : deb.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doio$(O) : doio.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doop$(O) : doop.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
dump$(O) : dump.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
globals$(O) : globals.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
gv$(O) : gv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
hv$(O) : hv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
locale$(O) : locale.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
malloc$(O) : malloc.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
mg$(O) : mg.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
miniperlmain$(O) : miniperlmain.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
numeric$(O) : numeric.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
op$(O) : op.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pad$(O) : pad.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perl$(O) : perl.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlapi$(O) : perlapi.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlio$(O) : perlio.c config.h $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlmain$(O) : perlmain.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perly$(O) : perly.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp$(O) : pp.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_ctl$(O) : pp_ctl.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_hot$(O) : pp_hot.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_pack$(O) : pp_pack.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_sort$(O) : pp_sort.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_sys$(O) : pp_sys.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
reentr$(O) : reentr.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
regcomp$(O) : regcomp.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
regexec$(O) : regexec.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
run$(O) : run.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
scope$(O) : scope.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
sv$(O) : sv.c 
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
taint$(O) : taint.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
toke$(O) : toke.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
universal$(O) : universal.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
utf8$(O) : utf8.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
util$(O) : util.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
vms$(O) : vms.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
xsutils$(O) : xsutils.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)

[.x2p]hash$(O) : [.x2p]hash.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

[.x2p]str$(O) : [.x2p]str.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

[.x2p]util$(O) : [.x2p]util.c [.x2p]EXTERN.h [.x2p]INTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

[.x2p]walk$(O) : [.x2p]walk.c [.x2p]EXTERN.h [.x2p]a2p.h [.x2p]hash.h [.x2p]str.h [.x2p]util.h config.h handy.h vmsish.h $(SOCKH)
	$(CC) $(X2PCFLAGS) $(MMS$SOURCE)

# End of automatically generated make dependencies
.endif # !LINK_ONLY

vmsish.h : [.vms]vmsish.h
	Copy/Log/NoConfirm [.vms]vmsish.h []

vms.c : [.vms]vms.c
	Copy/Log/Noconfirm [.vms]vms.c []

$(CRTL) : $(MAKEFILE)
	@ @[.vms]genopt "$(CRTL)/Write" "|" "$(LIBS1)|$(FULLLIBS2)|$(SOCKLIB)"


ok : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)"

okfile : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)" "-F" perl.ok

nok : $(utils)
	@ write sys$output " "
	@ write sys$output " Please type the command:"
	@ write sys$output " "
	@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"""

nokfile : $(utils)
	@ write sys$output " "
	@ write sys$output " Please type the command:"
	@ write sys$output " "
	@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"" ""-F"" perl.nok"


cleanlis :
	- If F$Search("*.Lis").nes."" Then Delete/NoConfirm/Log *.Lis;*
	- If F$Search("*.CPP").nes."" Then Delete/NoConfirm/Log *.CPP;*
	- If F$Search("*.Map").nes."" Then Delete/NoConfirm/Log *.Map;*

cleantest :
        - If F$Search("[.t]Perl.").nes."" Then Delete/NoConfirm/Log [.t]Perl.;*
        - If F$Search("[.t]VMSPIPE.COM").nes."" Then Delete/NoConfirm/Log [.t]VMSPIPE.COM;*
        - If F$Search("[.t]Echo.exe").nes."" Then Delete/NoConfirm/Log [.t]Echo.exe;*

tidy : cleanlis
	- If F$Search("[...]*.Opt;-1").nes."" Then Purge/NoConfirm/Log [...]*.Opt
	- If F$Search("[...]*$(O);-1").nes."" Then Purge/NoConfirm/Log [...]*$(O)
	- If F$Search("[...]*$(E);-1").nes."" Then Purge/NoConfirm/Log [...]*$(E)
	- If F$Search("Config.H;-1").nes."" Then Purge/NoConfirm/Log Config.H
	- If F$Search("Config.SH;-1").nes."" Then Purge/NoConfirm/Log Config.SH
	- If F$Search("perly.c;-1").nes."" Then Purge/NoConfirm/Log perly.c
	- If F$Search("perly.h;-1").nes."" Then Purge/NoConfirm/Log perly.h
	- If F$Search("VMSish.H;-1").nes."" Then Purge/NoConfirm/Log VMSish.H
	- If F$Search("VMS.C;-1")   .nes."" Then Purge/NoConfirm/Log VMS.C
	- If F$Search("Perlmain.C;-1")   .nes."" Then Purge/NoConfirm/Log Perlmain.C
	- If F$Search("Perlshr_Gbl*.Mar;-1")   .nes."" Then Purge/NoConfirm/Log Perlshr_Gbl*.Mar
	- If F$Search("[.Ext.DynaLoader]DL_VMS$(O);-1").nes."" Then Purge/NoConfirm/Log [.Ext.DynaLoader]DL_VMS$(O)
	- If F$Search("[.Ext.DynaLoader]DL_VMS.C;-1").nes."" Then Purge/NoConfirm/Log [.Ext.DynaLoader]DL_VMS.C
	- If F$Search("[.Ext.Opcode...];-1").nes."" Then Purge/NoConfirm/Log [.Ext.Opcode]
	- If F$Search("[.VMS.Ext...]*.C;-1").nes."" Then Purge/NoConfirm/Log [.VMS.Ext...]*.C
	- If F$Search("[.VMS.Ext...]*$(O);-1").nes."" Then Purge/NoConfirm/Log [.VMS.Ext...]*$(O)
	- If F$Search("[.Lib.Auto...]*.al;-1").nes."" Then Purge/NoConfirm/Log [.Lib.Auto...]*.al
	- If F$Search("[.Lib.Auto...]autosplit.ix;-1").nes."" Then Purge/NoConfirm/Log [.Lib.Auto...]autosplit.ix
	- If F$Search("[.Lib]DynaLoader.pm;-1").nes."" Then Purge/NoConfirm/Log [.Lib]DynaLoader.pm
	- If F$Search("[.Lib]XSLoader.pm;-1").nes."" Then Purge/NoConfirm/Log [.Lib]XSLoader.pm
	- If F$Search("[.Lib]Config.pm;-1").nes."" Then Purge/NoConfirm/Log [.Lib]Config.pm
	- If F$Search("$(ARCHDIR)Config.pm;-1").nes."" Then Purge/NoConfirm/Log $(ARCHDIR)Config.pm
	- If F$Search("[.lib.ExtUtils]Miniperl.pm").nes."" Then Purge/NoConfirm/Log [.lib.ExtUtils]Miniperl.pm
	- If F$Search("[.lib.ExtUtils]XSSymSet.pm").nes."" Then Purge/NoConfirm/Log [.lib.ExtUtils]XSSymSet.pm
	- If F$Search("[.Lib.VMS]*.*;-1").nes."" Then Purge/NoConfirm/Log [.Lib.VMS]*.*
	- If F$Search("[.Lib.Pod]*.Pod;-1").nes."" Then Purge/NoConfirm/Log [.Lib.Pod]*.Pod
	- If F$Search("$(ARCHCORE)*.*").nes."" Then Purge/NoConfirm/Log $(ARCHCORE)*.*
	- If F$Search("[.lib]*.com;-1").nes."" Then Purge/NoConfirm/Log [.lib]*.com
	- If F$Search("[.pod]*.com;-1").nes."" Then Purge/NoConfirm/Log [.pod]*.com
	- If F$Search("[.utils]*.com;-1").nes."" Then Purge/NoConfirm/Log [.utils]*.com
	- If F$Search("[.x2p]*.com;-1").nes."" Then Purge/NoConfirm/Log [.x2p]*.com
	- If F$Search("[.lib.pod]*.com;-1").nes."" Then Purge/NoConfirm/Log [.lib.pod]*.com

clean : tidy cleantest
	- @make_ext "$(MINIPERL_EXE)" "$(MMS)" clean
	- If F$Search("*.Opt").nes."" Then Delete/NoConfirm/Log *.Opt;*/Exclude=PerlShr_*.Opt
	- If F$Search("[...]*$(O);*") .nes."" Then Delete/NoConfirm/Log [...]*$(O);*
	- If F$Search(F$Parse("Sys$Disk:[]","$(SOCKH)")).nes."" Then Delete/NoConfirm/Log $(SOCKH);*
	- If F$Search(F$Parse("Sys$Disk:[]","$(SOCKC)")).nes."" Then Delete/NoConfirm/Log $(SOCKC);*
	- If F$Search("perly.c").nes."" Then Delete/NoConfirm/Log perly.c;*
	- Copy [.vms]perly_c.vms []perly.c
	- If F$Search("perly.h").nes."" Then Delete/NoConfirm/Log perly.h;*
	- Copy [.vms]perly_h.vms []perly.h
	- If F$Search("VMSish.H").nes."" Then Delete/NoConfirm/Log VMSish.H;*
	- If F$Search("VMS.C")   .nes."" Then Delete/NoConfirm/Log VMS.C;*
	- If F$Search("Perlmain.C")   .nes."" Then Delete/NoConfirm/Log Perlmain.C;*
	- If F$Search("Perlshr_Gbl*.Mar")   .nes."" Then Delete/NoConfirm/Log Perlshr_Gbl*.Mar;*
	- If F$Search("*.TS").nes."" Then Delete/NoConfirm/Log *.TS;*
	- If F$Search("[.Ext.DynaLoader]DL_VMS$(O)").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DL_VMS$(O);*
	- If F$Search("[.Ext.DynaLoader]DL_VMS.C").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DL_VMS.C;*
	- If F$Search("[.Ext.DynaLoader]DynaLoader.pm").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DynaLoader.pm;*
	- If F$Search("[.Ext.DynaLoader]XSLoader.pm").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]XSLoader.pm;*
	- If F$Search("[.VMS.Ext...]*.C").nes."" Then Delete/NoConfirm/Log [.VMS.Ext...]*.C;*
	- If F$Search("[.VMS.Ext...]*$(O)").nes."" Then Delete/NoConfirm/Log [.VMS.Ext...]*$(O);*
	- If F$Search("[.pod]*.com").nes."" Then Delete/NoConfirm/Log [.pod]*.com;*
	- @extra_pods CLEAN

realclean : clean
	- @make_ext "$(MINIPERL_EXE)" "$(MMS)" realclean
	- If F$Search("*$(OLB)").nes."" Then Delete/NoConfirm/Log *$(OLB);*
	- If F$Search("*.Opt").nes."" Then Delete/NoConfirm/Log *.Opt;*
	- If F$Search("Config.H").nes."" Then Delete/NoConfirm/Log Config.H;*
	- If F$Search("Config.SH").nes."" Then Delete/NoConfirm/Log Config.SH;*
	- $(MINIPERL) -e "use File::Path; rmtree(\@ARGV,1,0);" config
	- If F$Search("Descrip.MMS").nes."" Then Delete/NoConfirm/Log Descrip.MMS;*
	- If F$Search("make_ext.Com").nes."" Then Delete/NoConfirm/Log make_ext.Com;*
	- If F$Search("extra_pods.Com").nes."" Then Delete/NoConfirm/Log extra_pods.Com;*
	- $(MINIPERL) -e "use File::Path; rmtree(['lib/auto','lib/VMS','lib/$(ARCH)'],1,0);"
	- If F$Search("*.TS").nes."" Then Delete/NoConfirm/Log *.TS;*
	- If F$Search("[.Lib]DynaLoader.pm").nes."" Then Delete/NoConfirm/Log [.Lib]DynaLoader.pm;*
	- If F$Search("[.Lib]XSLoader.pm").nes."" Then Delete/NoConfirm/Log [.Lib]XSLoader.pm;*
	- If F$Search("[.Lib]Config.pm").nes."" Then Delete/NoConfirm/Log [.Lib]Config.pm;*
	- If F$Search("[.Lib]*.com").nes."" Then Delete/NoConfirm/Log [.Lib]*.com;*
	- If F$Search("[.pod]*.com").nes."" Then Delete/NoConfirm/Log [.pod]*.com;*
	- If F$Search("[.utils]*.com").nes."" Then Delete/NoConfirm/Log [.utils]*.com;*
	- If F$Search("[.x2p]*.com").nes."" Then Delete/NoConfirm/Log [.x2p]*.com;*
	- If F$Search("$(ARCHDIR)Config.pm").nes."" Then Delete/NoConfirm/Log $(ARCHDIR)Config.pm;*
	- If F$Search("[.lib.ExtUtils]Miniperl.pm").nes."" Then Delete/NoConfirm/Log [.lib.ExtUtils]Miniperl.pm;*
	- If F$Search("[.lib.ExtUtils]XSSymSet.pm").nes."" Then Delete/NoConfirm/Log [.lib.ExtUtils]XSSymSet.pm;*
	- If F$Search("[.lib.pod]*.pod").nes."" Then Delete/NoConfirm/Log [.lib.pod]*.pod;*
	- If F$Search("[.lib.pod]perldoc.com").nes."" Then Delete/NoConfirm/Log [.lib.pod]perldoc.com;*
	- If F$Search("[.utils]perlivp.com").nes."" Then Delete/NoConfirm/Log [.utils]perlivp.com;*
	- If F$Search("[.lib.pod]pod2*.com").nes."" Then Delete/NoConfirm/Log [.lib.pod]pod2*.com;*
	- If F$Search("[.t.lib]vms*.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vms*.t;*
	- If F$Search("[...]*$(E)").nes."" Then Delete/NoConfirm/Log [...]*$(E);*
	- If F$Search("[.vms]Perl_Setup.Com").nes."" Then Delete/NoConfirm/Log [.vms]Perl_Setup.Com;*
	- If F$Search("[.t]rantests.").nes."" Then Delete/NoConfirm/Log [.t]rantests.;*
	- If F$Search("[.t.lib]vmsfspec.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vmsfspec.t;*
	- If F$Search("[.t.lib]vmsish.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vmsish.t;*
	- If F$Search("[.t.lib]vms_dclsym.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vms_dclsym.t;*
	- If F$Search("[.t.lib]vms_stdio.t").nes."" Then Delete/NoConfirm/Log [.t.lib]vms_stdio.t;*

cleansrc : clean
	- If F$Search("*.C;-1").nes."" Then Purge/NoConfirm/Log *.C
	- If F$Search("*.H;-1").nes."" Then Purge/NoConfirm/Log *.H
	- If F$Search("*.VMS;-1").nes."" Then Purge/NoConfirm/Log *.VMS
	- If F$Search("[.VMS]$(MAKEFILE);-1").nes."" Then Purge/NoConfirm/Log [.VMS]$(MAKEFILE)
	- If F$Search("[.VMS]*.C;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.C
	- If F$Search("[.VMS]*.H;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.H
	- If F$Search("[.VMS]*.Pl;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.Pl
	- If F$Search("[.VMS]*.VMS;-1").nes."" Then Purge/NoConfirm/Log [.VMS]*.VMS
	- If F$Search("[.VMS...]*.pm;-1").nes."" Then Purge/NoConfirm/Log [.VMS...]*.pm
	- If F$Search("[.VMS...]*.xs;-1").nes."" Then Purge/NoConfirm/Log [.VMS...]*.xs
!GROK!THIS!
