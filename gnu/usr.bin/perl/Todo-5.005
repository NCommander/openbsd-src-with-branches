Multi-threading
    $AUTOLOAD. Hmm.
    consistent semantics for exit/die in threads
    SvREFCNT_dec(curstack) in threadstart() in Thread.xs
    better support for externally created threads
    Thread::Pool
    spot-check globals like statcache and global GVs for thread-safety

Compiler
    auto-produce executable
    typed lexicals should affect B::CC::load_pad
    workarounds to help Win32
    END blocks need saving in compiled output
    _AUTOLOAD prodding
    fix comppadlist (names in comppad_name can have fake SvCUR
	from where newASSIGNOP steals the field)

Namespace cleanup
    CPP-space:	  restrict what we export from headers
                  stop malloc()/free() pollution unless asked
    header-space: move into CORE/perl/
    API-space:    begin list of things that constitute public api

MULTIPLICITY support
    complete work on safe recursive interpreters, C<Perl->new()>
    revisit extra implicit arg that provides curthread/curinterp context

Reliable Signals
    alternate runops() for signal despatch
    figure out how to die() in delayed sighandler
    add tests for Thread::Signal

Win32 stuff
    get PERL_OBJECT building under gcc
    get PERL_OBJECT building on non-win32
    automate generation of 'protected' prototypes for CPerlObj 
    rename new headers to be consistent with the rest
    sort out the spawnvp() mess
    work out DLL versioning
    style-check

Miscellaneous
    rename and alter ISA.pm
    magic_setisa should be made to update %FIELDS [???]
    add new modules (Archive::Tar, Compress::Zlib, CPAN::FTP?)
    fix pod2html to generate relative URLs
    automate testing with large parts of CPAN

Ongoing
    keep filenames 8.3 friendly, where feasible
    upgrade to newer versions of all independently maintained modules
    comprehensive perldelta.pod

Documentation
    describe new age patterns
    update perl{guts,call,embed,xs} with additions, changes to API
    document Win32 choices
    spot-check all new modules for completeness
    better docs for pack()/unpack()
    reorg tutorials vs. reference sections

