
=head1 NAME

perltoc - perl documentation table of contents

=head1 DESCRIPTION

This page provides a brief table of contents for the rest of the Perl
documentation set.  It is meant to be scanned quickly or grepped
through to locate the proper section you're looking for.

=head1 BASIC DOCUMENTATION

=head2 perl - Practical Extraction and Report Language

=over

=item SYNOPSIS

=item DESCRIPTION

modularity and reusability using innumerable modules, embeddable and
extensible, roll-your-own magic variables (including multiple simultaneous
DBM implementations), subroutines can now be overridden, autoloaded, and
prototyped, arbitrarily nested data structures and anonymous functions,
object-oriented programming, compilability into C code or Perl bytecode,
support for light-weight processes (threads), support for
internationalization, localization, and Unicode, lexical scoping, regular
expression enhancements, enhanced debugger and interactive Perl
environment, with integrated editor support, POSIX 1003.1 compliant library

=item AVAILABILITY

=item ENVIRONMENT

=item AUTHOR

=item FILES

=item SEE ALSO

=item DIAGNOSTICS

=item BUGS

=item NOTES

=back

=head2 perlfaq - frequently asked questions about Perl ($Date: 1999/05/23
20:38:02 $)

=over

=item DESCRIPTION

perlfaq: Structural overview of the FAQ, L<perlfaq1>: General Questions
About Perl, What is Perl?, Who supports Perl?  Who develops it?  Why is it
free?, Which version of Perl should I use?, What are perl4 and perl5?, What
is perl6?, How stable is Perl?, Is Perl difficult to learn?, How does Perl
compare with other languages like Java, Python, REXX, Scheme, or Tcl?, Can
I do [task] in Perl?, When shouldn't I program in Perl?, What's the
difference between "perl" and "Perl"?, Is it a Perl program or a Perl
script?, What is a JAPH?, Where can I get a list of Larry Wall witticisms?,
How can I convince my sysadmin/supervisor/employees to use version
(5/5.005/Perl instead of some other language)?, L<perlfaq2>: Obtaining and
Learning about Perl, What machines support Perl?  Where do I get it?, How
can I get a binary version of Perl?, I don't have a C compiler on my
system.  How can I compile perl?, I copied the Perl binary from one machine
to another, but scripts don't work, I grabbed the sources and tried to
compile but gdbm/dynamic loading/malloc/linking/... failed.  How do I make
it work?, What modules and extensions are available for Perl?  What is
CPAN?  What does CPAN/src/... mean?, Is there an ISO or ANSI certified
version of Perl?, Where can I get information on Perl?, What are the Perl
newsgroups on USENET?  Where do I post questions?, Where should I post
source code?, Perl Books, Perl in Magazines, Perl on the Net: FTP and WWW
Access, What mailing lists are there for perl?, Archives of
comp.lang.perl.misc, Where can I buy a commercial version of Perl?, Where
do I send bug reports?, What is perl.com?, L<perlfaq3>: Programming Tools,
How do I do (anything)?, How can I use Perl interactively?, Is there a Perl
shell?, How do I debug my Perl programs?, How do I profile my Perl
programs?, How do I cross-reference my Perl programs?, Is there a
pretty-printer (formatter) for Perl?, Is there a ctags for Perl?, Is there
an IDE or Windows Perl Editor?, Where can I get Perl macros for vi?, Where
can I get perl-mode for emacs?, How can I use curses with Perl?, How can I
use X or Tk with Perl?, How can I generate simple menus without using CGI
or Tk?, What is undump?, How can I make my Perl program run faster?, How
can I make my Perl program take less memory?, Is it unsafe to return a
pointer to local data?, How can I free an array or hash so my program
shrinks?, How can I make my CGI script more efficient?, How can I hide the
source for my Perl program?, How can I compile my Perl program into byte
code or C?, How can I compile Perl into Java?, How can I get C<#!perl> to
work on [MS-DOS,NT,...]?, Can I write useful perl programs on the command
line?, Why don't perl one-liners work on my DOS/Mac/VMS system?, Where can
I learn about CGI or Web programming in Perl?, Where can I learn about
object-oriented Perl programming?, Where can I learn about linking C with
Perl? [h2xs, xsubpp], I've read perlembed, perlguts, etc., but I can't
embed perl inmy C program, what am I doing wrong?, When I tried to run my
script, I got this message. What does itmean?, What's MakeMaker?,
L<perlfaq4>: Data Manipulation, Why am I getting long decimals (eg,
19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?,
Why isn't my octal data interpreted correctly?, Does Perl have a round()
function?  What about ceil() and floor()?  Trig functions?, How do I
convert bits into ints?, Why doesn't & work the way I want it to?, How do I
multiply matrices?, How do I perform an operation on a series of integers?,
How can I output Roman numerals?, Why aren't my random numbers random?, How
do I find the week-of-the-year/day-of-the-year?, How do I find the current
century or millennium?, How can I compare two dates and find the
difference?, How can I take a string and turn it into epoch seconds?, How
can I find the Julian Day?, How do I find yesterday's date?, Does Perl have
a year 2000 problem?  Is Perl Y2K compliant?, How do I validate input?, How
do I unescape a string?, How do I remove consecutive pairs of characters?,
How do I expand function calls in a string?, How do I find matching/nesting
anything?, How do I reverse a string?, How do I expand tabs in a string?,
How do I reformat a paragraph?, How can I access/change the first N letters
of a string?, How do I change the Nth occurrence of something?, How can I
count the number of occurrences of a substring within a string?, How do I
capitalize all the words on one line?, How can I split a [character]
delimited string except when inside[character]? (Comma-separated files),
How do I strip blank space from the beginning/end of a string?, How do I
pad a string with blanks or pad a number with zeroes?, How do I extract
selected columns from a string?, How do I find the soundex value of a
string?, How can I expand variables in text strings?, What's wrong with
always quoting "$vars"?, Why don't my <<HERE documents work?, What is the
difference between a list and an array?, What is the difference between
$array[1] and @array[1]?, How can I remove duplicate elements from a list
or array?, How can I tell whether a list or array contains a certain
element?, How do I compute the difference of two arrays?  How do I compute
the intersection of two arrays?, How do I test whether two arrays or hashes
are equal?, How do I find the first array element for which a condition is
true?, How do I handle linked lists?, How do I handle circular lists?, How
do I shuffle an array randomly?, How do I process/modify each element of an
array?, How do I select a random element from an array?, How do I permute N
elements of a list?, How do I sort an array by (anything)?, How do I
manipulate arrays of bits?, Why does defined() return true on empty arrays
and hashes?, How do I process an entire hash?, What happens if I add or
remove keys from a hash while iterating over it?, How do I look up a hash
element by value?, How can I know how many entries are in a hash?, How do I
sort a hash (optionally by value instead of key)?, How can I always keep my
hash sorted?, What's the difference between "delete" and "undef" with
hashes?, Why don't my tied hashes make the defined/exists distinction?, How
do I reset an each() operation part-way through?, How can I get the unique
keys from two hashes?, How can I store a multidimensional array in a DBM
file?, How can I make my hash remember the order I put elements into it?,
Why does passing a subroutine an undefined element in a hash create it?,
How can I make the Perl equivalent of a C structure/C++ class/hash or array
of hashes or arrays?, How can I use a reference as a hash key?, How do I
handle binary data correctly?, How do I determine whether a scalar is a
number/whole/integer/float?, How do I keep persistent data across program
calls?, How do I print out or copy a recursive data structure?, How do I
define methods for every class/object?, How do I verify a credit card
checksum?, How do I pack arrays of doubles or floats for XS code?,
L<perlfaq5>: Files and Formats, How do I flush/unbuffer an output
filehandle?  Why must I do this?, How do I change one line in a file/delete
a line in a file/insert a line in the middle of a file/append to the
beginning of a file?, How do I count the number of lines in a file?, How do
I make a temporary file name?, How can I manipulate fixed-record-length
files?, How can I make a filehandle local to a subroutine?  How do I pass
filehandles between subroutines?  How do I make an array of filehandles?,
How can I use a filehandle indirectly?, How can I set up a footer format to
be used with write()?, How can I write() into a string?, How can I output
my numbers with commas added?, How can I translate tildes (~) in a
filename?, How come when I open a file read-write it wipes it out?, Why do
I sometimes get an "Argument list too long" when I use <*>?, Is there a
leak/bug in glob()?, How can I open a file with a leading ">" or trailing
blanks?, How can I reliably rename a file?, How can I lock a file?, Why
can't I just open(FH, ">file.lock")?, I still don't get locking.  I just
want to increment the number in the file.  How can I do this?, How do I
randomly update a binary file?, How do I get a file's timestamp in perl?,
How do I set a file's timestamp in perl?, How do I print to more than one
file at once?, How can I read in an entire file all at once?, How can I
read in a file by paragraphs?, How can I read a single character from a
file?  From the keyboard?, How can I tell whether there's a character
waiting on a filehandle?, How do I do a C<tail -f> in perl?, How do I dup()
a filehandle in Perl?, How do I close a file descriptor by number?, Why
can't I use "C:\temp\foo" in DOS paths?  What doesn't `C:\temp\foo.exe`
work?, Why doesn't glob("*.*") get all the files?, Why does Perl let me
delete read-only files?  Why does C<-i> clobber protected files?  Isn't
this a bug in Perl?, How do I select a random line from a file?, Why do I
get weird spaces when I print an array of lines?, L<perlfaq6>: Regexps, How
can I hope to use regular expressions without creating illegible and
unmaintainable code?, I'm having trouble matching over more than one line. 
What's wrong?, How can I pull out lines between two patterns that are
themselves on different lines?, I put a regular expression into $/ but it
didn't work. What's wrong?, How do I substitute case insensitively on the
LHS, but preserving case on the RHS?, How can I make C<\w> match national
character sets?, How can I match a locale-smart version of C</[a-zA-Z]/>?,
How can I quote a variable to use in a regex?, What is C</o> really for?,
How do I use a regular expression to strip C style comments from a file?,
Can I use Perl regular expressions to match balanced text?, What does it
mean that regexes are greedy?  How can I get around it?, How do I process
each word on each line?, How can I print out a word-frequency or
line-frequency summary?, How can I do approximate matching?, How do I
efficiently match many regular expressions at once?, Why don't
word-boundary searches with C<\b> work for me?, Why does using $&, $`, or
$' slow my program down?, What good is C<\G> in a regular expression?, Are
Perl regexes DFAs or NFAs?  Are they POSIX compliant?, What's wrong with
using grep or map in a void context?, How can I match strings with
multibyte characters?, How do I match a pattern that is supplied by the
user?, L<perlfaq7>: General Perl Language Issues, Can I get a BNF/yacc/RE
for the Perl language?, What are all these $@%&* punctuation signs, and how
do I know when to use them?, Do I always/never have to quote my strings or
use semicolons and commas?, How do I skip some return values?, How do I
temporarily block warnings?, What's an extension?, Why do Perl operators
have different precedence than C operators?, How do I declare/create a
structure?, How do I create a module?, How do I create a class?, How can I
tell if a variable is tainted?, What's a closure?, What is variable suicide
and how can I prevent it?, How can I pass/return a {Function, FileHandle,
Array, Hash, Method, Regex}?, How do I create a static variable?, What's
the difference between dynamic and lexical (static) scoping?  Between
local() and my()?, How can I access a dynamic variable while a similarly
named lexical is in scope?, What's the difference between deep and shallow
binding?, Why doesn't "my($foo) = <FILE>;" work right?, How do I redefine a
builtin function, operator, or method?, What's the difference between
calling a function as &foo and foo()?, How do I create a switch or case
statement?, How can I catch accesses to undefined
variables/functions/methods?, Why can't a method included in this same file
be found?, How can I find out my current package?, How can I comment out a
large block of perl code?, How do I clear a package?, How can I use a
variable as a variable name?, L<perlfaq8>: System Interaction, How do I
find out which operating system I'm running under?, How come exec() doesn't
return?, How do I do fancy stuff with the keyboard/screen/mouse?, How do I
print something out in color?, How do I read just one key without waiting
for a return key?, How do I check whether input is ready on the keyboard?,
How do I clear the screen?, How do I get the screen size?, How do I ask the
user for a password?, How do I read and write the serial port?, How do I
decode encrypted password files?, How do I start a process in the
background?, How do I trap control characters/signals?, How do I modify the
shadow password file on a Unix system?, How do I set the time and date?,
How can I sleep() or alarm() for under a second?, How can I measure time
under a second?, How can I do an atexit() or setjmp()/longjmp()? (Exception
handling), Why doesn't my sockets program work under System V (Solaris)?
What does the error message "Protocol not supported" mean?, How can I call
my system's unique C functions from Perl?, Where do I get the include files
to do ioctl() or syscall()?, Why do setuid perl scripts complain about
kernel problems?, How can I open a pipe both to and from a command?, Why
can't I get the output of a command with system()?, How can I capture
STDERR from an external command?, Why doesn't open() return an error when a
pipe open fails?, What's wrong with using backticks in a void context?, How
can I call backticks without shell processing?, Why can't my script read
from STDIN after I gave it EOF (^D on Unix, ^Z on MS-DOS)?, How can I
convert my shell script to perl?, Can I use perl to run a telnet or ftp
session?, How can I write expect in Perl?, Is there a way to hide perl's
command line from programs such as "ps"?, I {changed directory, modified my
environment} in a perl script.	How come the change disappeared when I
exited the script?  How do I get my changes to be visible?, How do I close
a process's filehandle without waiting for it to complete?, How do I fork a
daemon process?, How do I make my program run with sh and csh?, How do I
find out if I'm running interactively or not?, How do I timeout a slow
event?, How do I set CPU limits?, How do I avoid zombies on a Unix system?,
How do I use an SQL database?, How do I make a system() exit on control-C?,
How do I open a file without blocking?, How do I install a module from
CPAN?, What's the difference between require and use?, How do I keep my own
module/library directory?, How do I add the directory my program lives in
to the module/library search path?, How do I add a directory to my include
path at runtime?, What is socket.ph and where do I get it?, L<perlfaq9>:
Networking, My CGI script runs from the command line but not the browser.  
(500 Server Error), How can I get better error messages from a CGI
program?, How do I remove HTML from a string?, How do I extract URLs?, How
do I download a file from the user's machine?  How do I open a file on
another machine?, How do I make a pop-up menu in HTML?, How do I fetch an
HTML file?, How do I automate an HTML form submission?, How do I decode or
create those %-encodings on the web?, How do I redirect to another page?,
How do I put a password on my web pages?, How do I edit my .htpasswd and
.htgroup files with Perl?, How do I make sure users can't enter values into
a form that cause my CGI script to do bad things?, How do I parse a mail
header?, How do I decode a CGI form?, How do I check a valid mail address?,
How do I decode a MIME/BASE64 string?, How do I return the user's mail
address?, How do I send mail?, How do I read mail?, How do I find out my
hostname/domainname/IP address?, How do I fetch a news article or the
active newsgroups?, How do I fetch/put an FTP file?, How can I do RPC in
Perl?

=over

=item Where to get this document

=item How to contribute to this document

=item What will happen if you mail your Perl programming problems to the
authors

=back

=item Credits

=item Author and Copyright Information

=over

=item Bundled Distributions

=item Disclaimer

=back

=item Changes

23/May/99, 13/April/99, 7/January/99, 22/June/98, 24/April/97, 23/April/97,
25/March/97, 18/March/97, 17/March/97 Version, Initial Release: 11/March/97

=back

=head2 perlfaq1 - General Questions About Perl ($Revision: 1.23 $, $Date:
1999/05/23 16:08:30 $)

=over

=item DESCRIPTION

=over

=item What is Perl?

=item Who supports Perl?  Who develops it?  Why is it free?

=item Which version of Perl should I use?

=item What are perl4 and perl5?

=item What is perl6?

=item How stable is Perl?

=item Is Perl difficult to learn?

=item How does Perl compare with other languages like Java, Python, REXX,
Scheme, or Tcl?

=item Can I do [task] in Perl?

=item When shouldn't I program in Perl?

=item What's the difference between "perl" and "Perl"?

=item Is it a Perl program or a Perl script?

=item What is a JAPH?

=item Where can I get a list of Larry Wall witticisms?

=item How can I convince my sysadmin/supervisor/employees to use version
(5/5.005/Perl instead of some other language)?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq2 - Obtaining and Learning about Perl ($Revision: 1.32 $,
$Date: 1999/10/14 18:46:09 $)

=over

=item DESCRIPTION

=over

=item What machines support Perl?  Where do I get it?

=item How can I get a binary version of Perl?

=item I don't have a C compiler on my system.  How can I compile perl?

=item I copied the Perl binary from one machine to another, but scripts
don't work.

=item I grabbed the sources and tried to compile but gdbm/dynamic
loading/malloc/linking/... failed.  How do I make it work?

=item What modules and extensions are available for Perl?  What is CPAN? 
What does CPAN/src/... mean?

=item Is there an ISO or ANSI certified version of Perl?

=item Where can I get information on Perl?

=item What are the Perl newsgroups on Usenet?  Where do I post questions?

=item Where should I post source code?

=item Perl Books

References, Tutorials, Task-Oriented, Special Topics

=item Perl in Magazines

=item Perl on the Net: FTP and WWW Access

=item What mailing lists are there for Perl?

=item Archives of comp.lang.perl.misc

=item Where can I buy a commercial version of Perl?

=item Where do I send bug reports?

=item What is perl.com? Perl Mongers? pm.org? perl.org?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq3 - Programming Tools ($Revision: 1.38 $, $Date: 1999/05/23
16:08:30 $)

=over

=item DESCRIPTION

=over

=item How do I do (anything)?

=item How can I use Perl interactively?

=item Is there a Perl shell?

=item How do I debug my Perl programs?

=item How do I profile my Perl programs?

=item How do I cross-reference my Perl programs?

=item Is there a pretty-printer (formatter) for Perl?

=item Is there a ctags for Perl?

=item Is there an IDE or Windows Perl Editor?

=item Where can I get Perl macros for vi?

=item Where can I get perl-mode for emacs?

=item How can I use curses with Perl?

=item How can I use X or Tk with Perl?

=item How can I generate simple menus without using CGI or Tk?

=item What is undump?

=item How can I make my Perl program run faster?

=item How can I make my Perl program take less memory?

=item Is it unsafe to return a pointer to local data?

=item How can I free an array or hash so my program shrinks?

=item How can I make my CGI script more efficient?

=item How can I hide the source for my Perl program?

=item How can I compile my Perl program into byte code or C?

=item How can I compile Perl into Java?

=item How can I get C<#!perl> to work on [MS-DOS,NT,...]?

=item Can I write useful Perl programs on the command line?

=item Why don't Perl one-liners work on my DOS/Mac/VMS system?

=item Where can I learn about CGI or Web programming in Perl?

=item Where can I learn about object-oriented Perl programming?

=item Where can I learn about linking C with Perl? [h2xs, xsubpp]

=item I've read perlembed, perlguts, etc., but I can't embed perl in
my C program, what am I doing wrong?

=item When I tried to run my script, I got this message. What does it
mean?

=item What's MakeMaker?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq4 - Data Manipulation ($Revision: 1.49 $, $Date: 1999/05/23
20:37:49 $)

=over

=item DESCRIPTION

=item Data: Numbers

=over

=item Why am I getting long decimals (eg, 19.9499999999999) instead of the
numbers I should be getting (eg, 19.95)?

=item Why isn't my octal data interpreted correctly?

=item Does Perl have a round() function?  What about ceil() and floor()? 
Trig functions?

=item How do I convert bits into ints?

=item Why doesn't & work the way I want it to?

=item How do I multiply matrices?

=item How do I perform an operation on a series of integers?

=item How can I output Roman numerals?

=item Why aren't my random numbers random?

=back

=item Data: Dates

=over

=item How do I find the week-of-the-year/day-of-the-year?

=item How do I find the current century or millennium?

=item How can I compare two dates and find the difference?

=item How can I take a string and turn it into epoch seconds?

=item How can I find the Julian Day?

=item How do I find yesterday's date?

=item Does Perl have a Year 2000 problem?  Is Perl Y2K compliant?

=back

=item Data: Strings

=over

=item How do I validate input?

=item How do I unescape a string?

=item How do I remove consecutive pairs of characters?

=item How do I expand function calls in a string?

=item How do I find matching/nesting anything?

=item How do I reverse a string?

=item How do I expand tabs in a string?

=item How do I reformat a paragraph?

=item How can I access/change the first N letters of a string?

=item How do I change the Nth occurrence of something?

=item How can I count the number of occurrences of a substring within a
string?

=item How do I capitalize all the words on one line?

=item How can I split a [character] delimited string except when inside
[character]? (Comma-separated files)

=item How do I strip blank space from the beginning/end of a string?

=item How do I pad a string with blanks or pad a number with zeroes?

=item How do I extract selected columns from a string?

=item How do I find the soundex value of a string?

=item How can I expand variables in text strings?

=item What's wrong with always quoting "$vars"?

=item Why don't my <<HERE documents work?

1. There must be no space after the << part, 2. There (probably) should be
a semicolon at the end, 3. You can't (easily) have any space in front of
the tag

=back

=item Data: Arrays

=over

=item What is the difference between a list and an array?

=item What is the difference between $array[1] and @array[1]?

=item How can I remove duplicate elements from a list or array?

a) If @in is sorted, and you want @out to be sorted:(this assumes all true
values in the array), b) If you don't know whether @in is sorted:, c) Like
(b), but @in contains only small integers:, d) A way to do (b) without any
loops or greps:, e) Like (d), but @in contains only small positive
integers:

=item How can I tell whether a list or array contains a certain element?

=item How do I compute the difference of two arrays?  How do I compute the
intersection of two arrays?

=item How do I test whether two arrays or hashes are equal?

=item How do I find the first array element for which a condition is true?

=item How do I handle linked lists?

=item How do I handle circular lists?

=item How do I shuffle an array randomly?

=item How do I process/modify each element of an array?

=item How do I select a random element from an array?

=item How do I permute N elements of a list?

=item How do I sort an array by (anything)?

=item How do I manipulate arrays of bits?

=item Why does defined() return true on empty arrays and hashes?

=back

=item Data: Hashes (Associative Arrays)

=over

=item How do I process an entire hash?

=item What happens if I add or remove keys from a hash while iterating over
it?

=item How do I look up a hash element by value?

=item How can I know how many entries are in a hash?

=item How do I sort a hash (optionally by value instead of key)?

=item How can I always keep my hash sorted?

=item What's the difference between "delete" and "undef" with hashes?

=item Why don't my tied hashes make the defined/exists distinction?

=item How do I reset an each() operation part-way through?

=item How can I get the unique keys from two hashes?

=item How can I store a multidimensional array in a DBM file?

=item How can I make my hash remember the order I put elements into it?

=item Why does passing a subroutine an undefined element in a hash create
it?

=item How can I make the Perl equivalent of a C structure/C++ class/hash or
array of hashes or arrays?

=item How can I use a reference as a hash key?

=back

=item Data: Misc

=over

=item How do I handle binary data correctly?

=item How do I determine whether a scalar is a number/whole/integer/float?

=item How do I keep persistent data across program calls?

=item How do I print out or copy a recursive data structure?

=item How do I define methods for every class/object?

=item How do I verify a credit card checksum?

=item How do I pack arrays of doubles or floats for XS code?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq5 - Files and Formats ($Revision: 1.38 $, $Date: 1999/05/23
16:08:30 $)

=over

=item DESCRIPTION

=over

=item How do I flush/unbuffer an output filehandle?  Why must I do this?

=item How do I change one line in a file/delete a line in a file/insert a
line in the middle of a file/append to the beginning of a file?

=item How do I count the number of lines in a file?

=item How do I make a temporary file name?

=item How can I manipulate fixed-record-length files?

=item How can I make a filehandle local to a subroutine?  How do I pass
filehandles between subroutines?  How do I make an array of filehandles?

=item How can I use a filehandle indirectly?

=item How can I set up a footer format to be used with write()?

=item How can I write() into a string?

=item How can I output my numbers with commas added?

=item How can I translate tildes (~) in a filename?

=item How come when I open a file read-write it wipes it out?

=item Why do I sometimes get an "Argument list too long" when I use <*>?

=item Is there a leak/bug in glob()?

=item How can I open a file with a leading ">" or trailing blanks?

=item How can I reliably rename a file?

=item How can I lock a file?

=item Why can't I just open(FH, ">file.lock")?

=item I still don't get locking.  I just want to increment the number in
the file.  How can I do this?

=item How do I randomly update a binary file?

=item How do I get a file's timestamp in perl?

=item How do I set a file's timestamp in perl?

=item How do I print to more than one file at once?

=item How can I read in an entire file all at once?

=item How can I read in a file by paragraphs?

=item How can I read a single character from a file?  From the keyboard?

=item How can I tell whether there's a character waiting on a filehandle?

=item How do I do a C<tail -f> in perl?

=item How do I dup() a filehandle in Perl?

=item How do I close a file descriptor by number?

=item Why can't I use "C:\temp\foo" in DOS paths?  What doesn't
`C:\temp\foo.exe` work?

=item Why doesn't glob("*.*") get all the files?

=item Why does Perl let me delete read-only files?  Why does C<-i> clobber
protected files?  Isn't this a bug in Perl?

=item How do I select a random line from a file?

=item Why do I get weird spaces when I print an array of lines?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq6 - Regexes ($Revision: 1.27 $, $Date: 1999/05/23 16:08:30 $)

=over

=item DESCRIPTION

=over

=item How can I hope to use regular expressions without creating illegible
and unmaintainable code?

Comments Outside the Regex, Comments Inside the Regex, Different Delimiters

=item I'm having trouble matching over more than one line.  What's wrong?

=item How can I pull out lines between two patterns that are themselves on
different lines?

=item I put a regular expression into $/ but it didn't work. What's wrong?

=item How do I substitute case insensitively on the LHS, but preserving
case on the RHS?

=item How can I make C<\w> match national character sets?

=item How can I match a locale-smart version of C</[a-zA-Z]/>?

=item How can I quote a variable to use in a regex?

=item What is C</o> really for?

=item How do I use a regular expression to strip C style comments from a
file?

=item Can I use Perl regular expressions to match balanced text?

=item What does it mean that regexes are greedy?  How can I get around it?

=item  How do I process each word on each line?

=item How can I print out a word-frequency or line-frequency summary?

=item How can I do approximate matching?

=item How do I efficiently match many regular expressions at once?

=item Why don't word-boundary searches with C<\b> work for me?

=item Why does using $&, $`, or $' slow my program down?

=item What good is C<\G> in a regular expression?

=item Are Perl regexes DFAs or NFAs?  Are they POSIX compliant?

=item What's wrong with using grep or map in a void context?

=item How can I match strings with multibyte characters?

=item How do I match a pattern that is supplied by the user?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq7 - Perl Language Issues ($Revision: 1.28 $, $Date:
1999/05/23 20:36:18 $)

=over

=item DESCRIPTION

=over

=item Can I get a BNF/yacc/RE for the Perl language?

=item What are all these $@%&* punctuation signs, and how do I know when to
use them?

=item Do I always/never have to quote my strings or use semicolons and
commas?

=item How do I skip some return values?

=item How do I temporarily block warnings?

=item What's an extension?

=item Why do Perl operators have different precedence than C operators?

=item How do I declare/create a structure?

=item How do I create a module?

=item How do I create a class?

=item How can I tell if a variable is tainted?

=item What's a closure?

=item What is variable suicide and how can I prevent it?

=item How can I pass/return a {Function, FileHandle, Array, Hash, Method,
Regex}?

Passing Variables and Functions, Passing Filehandles, Passing Regexes,
Passing Methods

=item How do I create a static variable?

=item What's the difference between dynamic and lexical (static) scoping? 
Between local() and my()?

=item How can I access a dynamic variable while a similarly named lexical
is in scope?

=item What's the difference between deep and shallow binding?

=item Why doesn't "my($foo) = <FILE>;" work right?

=item How do I redefine a builtin function, operator, or method?

=item What's the difference between calling a function as &foo and foo()?

=item How do I create a switch or case statement?

=item How can I catch accesses to undefined variables/functions/methods?

=item Why can't a method included in this same file be found?

=item How can I find out my current package?

=item How can I comment out a large block of perl code?

=item How do I clear a package?

=item How can I use a variable as a variable name?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq8 - System Interaction ($Revision: 1.39 $, $Date: 1999/05/23
18:37:57 $)

=over

=item DESCRIPTION

=over

=item How do I find out which operating system I'm running under?

=item How come exec() doesn't return?

=item How do I do fancy stuff with the keyboard/screen/mouse?

Keyboard, Screen, Mouse

=item How do I print something out in color?

=item How do I read just one key without waiting for a return key?

=item How do I check whether input is ready on the keyboard?

=item How do I clear the screen?

=item How do I get the screen size?

=item How do I ask the user for a password?

=item How do I read and write the serial port?

lockfiles, open mode, end of line, flushing output, non-blocking input

=item How do I decode encrypted password files?

=item How do I start a process in the background?

STDIN, STDOUT, and STDERR are shared, Signals, Zombies

=item How do I trap control characters/signals?

=item How do I modify the shadow password file on a Unix system?

=item How do I set the time and date?

=item How can I sleep() or alarm() for under a second?

=item How can I measure time under a second?

=item How can I do an atexit() or setjmp()/longjmp()? (Exception handling)

=item Why doesn't my sockets program work under System V (Solaris)? What
does the error message "Protocol not supported" mean?

=item How can I call my system's unique C functions from Perl?

=item Where do I get the include files to do ioctl() or syscall()?

=item Why do setuid perl scripts complain about kernel problems?

=item How can I open a pipe both to and from a command?

=item Why can't I get the output of a command with system()?

=item How can I capture STDERR from an external command?

=item Why doesn't open() return an error when a pipe open fails?

=item What's wrong with using backticks in a void context?

=item How can I call backticks without shell processing?

=item Why can't my script read from STDIN after I gave it EOF (^D on Unix,
^Z on MS-DOS)?

=item How can I convert my shell script to perl?

=item Can I use perl to run a telnet or ftp session?

=item How can I write expect in Perl?

=item Is there a way to hide perl's command line from programs such as
"ps"?

=item I {changed directory, modified my environment} in a perl script.	How
come the change disappeared when I exited the script?  How do I get my
changes to be visible?

Unix

=item How do I close a process's filehandle without waiting for it to
complete?

=item How do I fork a daemon process?

=item How do I make my program run with sh and csh?

=item How do I find out if I'm running interactively or not?

=item How do I timeout a slow event?

=item How do I set CPU limits?

=item How do I avoid zombies on a Unix system?

=item How do I use an SQL database?

=item How do I make a system() exit on control-C?

=item How do I open a file without blocking?

=item How do I install a module from CPAN?

=item What's the difference between require and use?

=item How do I keep my own module/library directory?

=item How do I add the directory my program lives in to the module/library
search path?

=item How do I add a directory to my include path at runtime?

=item What is socket.ph and where do I get it?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq9 - Networking ($Revision: 1.26 $, $Date: 1999/05/23 16:08:30
$)

=over

=item DESCRIPTION

=over

=item My CGI script runs from the command line but not the browser.   (500
Server Error)

=item How can I get better error messages from a CGI program?

=item How do I remove HTML from a string?

=item How do I extract URLs?

=item How do I download a file from the user's machine?  How do I open a
file on another machine?

=item How do I make a pop-up menu in HTML?

=item How do I fetch an HTML file?

=item How do I automate an HTML form submission?

=item How do I decode or create those %-encodings on the web?

=item How do I redirect to another page?

=item How do I put a password on my web pages?

=item How do I edit my .htpasswd and .htgroup files with Perl?

=item How do I make sure users can't enter values into a form that cause my
CGI script to do bad things?

=item How do I parse a mail header?

=item How do I decode a CGI form?

=item How do I check a valid mail address?

=item How do I decode a MIME/BASE64 string?

=item How do I return the user's mail address?

=item How do I send mail?

=item How do I read mail?

=item How do I find out my hostname/domainname/IP address?

=item How do I fetch a news article or the active newsgroups?

=item How do I fetch/put an FTP file?

=item How can I do RPC in Perl?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perldelta - what's new for perl v5.6.0

=over

=item DESCRIPTION

=item Core Enhancements

=over

=item Interpreter cloning, threads, and concurrency

=item Lexically scoped warning categories

=item Unicode and UTF-8 support

=item Support for interpolating named characters

=item "our" declarations

=item Support for strings represented as a vector of ordinals

=item Improved Perl version numbering system

=item New syntax for declaring subroutine attributes

=item File and directory handles can be autovivified

=item open() with more than two arguments

=item 64-bit support

=item Large file support

=item Long doubles

=item "more bits"

=item Enhanced support for sort() subroutines

=item C<sort $coderef @foo> allowed

=item File globbing implemented internally

Support for CHECK blocks

=item POSIX character class syntax [: :] supported

Better pseudo-random number generator

=item Improved C<qw//> operator

Better worst-case behavior of hashes

=item pack() format 'Z' supported

=item pack() format modifier '!' supported

=item pack() and unpack() support counted strings

=item Comments in pack() templates

=item Weak references

=item Binary numbers supported

=item Lvalue subroutines

=item Some arrows may be omitted in calls through references

=item Boolean assignment operators are legal lvalues

=item exists() is supported on subroutine names

=item exists() and delete() are supported on array elements

=item Pseudo-hashes work better

=item Automatic flushing of output buffers

=item Better diagnostics on meaningless filehandle operations

=item Where possible, buffered data discarded from duped input filehandle

=item eof() has the same old magic as <>

=item binmode() can be used to set :crlf and :raw modes

=item C<-T> filetest recognizes UTF-8 encoded files as "text"

=item system(), backticks and pipe open now reflect exec() failure

=item Improved diagnostics

=item Diagnostics follow STDERR

More consistent close-on-exec behavior

=item syswrite() ease-of-use

=item Better syntax checks on parenthesized unary operators

=item Bit operators support full native integer width

=item Improved security features

More functional bareword prototype (*)

=item C<require> and C<do> may be overridden

=item $^X variables may now have names longer than one character

=item New variable $^C reflects C<-c> switch

=item New variable $^V contains Perl version as a string

=item Optional Y2K warnings

=back

=item Modules and Pragmata

=over

=item Modules

attributes, B, Benchmark, ByteLoader, constant, charnames, Data::Dumper,
DB, DB_File, Devel::DProf, Devel::Peek, Dumpvalue, DynaLoader, English,
Env, Fcntl, File::Compare, File::Find, File::Glob, File::Spec,
File::Spec::Functions, Getopt::Long, IO, JPL, lib, Math::BigInt,
Math::Complex, Math::Trig, Pod::Parser, Pod::InputObjects, Pod::Checker,
podchecker, Pod::ParseUtils, Pod::Find, Pod::Select, podselect, Pod::Usage,
pod2usage, Pod::Text and Pod::Man, SDBM_File, Sys::Syslog, Sys::Hostname,
Term::ANSIColor, Time::Local, Win32, XSLoader, DBM Filters

=item Pragmata

=back

=item Utility Changes

=over

=item dprofpp

=item find2perl

=item h2xs

=item perlcc

=item perldoc

=item The Perl Debugger

=back

=item Improved Documentation

perlapi.pod, perlboot.pod, perlcompile.pod, perldbmfilter.pod,
perldebug.pod, perldebguts.pod, perlfork.pod, perlfilter.pod, perlhack.pod,
perlintern.pod, perllexwarn.pod, perlnumber.pod, perlopentut.pod,
perlreftut.pod, perltootc.pod, perltodo.pod, perlunicode.pod

=item Performance enhancements

=over

=item Simple sort() using { $a <=> $b } and the like are optimized

=item Optimized assignments to lexical variables

=item Faster subroutine calls

delete(), each(), values() and hash iteration are faster

=back

=item Installation and Configuration Improvements

=over

=item -Dusethreads means something different

=item New Configure flags

=item Threadedness and 64-bitness now more daring

=item Long Doubles

=item -Dusemorebits

=item -Duselargefiles

=item installusrbinperl

=item SOCKS support

=item C<-A> flag

=item Enhanced Installation Directories

=back

=item Platform specific changes

=over

=item Supported platforms

=item DOS

=item OS390 (OpenEdition MVS)

=item VMS

=item Win32

=back

=item Significant bug fixes

=over

=item <HANDLE> on empty files

=item C<eval '...'> improvements

=item All compilation errors are true errors

=item Implicitly closed filehandles are safer

=item Behavior of list slices is more consistent

=item C<(\$)> prototype and C<$foo{a}>

=item C<goto &sub> and AUTOLOAD

=item C<-bareword> allowed under C<use integer>

=item Failures in DESTROY()

=item Locale bugs fixed

=item Memory leaks

=item Spurious subroutine stubs after failed subroutine calls

=item Taint failures under C<-U>

=item END blocks and the C<-c> switch

=item Potential to leak DATA filehandles

=back

=item New or Changed Diagnostics

"%s" variable %s masks earlier declaration in same %s, "my sub" not yet
implemented, "our" variable %s redeclared, '!' allowed only after types %s,
/ cannot take a count, / must be followed by a, A or Z, / must be followed
by a*, A* or Z*, / must follow a numeric type, /%s/: Unrecognized escape
\\%c passed through, /%s/: Unrecognized escape \\%c in character class
passed through, /%s/ should probably be written as "%s", %s() called too
early to check prototype, %s argument is not a HASH or ARRAY element, %s
argument is not a HASH or ARRAY element or slice, %s argument is not a
subroutine name, %s package attribute may clash with future reserved word:
%s, (in cleanup) %s, <> should be quotes, Attempt to join self, Bad evalled
substitution pattern, Bad realloc() ignored, Bareword found in conditional,
Binary number > 0b11111111111111111111111111111111 non-portable, Bit vector
size > 32 non-portable, Buffer overflow in prime_env_iter: %s, Can't check
filesystem of script "%s", Can't declare class for non-scalar %s in "%s",
Can't declare %s in "%s", Can't ignore signal CHLD, forcing to default,
Can't modify non-lvalue subroutine call, Can't read CRTL environ, Can't
remove %s: %s, skipping file, Can't return %s from lvalue subroutine, Can't
weaken a nonreference, Character class [:%s:] unknown, Character class
syntax [%s] belongs inside character classes, Constant is not %s reference,
constant(%s): %s, CORE::%s is not a keyword, defined(@array) is deprecated,
defined(%hash) is deprecated, Did not produce a valid header, (Did you mean
"local" instead of "our"?), Document contains no data, entering effective
%s failed, false [] range "%s" in regexp, Filehandle %s opened only for
output, flock() on closed filehandle %s, Global symbol "%s" requires
explicit package name, Hexadecimal number > 0xffffffff non-portable,
Ill-formed CRTL environ value "%s", Ill-formed message in prime_env_iter:
|%s|, Illegal binary digit %s, Illegal binary digit %s ignored, Illegal
number of bits in vec, Integer overflow in %s number, Invalid %s attribute:
%s, Invalid %s attributes: %s, invalid [] range "%s" in regexp, Invalid
separator character %s in attribute list, Invalid separator character %s in
subroutine attribute list, leaving effective %s failed, Lvalue subs
returning %s not implemented yet, Method %s not permitted, Missing
%sbrace%s on \N{}, Missing command in piped open, Missing name in "my sub",
No %s specified for -%c, No package name allowed for variable %s in "our",
No space allowed after -%c, no UTC offset information; assuming local time
is UTC, Octal number > 037777777777 non-portable, panic: del_backref,
panic: kid popen errno read, panic: magic_killbackrefs, Parentheses missing
around "%s" list, Possible Y2K bug: %s, pragma "attrs" is deprecated, use
"sub NAME : ATTRS" instead, Premature end of script headers, Repeat count
in pack overflows, Repeat count in unpack overflows, realloc() of freed
memory ignored, Reference is already weak, setpgrp can't take arguments,
Strange *+?{} on zero-length expression, switching effective %s is not
implemented, This Perl can't reset CRTL environ elements (%s), This Perl
can't set CRTL environ elements (%s=%s), Too late to run %s block, Unknown
open() mode '%s', Unknown process %x sent message to prime_env_iter: %s,
Unrecognized escape \\%c passed through, Unterminated attribute parameter
in attribute list, Unterminated attribute list, Unterminated attribute
parameter in subroutine attribute list, Unterminated subroutine attribute
list, Value of CLI symbol "%s" too long, Version number must be a constant
number

=item New tests

=item Incompatible Changes

=over

=item Perl Source Incompatibilities

CHECK is a new keyword, Treatment of list slices of undef has changed

=item Format of $English::PERL_VERSION is different

Literals of the form C<1.2.3> parse differently, Possibly changed
pseudo-random number generator, Hashing function for hash keys has changed,
C<undef> fails on read only values, Close-on-exec bit may be set on pipe
and socket handles, Writing C<"$$1"> to mean C<"${$}1"> is unsupported,
delete(), values() and C<\(%h)> operate on aliases to values, not copies,
vec(EXPR,OFFSET,BITS) enforces powers-of-two BITS, Text of some diagnostic
output has changed, C<%@> has been removed, Parenthesized not() behaves
like a list operator, Semantics of bareword prototype C<(*)> have changed

=item Semantics of bit operators may have changed on 64-bit platforms

=item More builtins taint their results

=item C Source Incompatibilities

C<PERL_POLLUTE>, C<PERL_IMPLICIT_CONTEXT>, C<PERL_POLLUTE_MALLOC>

=item Compatible C Source API Changes

C<PATCHLEVEL> is now C<PERL_VERSION>

=item Binary Incompatibilities

=back

=item Known Problems

=over

=item Thread test failures

=item EBCDIC platforms not supported

=item In 64-bit HP-UX the lib/io_multihomed test may hang

=item NEXTSTEP 3.3 POSIX test failure

=item Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with
gcc

=item UNICOS/mk CC failures during Configure run

=item Arrow operator and arrays

=item Windows 2000

=item Experimental features

Threads, Unicode, 64-bit support, Lvalue subroutines, Weak references, The
pseudo-hash data type, The Compiler suite, Internal implementation of file
globbing, The DB module, The regular expression constructs C<(?{ code })>
and C<(??{ code })>

=back

=item Obsolete Diagnostics

Character class syntax [: :] is reserved for future extensions, Ill-formed
logical name |%s| in prime_env_iter, Probable precedence problem on %s,
regexp too big, Use of "$$<digit>" to mean "${$}<digit>" is deprecated

=item Reporting Bugs

=item SEE ALSO

=item HISTORY

=back

=head2 perldata - Perl data types

=over

=item DESCRIPTION

=over

=item Variable names

=item Context

=item Scalar values

=item Scalar value constructors

=item List value constructors

=item Slices

=item Typeglobs and Filehandles

=back

=item SEE ALSO

=back

=head2 perlsyn - Perl syntax

=over

=item DESCRIPTION

=over

=item Declarations

=item Simple statements

=item Compound statements

=item Loop Control

=item For Loops

=item Foreach Loops

=item Basic BLOCKs and Switch Statements

=item Goto

=item PODs: Embedded Documentation

=item Plain Old Comments (Not!)

=back

=back

=head2 perlop - Perl operators and precedence

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Terms and List Operators (Leftward)

=item The Arrow Operator

=item Auto-increment and Auto-decrement

=item Exponentiation

=item Symbolic Unary Operators

=item Binding Operators

=item Multiplicative Operators

=item Additive Operators

=item Shift Operators

=item Named Unary Operators

=item Relational Operators

=item Equality Operators

=item Bitwise And

=item Bitwise Or and Exclusive Or

=item C-style Logical And

=item C-style Logical Or

=item Range Operators

=item Conditional Operator

=item Assignment Operators

=item Comma Operator

=item List Operators (Rightward)

=item Logical Not

=item Logical And

=item Logical or and Exclusive Or

=item C Operators Missing From Perl

unary &, unary *, (TYPE)

=item Quote and Quote-like Operators

=item Regexp Quote-Like Operators

?PATTERN?, m/PATTERN/cgimosx, /PATTERN/cgimosx, q/STRING/, C<'STRING'>,
qq/STRING/, "STRING", qr/STRING/imosx, qx/STRING/, `STRING`, qw/STRING/,
s/PATTERN/REPLACEMENT/egimosx, tr/SEARCHLIST/REPLACEMENTLIST/cdsUC,
y/SEARCHLIST/REPLACEMENTLIST/cdsUC

=item Gory details of parsing quoted constructs

Finding the end, Removal of backslashes before delimiters, Interpolation,
C<<<'EOF'>, C<m''>, C<s'''>, C<tr///>, C<y///>, C<''>, C<q//>, C<"">,
C<``>, C<qq//>, C<qx//>, C<< <file*glob> >>, C<?RE?>, C</RE/>, C<m/RE/>,
C<s/RE/foo/>,, Interpolation of regular expressions, Optimization of
regular expressions

=item I/O Operators

=item Constant Folding

=item Bitwise String Operators

=item Integer Arithmetic

=item Floating-point Arithmetic

=item Bigger Numbers

=back

=back

=head2 perlre - Perl regular expressions

=over

=item DESCRIPTION

i, m, s, x

=over

=item Regular Expressions

cntrl, graph, print, punct, xdigit

=item Extended Patterns

C<(?#text)>, C<(?imsx-imsx)>, C<(?:pattern)>, C<(?imsx-imsx:pattern)>,
C<(?=pattern)>, C<(?!pattern)>, C<(?<=pattern)>, C<(?<!pattern)>, C<(?{
code })>, C<(??{ code })>, C<< (?>pattern) >>,
C<(?(condition)yes-pattern|no-pattern)>, C<(?(condition)yes-pattern)>

=item Backtracking

=item Version 8 Regular Expressions

=item Warning on \1 vs $1

=item Repeated patterns matching zero-length substring

=item Combining pieces together

C<ST>, C<S|T>, C<S{REPEAT_COUNT}>, C<S{min,max}>, C<S{min,max}?>, C<S?>,
C<S*>, C<S+>, C<S??>, C<S*?>, C<S+?>, C<< (?>S) >>, C<(?=S)>, C<(?<=S)>,
C<(?!S)>, C<(?<!S)>, C<(??{ EXPR })>,
C<(?(condition)yes-pattern|no-pattern)>

=item Creating custom RE engines

=back

=item BUGS

=item SEE ALSO

=back

=head2 perlrun - how to execute the Perl interpreter

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item #! and quoting on non-Unix systems

OS/2, MS-DOS, Win95/NT, Macintosh, VMS

=item Location of Perl

=item Command Switches

B<-0>[I<digits>], B<-a>, B<-C>, B<-c>, B<-d>, B<-d:>I<foo>,
B<-D>I<letters>, B<-D>I<number>, B<-e> I<commandline>, B<-F>I<pattern>,
B<-h>, B<-i>[I<extension>], B<-I>I<directory>, B<-l>[I<octnum>],
B<-m>[B<->]I<module>, B<-M>[B<->]I<module>, B<-M>[B<->]I<'module ...'>,
B<-[mM]>[B<->]I<module=arg[,arg]...>, B<-n>, B<-p>, B<-P>, B<-s>, B<-S>,
B<-T>, B<-u>, B<-U>, B<-v>, B<-V>, B<-V:>I<name>, B<-w>, B<-W>, B<-X>,
B<-x> I<directory>

=back

=item ENVIRONMENT

HOME, LOGDIR, PATH, PERL5LIB, PERL5OPT, PERLLIB, PERL5DB, PERL5SHELL
(specific to the Win32 port), PERL_DEBUG_MSTATS, PERL_DESTRUCT_LEVEL

=back

=head2 perlfunc - Perl builtin functions

=over

=item DESCRIPTION

=over

=item Perl Functions by Category

Functions for SCALARs or strings, Regular expressions and pattern matching,
Numeric functions, Functions for real @ARRAYs, Functions for list data,
Functions for real %HASHes, Input and output functions, Functions for fixed
length data or records, Functions for filehandles, files, or directories,
Keywords related to the control flow of your perl program, Keywords related
to scoping, Miscellaneous functions, Functions for processes and process
groups, Keywords related to perl modules, Keywords related to classes and
object-orientedness, Low-level socket functions, System V interprocess
communication functions, Fetching user and group info, Fetching network
info, Time-related functions, Functions new in perl5, Functions obsoleted
in perl5

=item Portability

=item Alphabetical Listing of Perl Functions

I<-X> FILEHANDLE, I<-X> EXPR, I<-X>, abs VALUE, abs, accept
NEWSOCKET,GENERICSOCKET, alarm SECONDS, alarm, atan2 Y,X, bind SOCKET,NAME,
binmode FILEHANDLE, DISCIPLINE, binmode FILEHANDLE, bless REF,CLASSNAME,
bless REF, caller EXPR, caller, chdir EXPR, chmod LIST, chomp VARIABLE,
chomp LIST, chomp, chop VARIABLE, chop LIST, chop, chown LIST, chr NUMBER,
chr, chroot FILENAME, chroot, close FILEHANDLE, close, closedir DIRHANDLE,
connect SOCKET,NAME, continue BLOCK, cos EXPR, crypt PLAINTEXT,SALT,
dbmclose HASH, dbmopen HASH,DBNAME,MASK, defined EXPR, defined, delete
EXPR, die LIST, do BLOCK, do SUBROUTINE(LIST), do EXPR, dump LABEL, dump,
each HASH, eof FILEHANDLE, eof (), eof, eval EXPR, eval BLOCK, exec LIST,
exec PROGRAM LIST, exists EXPR, exit EXPR, exp EXPR, exp, fcntl
FILEHANDLE,FUNCTION,SCALAR, fileno FILEHANDLE, flock FILEHANDLE,OPERATION,
fork, format, formline PICTURE,LIST, getc FILEHANDLE, getc, getlogin,
getpeername SOCKET, getpgrp PID, getppid, getpriority WHICH,WHO, getpwnam
NAME, getgrnam NAME, gethostbyname NAME, getnetbyname NAME, getprotobyname
NAME, getpwuid UID, getgrgid GID, getservbyname NAME,PROTO, gethostbyaddr
ADDR,ADDRTYPE, getnetbyaddr ADDR,ADDRTYPE, getprotobynumber NUMBER,
getservbyport PORT,PROTO, getpwent, getgrent, gethostent, getnetent,
getprotoent, getservent, setpwent, setgrent, sethostent STAYOPEN, setnetent
STAYOPEN, setprotoent STAYOPEN, setservent STAYOPEN, endpwent, endgrent,
endhostent, endnetent, endprotoent, endservent, getsockname SOCKET,
getsockopt SOCKET,LEVEL,OPTNAME, glob EXPR, glob, gmtime EXPR, goto LABEL,
goto EXPR, goto &NAME, grep BLOCK LIST, grep EXPR,LIST, hex EXPR, hex,
import, index STR,SUBSTR,POSITION, index STR,SUBSTR, int EXPR, int, ioctl
FILEHANDLE,FUNCTION,SCALAR, join EXPR,LIST, keys HASH, kill SIGNAL, LIST,
last LABEL, last, lc EXPR, lc, lcfirst EXPR, lcfirst, length EXPR, length,
link OLDFILE,NEWFILE, listen SOCKET,QUEUESIZE, local EXPR, localtime EXPR,
lock, log EXPR, log, lstat FILEHANDLE, lstat EXPR, lstat, m//, map BLOCK
LIST, map EXPR,LIST, mkdir FILENAME,MASK, mkdir FILENAME, msgctl
ID,CMD,ARG, msgget KEY,FLAGS, msgrcv ID,VAR,SIZE,TYPE,FLAGS, msgsnd
ID,MSG,FLAGS, my EXPR, my EXPR : ATTRIBUTES, next LABEL, next, no Module
LIST, oct EXPR, oct, open FILEHANDLE,MODE,LIST, open FILEHANDLE,EXPR, open
FILEHANDLE, opendir DIRHANDLE,EXPR, ord EXPR, ord, our EXPR, pack
TEMPLATE,LIST, package, package NAMESPACE, pipe READHANDLE,WRITEHANDLE, pop
ARRAY, pop, pos SCALAR, pos, print FILEHANDLE LIST, print LIST, print,
printf FILEHANDLE FORMAT, LIST, printf FORMAT, LIST, prototype FUNCTION,
push ARRAY,LIST, q/STRING/, qq/STRING/, qr/STRING/, qx/STRING/, qw/STRING/,
quotemeta EXPR, quotemeta, rand EXPR, rand, read
FILEHANDLE,SCALAR,LENGTH,OFFSET, read FILEHANDLE,SCALAR,LENGTH, readdir
DIRHANDLE, readline EXPR, readlink EXPR, readlink, readpipe EXPR, recv
SOCKET,SCALAR,LENGTH,FLAGS, redo LABEL, redo, ref EXPR, ref, rename
OLDNAME,NEWNAME, require VERSION, require EXPR, require, reset EXPR, reset,
return EXPR, return, reverse LIST, rewinddir DIRHANDLE, rindex
STR,SUBSTR,POSITION, rindex STR,SUBSTR, rmdir FILENAME, rmdir, s///, scalar
EXPR, seek FILEHANDLE,POSITION,WHENCE, seekdir DIRHANDLE,POS, select
FILEHANDLE, select, select RBITS,WBITS,EBITS,TIMEOUT, semctl
ID,SEMNUM,CMD,ARG, semget KEY,NSEMS,FLAGS, semop KEY,OPSTRING, send
SOCKET,MSG,FLAGS,TO, send SOCKET,MSG,FLAGS, setpgrp PID,PGRP, setpriority
WHICH,WHO,PRIORITY, setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL, shift ARRAY,
shift, shmctl ID,CMD,ARG, shmget KEY,SIZE,FLAGS, shmread ID,VAR,POS,SIZE,
shmwrite ID,STRING,POS,SIZE, shutdown SOCKET,HOW, sin EXPR, sin, sleep
EXPR, sleep, socket SOCKET,DOMAIN,TYPE,PROTOCOL, socketpair
SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL, sort SUBNAME LIST, sort BLOCK LIST,
sort LIST, splice ARRAY,OFFSET,LENGTH,LIST, splice ARRAY,OFFSET,LENGTH,
splice ARRAY,OFFSET, splice ARRAY, split /PATTERN/,EXPR,LIMIT, split
/PATTERN/,EXPR, split /PATTERN/, split, sprintf FORMAT, LIST, sqrt EXPR,
sqrt, srand EXPR, srand, stat FILEHANDLE, stat EXPR, stat, study SCALAR,
study, sub BLOCK, sub NAME, sub NAME BLOCK, substr
EXPR,OFFSET,LENGTH,REPLACEMENT, substr EXPR,OFFSET,LENGTH, substr
EXPR,OFFSET, symlink OLDFILE,NEWFILE, syscall LIST, sysopen
FILEHANDLE,FILENAME,MODE, sysopen FILEHANDLE,FILENAME,MODE,PERMS, sysread
FILEHANDLE,SCALAR,LENGTH,OFFSET, sysread FILEHANDLE,SCALAR,LENGTH, sysseek
FILEHANDLE,POSITION,WHENCE, system LIST, system PROGRAM LIST, syswrite
FILEHANDLE,SCALAR,LENGTH,OFFSET, syswrite FILEHANDLE,SCALAR,LENGTH,
syswrite FILEHANDLE,SCALAR, tell FILEHANDLE, tell, telldir DIRHANDLE, tie
VARIABLE,CLASSNAME,LIST, tied VARIABLE, time, times, tr///, truncate
FILEHANDLE,LENGTH, truncate EXPR,LENGTH, uc EXPR, uc, ucfirst EXPR,
ucfirst, umask EXPR, umask, undef EXPR, undef, unlink LIST, unlink, unpack
TEMPLATE,EXPR, untie VARIABLE, unshift ARRAY,LIST, use Module VERSION LIST,
use Module VERSION, use Module LIST, use Module, use VERSION, utime LIST,
values HASH, vec EXPR,OFFSET,BITS, wait, waitpid PID,FLAGS, wantarray, warn
LIST, write FILEHANDLE, write EXPR, write, y///

=back

=back

=head2 perlvar - Perl predefined variables

=over

=item DESCRIPTION

=over

=item Predefined Names

$ARG, $_, $<I<digits>>, $MATCH, $&, $PREMATCH, $`, $POSTMATCH, $',
$LAST_PAREN_MATCH, $+, @+, $MULTILINE_MATCHING, $*, input_line_number
HANDLE EXPR, $INPUT_LINE_NUMBER, $NR, $, input_record_separator HANDLE
EXPR, $INPUT_RECORD_SEPARATOR, $RS, $/, autoflush HANDLE EXPR,
$OUTPUT_AUTOFLUSH, $|, output_field_separator HANDLE EXPR,
$OUTPUT_FIELD_SEPARATOR, $OFS, $,, output_record_separator HANDLE EXPR,
$OUTPUT_RECORD_SEPARATOR, $ORS, $\, $LIST_SEPARATOR, $",
$SUBSCRIPT_SEPARATOR, $SUBSEP, $;, $OFMT, $#, format_page_number HANDLE
EXPR, $FORMAT_PAGE_NUMBER, $%, format_lines_per_page HANDLE EXPR,
$FORMAT_LINES_PER_PAGE, $=, format_lines_left HANDLE EXPR,
$FORMAT_LINES_LEFT, $-, @-, C<$`> is the same as C<substr($var, 0, $-[0]>),
C<$&> is the same as C<substr($var, $-[0], $+[0] - $-[0]>), C<$'> is the
same as C<substr($var, $+[0]>), C<$1> is the same as C<substr($var, $-[1],
$+[1] - $-[1])>, C<$2> is the same as C<substr($var, $-[2], $+[2] -
$-[2])>, C<$3> is the same as C<substr $var, $-[3], $+[3] - $-[3]>),
format_name HANDLE EXPR, $FORMAT_NAME, $~, format_top_name HANDLE EXPR,
$FORMAT_TOP_NAME, $^, format_line_break_characters HANDLE EXPR,
$FORMAT_LINE_BREAK_CHARACTERS, $:, format_formfeed HANDLE EXPR,
$FORMAT_FORMFEED, $^L, $ACCUMULATOR, $^A, $CHILD_ERROR, $?, $OS_ERROR,
$ERRNO, $!, $EXTENDED_OS_ERROR, $^E, $EVAL_ERROR, $@, $PROCESS_ID, $PID,
$$, $REAL_USER_ID, $UID, $<, $EFFECTIVE_USER_ID, $EUID, $>, $REAL_GROUP_ID,
$GID, $(, $EFFECTIVE_GROUP_ID, $EGID, $), $PROGRAM_NAME, $0, $[, $],
$COMPILING, $^C, $DEBUGGING, $^D, $SYSTEM_FD_MAX, $^F, $^H, %^H,
$INPLACE_EDIT, $^I, $^M, $OSNAME, $^O, $PERLDB, $^P, 0x01, 0x02, 0x04,
0x08, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, $LAST_REGEXP_CODE_RESULT, $^R,
$EXCEPTIONS_BEING_CAUGHT, $^S, $BASETIME, $^T, $PERL_VERSION, $^V,
$WARNING, $^W, ${^WARNING_BITS}, ${^WIDE_SYSTEM_CALLS}, $EXECUTABLE_NAME,
$^X, $ARGV, @ARGV, @INC, @_, %INC, %ENV, $ENV{expr}, %SIG, $SIG{expr}

=item Error Indicators

=item Technical Note on the Syntax of Variable Names

=back

=item BUGS

=back

=head2 perlsub - Perl subroutines

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Private Variables via my()

=item Persistent Private Variables

=item Temporary Values via local()

=item Lvalue subroutines

=item Passing Symbol Table Entries (typeglobs)

=item When to Still Use local()

1. You need to give a global variable a temporary value, especially $_, 2.
You need to create a local file or directory handle or a local function, 3.
You want to temporarily change just one element of an array or hash

=item Pass by Reference

=item Prototypes

=item Constant Functions

=item Overriding Built-in Functions

=item Autoloading

=item Subroutine Attributes

=back

=item SEE ALSO

=back

=head2 perlmod - Perl modules (packages and symbol tables)

=over

=item DESCRIPTION

=over

=item Packages

=item Symbol Tables

=item Package Constructors and Destructors

=item Perl Classes

=item Perl Modules

=back

=item SEE ALSO

=back

=head2 perlmodlib - constructing new Perl modules and finding existing ones

=over

=item DESCRIPTION

=item THE PERL MODULE LIBRARY

=over

=item Pragmatic Modules

attributes, attrs, autouse, base, blib, caller, charnames, constant,
diagnostics, fields, filetest, integer, less, lib, locale, ops, overload,
re, sigtrap, strict, subs, utf8, vars, warnings

=item Standard Modules

AnyDBM_File, AutoLoader, AutoSplit, B, B::Asmdata, B::Assembler, B::Bblock,
B::Bytecode, B::C, B::CC, B::Debug, B::Deparse, B::Disassembler, B::Lint,
B::Showlex, B::Stackobj, B::Terse, B::Xref, Benchmark, ByteLoader, CGI,
CGI::Apache, CGI::Carp, CGI::Cookie, CGI::Fast, CGI::Pretty, CGI::Push,
CGI::Switch, CPAN, CPAN::FirstTime, CPAN::Nox, Carp, Carp::Heavy,
Class::Struct, Config, Cwd, DB, DB_File, Data::Dumper, Devel::DProf,
Devel::Peek, Devel::SelfStubber, DirHandle, Dumpvalue, DynaLoader, English,
Env, Errno, Exporter, Exporter::Heavy, ExtUtils::Command, ExtUtils::Embed,
ExtUtils::Install, ExtUtils::Installed, ExtUtils::Liblist,
ExtUtils::MM_Cygwin, ExtUtils::MM_OS2, ExtUtils::MM_Unix, ExtUtils::MM_VMS,
ExtUtils::MM_Win32, ExtUtils::MakeMaker, ExtUtils::Manifest,
ExtUtils::Mkbootstrap, ExtUtils::Mksymlists, ExtUtils::Packlist,
ExtUtils::testlib, Fatal, Fcntl, File::Basename, File::CheckTree,
File::Compare, File::Copy, File::DosGlob, File::Find, File::Glob,
File::Path, File::Spec, File::Spec::Functions, File::Spec::Mac,
File::Spec::OS2, File::Spec::Unix, File::Spec::VMS, File::Spec::Win32,
File::stat, FileCache, FileHandle, FindBin, GDBM_File, Getopt::Long,
Getopt::Std, I18N::Collate, IO, IO::Dir, IO::File, IO::Handle, IO::Pipe,
IO::Poll, IO::Seekable, IO::Select, IO::Socket, IO::Socket::INET,
IO::Socket::UNIX, IPC::Msg, IPC::Open2, IPC::Open3, IPC::Semaphore,
IPC::SysV, Math::BigFloat, Math::BigInt, Math::Complex, Math::Trig,
Net::Ping, Net::hostent, Net::netent, Net::protoent, Net::servent, O,
Opcode, POSIX, Pod::Checker, Pod::Html, Pod::InputObjects, Pod::Man,
Pod::Parser, Pod::Select, Pod::Text, Pod::Text::Color, Pod::Usage,
SDBM_File, Safe, Search::Dict, SelectSaver, SelfLoader, Shell, Socket,
Symbol, Sys::Hostname, Sys::Syslog, Term::Cap, Term::Complete,
Term::ReadLine, Test, Test::Harness, Text::Abbrev, Text::ParseWords,
Text::Soundex, Text::Wrap, Tie::Array, Tie::Handle, Tie::Hash,
Tie::RefHash, Tie::Scalar, Tie::SubstrHash, Time::Local, Time::gmtime,
Time::localtime, Time::tm, UNIVERSAL, User::grent, User::pwent

=item Extension Modules

=back

=item CPAN

Language Extensions and Documentation Tools, Development Support, Operating
System Interfaces, Networking, Device Control (modems) and InterProcess
Communication, Data Types and Data Type Utilities, Database Interfaces,
User Interfaces, Interfaces to / Emulations of Other Programming Languages,
File Names, File Systems and File Locking (see also File Handles), String
Processing, Language Text Processing, Parsing, and Searching, Option,
Argument, Parameter, and Configuration File Processing,
Internationalization and Locale, Authentication, Security, and Encryption,
World Wide Web, HTML, HTTP, CGI, MIME, Server and Daemon Utilities,
Archiving and Compression, Images, Pixmap and Bitmap Manipulation, Drawing,
and Graphing, Mail and Usenet News, Control Flow Utilities (callbacks and
exceptions etc), File Handle and Input/Output Stream Utilities,
Miscellaneous Modules, Africa, Asia, Australasia, Central America, Europe,
North America, South America

=item Modules: Creation, Use, and Abuse

=over

=item Guidelines for Module Creation

Do similar modules already exist in some form?, Try to design the new
module to be easy to extend and reuse, Some simple style guidelines, Select
what to export, Select a name for the module, Have you got it right?,
README and other Additional Files, A description of the
module/package/extension etc, A copyright notice - see below, Prerequisites
- what else you may need to have, How to build it - possible changes to
Makefile.PL etc, How to install it, Recent changes in this release,
especially incompatibilities, Changes / enhancements you plan to make in
the future, Adding a Copyright Notice, Give the module a
version/issue/release number, How to release and distribute a module, Take
care when changing a released module

=item Guidelines for Converting Perl 4 Library Scripts into Modules

There is no requirement to convert anything, Consider the implications,
Make the most of the opportunity, The pl2pm utility will get you started,
Adds the standard Module prologue lines, Converts package specifiers from '
to ::, Converts die(...) to croak(...), Several other minor changes

=item Guidelines for Reusing Application Code

Complete applications rarely belong in the Perl Module Library, Many
applications contain some Perl code that could be reused, Break-out the
reusable code into one or more separate module files, Take the opportunity
to reconsider and redesign the interfaces, In some cases the 'application'
can then be reduced to a small

=back

=item NOTE

=back

=head2 perlmodinstall - Installing CPAN Modules

=over

=item DESCRIPTION

=over

=item PREAMBLE

B<DECOMPRESS> the file, B<UNPACK> the file into a directory, B<BUILD> the
module (sometimes unnecessary), B<INSTALL> the module

=back

=item HEY

=item AUTHOR

=item COPYRIGHT

=back

=head2 perlfork - Perl's fork() emulation

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Behavior of other Perl features in forked pseudo-processes

$$ or $PROCESS_ID, %ENV, chdir() and all other builtins that accept
filenames, wait() and waitpid(), kill(), exec(), exit(), Open handles to
files, directories and network sockets

=item Resource limits

=item Killing the parent process

=item Lifetime of the parent process and pseudo-processes

=item CAVEATS AND LIMITATIONS

BEGIN blocks, Open filehandles, Forking pipe open() not yet implemented,
Global state maintained by XSUBs, Interpreter embedded in larger
application, Thread-safety of extensions

=back

=item BUGS

=item AUTHOR

=item SEE ALSO

=back

=head2 perlform - Perl formats

=over

=item DESCRIPTION

=over

=item Format Variables

=back

=item NOTES

=over

=item Footers

=item Accessing Formatting Internals

=back

=item WARNINGS

=back

=head2 perllocale - Perl locale handling (internationalization and
localization)

=over

=item DESCRIPTION

=item PREPARING TO USE LOCALES

=item USING LOCALES

=over

=item The use locale pragma

=item The setlocale function

=item Finding locales

=item LOCALE PROBLEMS

=item Temporarily fixing locale problems

=item Permanently fixing locale problems

=item Permanently fixing your system's locale configuration

=item Fixing system locale configuration

=item The localeconv function

=back

=item LOCALE CATEGORIES

=over

=item Category LC_COLLATE: Collation

=item Category LC_CTYPE: Character Types

=item Category LC_NUMERIC: Numeric Formatting

=item Category LC_MONETARY: Formatting of monetary amounts

=item LC_TIME

=item Other categories

=back

=item SECURITY

B<Comparison operators> (C<lt>, C<le>, C<ge>, C<gt> and C<cmp>):,
B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u> or C<\U>),
B<Matching operator> (C<m//>):, B<Substitution operator> (C<s///>):,
B<Output formatting functions> (printf() and write()):, B<Case-mapping
functions> (lc(), lcfirst(), uc(), ucfirst()):, B<POSIX locale-dependent
functions> (localeconv(), strcoll(),strftime(), strxfrm()):, B<POSIX
character class tests> (isalnum(), isalpha(), isdigit(),isgraph(),
islower(), isprint(), ispunct(), isspace(), isupper(),
isxdigit()):

=item ENVIRONMENT

PERL_BADLANG, LC_ALL, LANGUAGE, LC_CTYPE, LC_COLLATE, LC_MONETARY,
LC_NUMERIC, LC_TIME, LANG

=item NOTES

=over

=item Backward compatibility

=item I18N:Collate obsolete

=item Sort speed and memory use impacts

=item write() and LC_NUMERIC

=item Freely available locale definitions

=item I18n and l10n

=item An imperfect standard

=back

=item BUGS

=over

=item Broken systems

=back

=item SEE ALSO

=item HISTORY

=back

=head2 perlref - Perl references and nested data structures

=over

=item NOTE

=item DESCRIPTION

=over

=item Making References

=item Using References

=item Symbolic references

=item Not-so-symbolic references

=item Pseudo-hashes: Using an array as a hash

=item Function Templates

=back

=item WARNING

=item SEE ALSO

=back

=head2 perlreftut - Mark's very short tutorial about references

=over

=item DESCRIPTION

=item Who Needs Complicated Data Structures?

=item The Solution

=item Syntax

=over

=item Making References

=item Using References

=back

=item An Example

=item Arrow Rule

=item Solution

=item The Rest

=item Summary

=item Credits

=over

=item Distribution Conditions

=back

=back

=head2 perldsc - Perl Data Structures Cookbook

=over

=item DESCRIPTION

arrays of arrays, hashes of arrays, arrays of hashes, hashes of hashes,
more elaborate constructs

=item REFERENCES

=item COMMON MISTAKES

=item CAVEAT ON PRECEDENCE

=item WHY YOU SHOULD ALWAYS C<use strict>

=item DEBUGGING

=item CODE EXAMPLES

=item ARRAYS OF ARRAYS

=over

=item Declaration of a ARRAY OF ARRAYS

=item Generation of a ARRAY OF ARRAYS

=item Access and Printing of a ARRAY OF ARRAYS

=back

=item HASHES OF ARRAYS

=over

=item Declaration of a HASH OF ARRAYS

=item Generation of a HASH OF ARRAYS

=item Access and Printing of a HASH OF ARRAYS

=back

=item ARRAYS OF HASHES

=over

=item Declaration of a ARRAY OF HASHES

=item Generation of a ARRAY OF HASHES

=item Access and Printing of a ARRAY OF HASHES

=back

=item HASHES OF HASHES

=over

=item Declaration of a HASH OF HASHES

=item Generation of a HASH OF HASHES

=item Access and Printing of a HASH OF HASHES

=back

=item MORE ELABORATE RECORDS

=over

=item Declaration of MORE ELABORATE RECORDS

=item Declaration of a HASH OF COMPLEX RECORDS

=item Generation of a HASH OF COMPLEX RECORDS

=back

=item Database Ties

=item SEE ALSO

=item AUTHOR

=back

=head2 perllol - Manipulating Arrays of Arrays in Perl

=over

=item DESCRIPTION

=item Declaration and Access of Arrays of Arrays

=item Growing Your Own

=item Access and Printing

=item Slices

=item SEE ALSO

=item AUTHOR

=back

=head2 perlboot - Beginner's Object-Oriented Tutorial

=over

=item DESCRIPTION

=over

=item If we could talk to the animals...

=item Introducing the method invocation arrow

=item Invoking a barnyard

=item The extra parameter of method invocation

=item Calling a second method to simplify things

=item Inheriting the windpipes

=item A few notes about @ISA

=item Overriding the methods

=item Starting the search from a different place

=item The SUPER way of doing things

=item Where we're at so far...

=item A horse is a horse, of course of course -- or is it?

=item Invoking an instance method

=item Accessing the instance data

=item How to build a horse

=item Inheriting the constructor

=item Making a method work with either classes or instances

=item Adding parameters to a method

=item More interesting instances

=item A horse of a different color

=item Summary

=back

=item SEE ALSO

=item COPYRIGHT

=back

=head2 perltoot - Tom's object-oriented tutorial for perl

=over

=item DESCRIPTION

=item Creating a Class

=over

=item Object Representation

=item Class Interface

=item Constructors and Instance Methods

=item Planning for the Future: Better Constructors

=item Destructors

=item Other Object Methods

=back

=item Class Data

=over

=item Accessing Class Data

=item Debugging Methods

=item Class Destructors

=item Documenting the Interface

=back

=item Aggregation

=item Inheritance

=over

=item Overridden Methods

=item Multiple Inheritance

=item UNIVERSAL: The Root of All Objects

=back

=item Alternate Object Representations

=over

=item Arrays as Objects

=item Closures as Objects

=back

=item AUTOLOAD: Proxy Methods

=over

=item Autoloaded Data Methods

=item Inherited Autoloaded Data Methods

=back

=item Metaclassical Tools

=over

=item Class::Struct

=item Data Members as Variables

=item NOTES

=item Object Terminology

=back

=item SEE ALSO

=item AUTHOR AND COPYRIGHT

=item COPYRIGHT

=over

=item Acknowledgments

=back

=back

=head2 perltootc - Tom's OO Tutorial for Class Data in Perl

=over

=item DESCRIPTION

=item Class Data as Package Variables

=over

=item Putting All Your Eggs in One Basket

=item Inheritance Concerns

=item The Eponymous Meta-Object

=item Indirect References to Class Data

=item Monadic Classes

=item Translucent Attributes

=back

=item Class Data as Lexical Variables

=over

=item Privacy and Responsibility 

=item File-Scoped Lexicals

=item More Inheritance Concerns

=item Locking the Door and Throwing Away the Key

=item Translucency Revisited

=back

=item NOTES

=item SEE ALSO

=item AUTHOR AND COPYRIGHT

=item ACKNOWLEDGEMENTS

=item HISTORY

=back

=head2 perlobj - Perl objects

=over

=item DESCRIPTION

=over

=item An Object is Simply a Reference

=item A Class is Simply a Package

=item A Method is Simply a Subroutine

=item Method Invocation

=item WARNING

=item Default UNIVERSAL methods

isa(CLASS), can(METHOD), VERSION( [NEED] )

=item Destructors

=item Summary

=item Two-Phased Garbage Collection

=back

=item SEE ALSO

=back

=head2 perltie - how to hide an object class in a simple variable

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Tying Scalars

TIESCALAR classname, LIST, FETCH this, STORE this, value, DESTROY this

=item Tying Arrays

TIEARRAY classname, LIST, FETCH this, index, STORE this, index, value,
DESTROY this

=item Tying Hashes

USER, HOME, CLOBBER, LIST, TIEHASH classname, LIST, FETCH this, key, STORE
this, key, value, DELETE this, key, CLEAR this, EXISTS this, key, FIRSTKEY
this, NEXTKEY this, lastkey, DESTROY this

=item Tying FileHandles

TIEHANDLE classname, LIST, WRITE this, LIST, PRINT this, LIST, PRINTF this,
LIST, READ this, LIST, READLINE this, GETC this, CLOSE this, DESTROY this

=item The C<untie> Gotcha

=back

=item SEE ALSO

=item BUGS

=item AUTHOR

=back

=head2 perlbot - Bag'o Object Tricks (the BOT)

=over

=item DESCRIPTION

=item OO SCALING TIPS

=item INSTANCE VARIABLES

=item SCALAR INSTANCE VARIABLES

=item INSTANCE VARIABLE INHERITANCE

=item OBJECT RELATIONSHIPS

=item OVERRIDING SUPERCLASS METHODS

=item USING RELATIONSHIP WITH SDBM

=item THINKING OF CODE REUSE

=item CLASS CONTEXT AND THE OBJECT

=item INHERITING A CONSTRUCTOR

=item DELEGATION

=back

=head2 perlipc - Perl interprocess communication (signals, fifos, pipes,
safe subprocesses, sockets, and semaphores)

=over

=item DESCRIPTION

=item Signals

=item Named Pipes

=over

=item WARNING

=back

=item Using open() for IPC

=over

=item Filehandles

=item Background Processes

=item Complete Dissociation of Child from Parent

=item Safe Pipe Opens

=item Bidirectional Communication with Another Process

=item Bidirectional Communication with Yourself

=back

=item Sockets: Client/Server Communication

=over

=item Internet Line Terminators

=item Internet TCP Clients and Servers

=item Unix-Domain TCP Clients and Servers

=back

=item TCP Clients with IO::Socket

=over

=item A Simple Client

C<Proto>, C<PeerAddr>, C<PeerPort>

=item A Webget Client

=item Interactive Client with IO::Socket

=back

=item TCP Servers with IO::Socket

Proto, LocalPort, Listen, Reuse

=item UDP: Message Passing

=item SysV IPC

=item NOTES

=item BUGS

=item AUTHOR

=item SEE ALSO

=back

=head2 perldbmfilter - Perl DBM Filters

=over

=item SYNOPSIS

=item DESCRIPTION

B<filter_store_key>, B<filter_store_value>, B<filter_fetch_key>,
B<filter_fetch_value>

=over

=item The Filter

=item An Example -- the NULL termination problem.

=item Another Example -- Key is a C int.

=back

=item SEE ALSO

=item AUTHOR

=back

=head2 perldebug - Perl debugging

=over

=item DESCRIPTION

=item The Perl Debugger

=over

=item Debugger Commands

h [command], p expr, x expr, V [pkg [vars]], X [vars], T, s [expr], n
[expr], r, <CR>, c [line|sub], l, l min+incr, l min-max, l line, l subname,
-, w [line], f filename, /pattern/, ?pattern?, L, S [[!]regex], t, t expr,
b [line] [condition], b subname [condition], b postpone subname
[condition], b load filename, b compile subname, d [line], D, a [line]
command, a [line], A, W expr, W, O booloption .., O anyoption? .., O
option=value .., < ?, < [ command ], << command, > ?, > command, >>
command, { ?, { [ command ], {{ command, ! number, ! -number, ! pattern, !!
cmd, H -number, q or ^D, R, |dbcmd, ||dbcmd, command, m expr, man [manpage]

=item Configurable Options

C<recallCommand>, C<ShellBang>, C<pager>, C<tkRunning>, C<signalLevel>,
C<warnLevel>, C<dieLevel>, C<AutoTrace>, C<LineInfo>, C<inhibit_exit>,
C<PrintRet>, C<ornaments>, C<frame>, C<maxTraceLen>, C<arrayDepth>,
C<hashDepth>, C<compactDump>, C<veryCompact>, C<globPrint>, C<DumpDBFiles>,
C<DumpPackages>, C<DumpReused>, C<quote>, C<HighBit>, C<undefPrint>,
C<UsageOnly>, C<TTY>, C<noTTY>, C<ReadLine>, C<NonStop>

=item Debugger input/output

Prompt, Multiline commands, Stack backtrace, Line Listing Format, Frame
listing

=item Debugging compile-time statements

=item Debugger Customization

=item Readline Support

=item Editor Support for Debugging

=item The Perl Profiler

=back

=item Debugging regular expressions

=item Debugging memory usage

=item SEE ALSO

=item BUGS

=back

=head2 perlnumber - semantics of numbers and numeric operations in Perl

=over

=item SYNOPSIS

=item DESCRIPTION

=item Storing numbers

=item Numeric operators and numeric conversions

=item Flavors of Perl numeric operations

Arithmetic operators except, C<no integer>, Arithmetic operators except,
C<use integer>, Bitwise operators, C<no integer>, Bitwise operators, C<use
integer>, Operators which expect an integer, Operators which expect a
string

=item AUTHOR

=item SEE ALSO

=back

=head2 perldebguts - Guts of Perl debugging 

=over

=item DESCRIPTION

=item Debugger Internals

=over

=item Writing Your Own Debugger

=back

=item Frame Listing Output Examples

=item Debugging regular expressions

=over

=item Compile-time output

C<anchored> I<STRING> C<at> I<POS>, C<floating> I<STRING> C<at>
I<POS1..POS2>, C<matching floating/anchored>, C<minlen>, C<stclass>
I<TYPE>, C<noscan>, C<isall>, C<GPOS>, C<plus>, C<implicit>, C<with eval>,
C<anchored(TYPE)>

=item Types of nodes

=item Run-time output

=back

=item Debugging Perl memory usage

=over

=item Using C<$ENV{PERL_DEBUG_MSTATS}>

C<buckets SMALLEST(APPROX)..GREATEST(APPROX)>, Free/Used, C<Total sbrk():
SBRKed/SBRKs:CONTINUOUS>, C<pad: 0>, C<heads: 2192>, C<chain: 0>, C<tail:
6144>

=item Example of using B<-DL> switch

C<717>, C<002>, C<054>, C<602>, C<702>, C<704>

=item B<-DL> details

C<!!!>, C<!!>, C<!>

=item Limitations of B<-DL> statistics

=back

=item SEE ALSO

=back

=head2 perldiag - various Perl diagnostics

=over

=item DESCRIPTION

=back

=head2 perlsec - Perl security

=over

=item DESCRIPTION

=over

=item Laundering and Detecting Tainted Data

=item Switches On the "#!" Line

=item Cleaning Up Your Path

=item Security Bugs

=item Protecting Your Programs

=back

=item SEE ALSO

=back

=head2 perltrap - Perl traps for the unwary

=over

=item DESCRIPTION

=over

=item Awk Traps

=item C Traps

=item Sed Traps

=item Shell Traps

=item Perl Traps

=item Perl4 to Perl5 Traps

Discontinuance, Deprecation, and BugFix traps, Parsing Traps, Numerical
Traps, General data type traps, Context Traps - scalar, list contexts,
Precedence Traps, General Regular Expression Traps using s///, etc,
Subroutine, Signal, Sorting Traps, OS Traps, DBM Traps, Unclassified Traps

=item Discontinuance, Deprecation, and BugFix traps

Discontinuance, Deprecation, BugFix, Discontinuance, Discontinuance,
Discontinuance, BugFix, Discontinuance, Discontinuance, BugFix,
Discontinuance, Deprecation, Discontinuance

=item Parsing Traps

Parsing, Parsing, Parsing, Parsing

=item Numerical Traps

Numerical, Numerical, Numerical, Bitwise string ops

=item General data type traps

(Arrays), (Arrays), (Hashes), (Globs), (Globs), (Scalar String),
(Constants), (Scalars), (Variable Suicide)

=item Context Traps - scalar, list contexts

(list context), (scalar context), (scalar context), (list, builtin)

=item Precedence Traps

Precedence, Precedence, Precedence, Precedence, Precedence, Precedence,
Precedence

=item General Regular Expression Traps using s///, etc.

Regular Expression, Regular Expression, Regular Expression, Regular
Expression, Regular Expression, Regular Expression, Regular Expression,
Regular Expression

=item Subroutine, Signal, Sorting Traps

(Signals), (Sort Subroutine), warn() won't let you specify a filehandle

=item OS Traps

(SysV), (SysV)

=item Interpolation Traps

Interpolation, Interpolation, Interpolation, Interpolation, Interpolation,
Interpolation, Interpolation, Interpolation, Interpolation

=item DBM Traps

DBM, DBM

=item Unclassified Traps

C<require>/C<do> trap using returned value, C<split> on empty string with
LIMIT specified

=back

=back

=head2 perlport - Writing portable Perl

=over

=item DESCRIPTION

Not all Perl programs have to be portable, Nearly all of Perl already I<is>
portable

=item ISSUES

=over

=item Newlines

=item Numbers endianness and Width

=item Files and Filesystems

=item System Interaction

=item Interprocess Communication (IPC)

=item External Subroutines (XS)

=item Standard Modules

=item Time and Date

=item Character sets and character encoding

=item Internationalisation

=item System Resources

=item Security

=item Style

=back

=item CPAN Testers

Mailing list: cpan-testers@perl.org, Testing results:
http://testers.cpan.org/

=item PLATFORMS

=over

=item Unix

=item DOS and Derivatives

Build instructions for OS/2, L<perlos2>

=item S<Mac OS>

=item VMS

=item VOS

=item EBCDIC Platforms

=item Acorn RISC OS

=item Other perls

=back

=item FUNCTION IMPLEMENTATIONS

=over

=item Alphabetical Listing of Perl Functions

-I<X> FILEHANDLE, -I<X> EXPR, -I<X>, alarm SECONDS, alarm, binmode
FILEHANDLE, chmod LIST, chown LIST, chroot FILENAME, chroot, crypt
PLAINTEXT,SALT, dbmclose HASH, dbmopen HASH,DBNAME,MODE, dump LABEL, exec
LIST, fcntl FILEHANDLE,FUNCTION,SCALAR, flock FILEHANDLE,OPERATION, fork,
getlogin, getpgrp PID, getppid, getpriority WHICH,WHO, getpwnam NAME,
getgrnam NAME, getnetbyname NAME, getpwuid UID, getgrgid GID, getnetbyaddr
ADDR,ADDRTYPE, getprotobynumber NUMBER, getservbyport PORT,PROTO, getpwent,
getgrent, gethostent, getnetent, getprotoent, getservent, setpwent,
setgrent, sethostent STAYOPEN, setnetent STAYOPEN, setprotoent STAYOPEN,
setservent STAYOPEN, endpwent, endgrent, endhostent, endnetent,
endprotoent, endservent, getsockopt SOCKET,LEVEL,OPTNAME, glob EXPR, glob,
ioctl FILEHANDLE,FUNCTION,SCALAR, kill SIGNAL, LIST, link OLDFILE,NEWFILE,
lstat FILEHANDLE, lstat EXPR, lstat, msgctl ID,CMD,ARG, msgget KEY,FLAGS,
msgsnd ID,MSG,FLAGS, msgrcv ID,VAR,SIZE,TYPE,FLAGS, open FILEHANDLE,EXPR,
open FILEHANDLE, pipe READHANDLE,WRITEHANDLE, readlink EXPR, readlink,
select RBITS,WBITS,EBITS,TIMEOUT, semctl ID,SEMNUM,CMD,ARG, semget
KEY,NSEMS,FLAGS, semop KEY,OPSTRING, setgrent, setpgrp PID,PGRP,
setpriority WHICH,WHO,PRIORITY, setpwent, setsockopt
SOCKET,LEVEL,OPTNAME,OPTVAL, shmctl ID,CMD,ARG, shmget KEY,SIZE,FLAGS,
shmread ID,VAR,POS,SIZE, shmwrite ID,STRING,POS,SIZE, socketpair
SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL, stat FILEHANDLE, stat EXPR, stat,
symlink OLDFILE,NEWFILE, syscall LIST, sysopen
FILEHANDLE,FILENAME,MODE,PERMS, system LIST, times, truncate
FILEHANDLE,LENGTH, truncate EXPR,LENGTH, umask EXPR, umask, utime LIST,
wait, waitpid PID,FLAGS

=back

=item CHANGES

v1.47, 22 March 2000, v1.46, 12 February 2000, v1.45, 20 December 1999,
v1.44, 19 July 1999, v1.43, 24 May 1999, v1.42, 22 May 1999, v1.41, 19 May
1999, v1.40, 11 April 1999, v1.39, 11 February 1999, v1.38, 31 December
1998, v1.37, 19 December 1998, v1.36, 9 September 1998, v1.35, 13 August
1998, v1.33, 06 August 1998, v1.32, 05 August 1998, v1.30, 03 August 1998,
v1.23, 10 July 1998

=item Supported Platforms

=item SEE ALSO

=item AUTHORS / CONTRIBUTORS

=item VERSION

=back

=head2 perlstyle - Perl style guide

=over

=item DESCRIPTION

=back

=head2 perlpod - plain old documentation

=over

=item DESCRIPTION

=over

=item Verbatim Paragraph

=item Command Paragraph

=item Ordinary Block of Text

=item The Intent

=item Embedding Pods in Perl Modules

=item Common Pod Pitfalls

=back

=item SEE ALSO

=item AUTHOR

=back

=head2 perlbook - Perl book information

=over

=item DESCRIPTION

=back

=head2 perlembed - how to embed perl in your C program

=over

=item DESCRIPTION

=over

=item PREAMBLE

B<Use C from Perl?>, B<Use a Unix program from Perl?>, B<Use Perl from
Perl?>, B<Use C from C?>, B<Use Perl from C?>

=item ROADMAP

=item Compiling your C program

=item Adding a Perl interpreter to your C program

=item Calling a Perl subroutine from your C program

=item Evaluating a Perl statement from your C program

=item Performing Perl pattern matches and substitutions from your C program

=item Fiddling with the Perl stack from your C program

=item Maintaining a persistent interpreter

=item Maintaining multiple interpreter instances

=item Using Perl modules, which themselves use C libraries, from your C
program

=back

=item Embedding Perl under Win32

=item MORAL

=item AUTHOR

=item COPYRIGHT

=back

=head2 perlapio - perl's IO abstraction interface.

=over

=item SYNOPSIS

=item DESCRIPTION

B<PerlIO *>, B<PerlIO_stdin()>, B<PerlIO_stdout()>, B<PerlIO_stderr()>,
B<PerlIO_open(path, mode)>, B<PerlIO_fdopen(fd,mode)>,
B<PerlIO_printf(f,fmt,...)>, B<PerlIO_vprintf(f,fmt,a)>,
B<PerlIO_stdoutf(fmt,...)>, B<PerlIO_read(f,buf,count)>,
B<PerlIO_write(f,buf,count)>, B<PerlIO_close(f)>, B<PerlIO_puts(f,s)>,
B<PerlIO_putc(f,c)>, B<PerlIO_ungetc(f,c)>, B<PerlIO_getc(f)>,
B<PerlIO_eof(f)>, B<PerlIO_error(f)>, B<PerlIO_fileno(f)>,
B<PerlIO_clearerr(f)>, B<PerlIO_flush(f)>, B<PerlIO_tell(f)>,
B<PerlIO_seek(f,o,w)>, B<PerlIO_getpos(f,p)>, B<PerlIO_setpos(f,p)>,
B<PerlIO_rewind(f)>, B<PerlIO_tmpfile()>

=over

=item Co-existence with stdio

B<PerlIO_importFILE(f,flags)>, B<PerlIO_exportFILE(f,flags)>,
B<PerlIO_findFILE(f)>, B<PerlIO_releaseFILE(p,f)>, B<PerlIO_setlinebuf(f)>,
B<PerlIO_has_cntptr(f)>, B<PerlIO_get_ptr(f)>, B<PerlIO_get_cnt(f)>,
B<PerlIO_canset_cnt(f)>, B<PerlIO_fast_gets(f)>,
B<PerlIO_set_ptrcnt(f,p,c)>, B<PerlIO_set_cnt(f,c)>, B<PerlIO_has_base(f)>,
B<PerlIO_get_base(f)>, B<PerlIO_get_bufsiz(f)>

=back

=back

=head2 perlxs - XS language reference manual

=over

=item DESCRIPTION

=over

=item Introduction

=item On The Road

=item The Anatomy of an XSUB

=item The Argument Stack

=item The RETVAL Variable

=item The MODULE Keyword

=item The PACKAGE Keyword

=item The PREFIX Keyword

=item The OUTPUT: Keyword

=item The CODE: Keyword

=item The INIT: Keyword

=item The NO_INIT Keyword

=item Initializing Function Parameters

=item Default Parameter Values

=item The PREINIT: Keyword

=item The SCOPE: Keyword

=item The INPUT: Keyword

=item Variable-length Parameter Lists

=item The C_ARGS: Keyword

=item The PPCODE: Keyword

=item Returning Undef And Empty Lists

=item The REQUIRE: Keyword

=item The CLEANUP: Keyword

=item The BOOT: Keyword

=item The VERSIONCHECK: Keyword

=item The PROTOTYPES: Keyword

=item The PROTOTYPE: Keyword

=item The ALIAS: Keyword

=item The INTERFACE: Keyword

=item The INTERFACE_MACRO: Keyword

=item The INCLUDE: Keyword

=item The CASE: Keyword

=item The & Unary Operator

=item Inserting Comments and C Preprocessor Directives

=item Using XS With C++

=item Interface Strategy

=item Perl Objects And C Structures

=item The Typemap

=back

=item EXAMPLES

=item XS VERSION

=item AUTHOR

=back

=head2 perlxstut, perlXStut - Tutorial for writing XSUBs

=over

=item DESCRIPTION

=item SPECIAL NOTES

=over

=item make

=item Version caveat

=item Dynamic Loading versus Static Loading

=back

=item TUTORIAL

=over

=item EXAMPLE 1

=item EXAMPLE 2

=item What has gone on?

=item Writing good test scripts

=item EXAMPLE 3

=item What's new here?

=item Input and Output Parameters

=item The XSUBPP Program

=item The TYPEMAP file

=item Warning about Output Arguments

=item EXAMPLE 4

=item What has happened here?

=item Anatomy of .xs file

=item Getting the fat out of XSUBs

=item More about XSUB arguments

=item The Argument Stack

=item Extending your Extension

=item Documenting your Extension

=item Installing your Extension

=item EXAMPLE 5

=item New Things in this Example

=item EXAMPLE 6 (Coming Soon)

=item EXAMPLE 7 (Coming Soon)

=item EXAMPLE 8 (Coming Soon)

=item EXAMPLE 9 (Coming Soon)

=item Troubleshooting these Examples

=back

=item See also

=item Author

=over

=item Last Changed

=back

=back

=head2 perlguts - Introduction to the Perl API

=over

=item DESCRIPTION

=item Variables

=over

=item Datatypes

=item What is an "IV"?

=item Working with SVs

=item What's Really Stored in an SV?

=item Working with AVs

=item Working with HVs

=item Hash API Extensions

=item References

=item Blessed References and Class Objects

=item Creating New Variables

=item Reference Counts and Mortality

=item Stashes and Globs

=item Double-Typed SVs

=item Magic Variables

=item Assigning Magic

=item Magic Virtual Tables

=item Finding Magic

=item Understanding the Magic of Tied Hashes and Arrays

=item Localizing changes

C<SAVEINT(int i)>, C<SAVEIV(IV i)>, C<SAVEI32(I32 i)>, C<SAVELONG(long i)>,
C<SAVESPTR(s)>, C<SAVEPPTR(p)>, C<SAVEFREESV(SV *sv)>, C<SAVEFREEOP(OP
*op)>, C<SAVEFREEPV(p)>, C<SAVECLEARSV(SV *sv)>, C<SAVEDELETE(HV *hv, char
*key, I32 length)>, C<SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void
*p)>, C<SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)>, C<SAVESTACK_POS()>,
C<SV* save_scalar(GV *gv)>, C<AV* save_ary(GV *gv)>, C<HV* save_hash(GV
*gv)>, C<void save_item(SV *item)>, C<void save_list(SV **sarg, I32
maxsarg)>, C<SV* save_svref(SV **sptr)>, C<void save_aptr(AV **aptr)>,
C<void save_hptr(HV **hptr)>

=back

=item Subroutines

=over

=item XSUBs and the Argument Stack

=item Calling Perl Routines from within C Programs

=item Memory Allocation

=item PerlIO

=item Putting a C value on Perl stack

=item Scratchpads

=item Scratchpads and recursion

=back

=item Compiled code

=over

=item Code tree

=item Examining the tree

=item Compile pass 1: check routines

=item Compile pass 1a: constant folding

=item Compile pass 2: context propagation

=item Compile pass 3: peephole optimization

=back

=item How multiple interpreters and concurrency are supported

=over

=item Background and PERL_IMPLICIT_CONTEXT

=item How do I use all this in extensions?

=item Future Plans and PERL_IMPLICIT_SYS

=back

=item AUTHORS

=item SEE ALSO

=back

=head2 perlcall - Perl calling conventions from C

=over

=item DESCRIPTION

An Error Handler, An Event Driven Program

=item THE CALL_ FUNCTIONS

call_sv, call_pv, call_method, call_argv

=item FLAG VALUES

=over

=item  G_VOID

=item  G_SCALAR

=item G_ARRAY

=item G_DISCARD

=item G_NOARGS

=item G_EVAL

=item G_KEEPERR

=item Determining the Context

=back

=item KNOWN PROBLEMS

=item EXAMPLES

=over

=item No Parameters, Nothing returned

=item Passing Parameters

=item Returning a Scalar

=item Returning a list of values

=item Returning a list in a scalar context

=item Returning Data from Perl via the parameter list

=item Using G_EVAL

=item Using G_KEEPERR

=item Using call_sv

=item Using call_argv

=item Using call_method

=item Using GIMME_V

=item Using Perl to dispose of temporaries

=item Strategies for storing Callback Context Information

1. Ignore the problem - Allow only 1 callback, 2. Create a sequence of
callbacks - hard wired limit, 3. Use a parameter to map to the Perl
callback

=item Alternate Stack Manipulation

=item Creating and calling an anonymous subroutine in C

=back

=item SEE ALSO

=item AUTHOR

=item DATE

=back

=head2 perlcompile - Introduction to the Perl Compiler-Translator 

=over

=item DESCRIPTION

=over

=item Layout

B::Bytecode, B::C, B::CC, B::Lint, B::Deparse, B::Xref

=back

=item Using The Back Ends

=over

=item The Cross Referencing Back End

i, &, s, r

=item The Decompiling Back End

=item The Lint Back End

=item The Simple C Back End

=item The Bytecode Back End

=item The Optimized C Back End

B, O, B::Asmdata, B::Assembler, B::Bblock, B::Bytecode, B::C, B::CC,
B::Debug, B::Deparse, B::Disassembler, B::Lint, B::Showlex, B::Stackobj,
B::Stash, B::Terse, B::Xref

=back

=item KNOWN PROBLEMS

=item AUTHOR

=back

=head2 perlapi - autogenerated documentation for the perl public API

=over

=item DESCRIPTION

AvFILL, av_clear, av_extend, av_fetch, av_len, av_make, av_pop, av_push,
av_shift, av_store, av_undef, av_unshift, call_argv, call_method, call_pv,
call_sv, CLASS, Copy, croak, CvSTASH, dMARK, dORIGMARK, dSP, dXSARGS,
dXSI32, ENTER, eval_pv, eval_sv, EXTEND, fbm_compile, fbm_instr, FREETMPS,
get_av, get_cv, get_hv, get_sv, GIMME, GIMME_V, GvSV, gv_fetchmeth,
gv_fetchmethod, gv_fetchmethod_autoload, gv_stashpv, gv_stashsv, G_ARRAY,
G_DISCARD, G_EVAL, G_NOARGS, G_SCALAR, G_VOID, HEf_SVKEY, HeHASH, HeKEY,
HeKLEN, HePV, HeSVKEY, HeSVKEY_force, HeSVKEY_set, HeVAL, HvNAME, hv_clear,
hv_delete, hv_delete_ent, hv_exists, hv_exists_ent, hv_fetch, hv_fetch_ent,
hv_iterinit, hv_iterkey, hv_iterkeysv, hv_iternext, hv_iternextsv,
hv_iterval, hv_magic, hv_store, hv_store_ent, hv_undef, isALNUM, isALPHA,
isDIGIT, isLOWER, isSPACE, isUPPER, items, ix, LEAVE, looks_like_number,
MARK, mg_clear, mg_copy, mg_find, mg_free, mg_get, mg_length, mg_magical,
mg_set, Move, New, newAV, Newc, newCONSTSUB, newHV, newRV_inc, newRV_noinc,
NEWSV, newSViv, newSVnv, newSVpv, newSVpvf, newSVpvn, newSVrv, newSVsv,
newSVuv, newXS, newXSproto, Newz, Nullav, Nullch, Nullcv, Nullhv, Nullsv,
ORIGMARK, perl_alloc, perl_construct, perl_destruct, perl_free, perl_parse,
perl_run, PL_DBsingle, PL_DBsub, PL_DBtrace, PL_dowarn, PL_modglobal,
PL_na, PL_sv_no, PL_sv_undef, PL_sv_yes, POPi, POPl, POPn, POPp, POPs,
PUSHi, PUSHMARK, PUSHn, PUSHp, PUSHs, PUSHu, PUTBACK, Renew, Renewc,
require_pv, RETVAL, Safefree, savepv, savepvn, SAVETMPS, SP, SPAGAIN, ST,
strEQ, strGE, strGT, strLE, strLT, strNE, strnEQ, strnNE, StructCopy,
SvCUR, SvCUR_set, SvEND, SvGETMAGIC, SvGROW, SvIOK, SvIOKp, SvIOK_off,
SvIOK_on, SvIOK_only, SvIV, SvIVX, SvLEN, SvNIOK, SvNIOKp, SvNIOK_off,
SvNOK, SvNOKp, SvNOK_off, SvNOK_on, SvNOK_only, SvNV, SvNVX, SvOK, SvOOK,
SvPOK, SvPOKp, SvPOK_off, SvPOK_on, SvPOK_only, SvPV, SvPVX, SvPV_force,
SvPV_nolen, SvREFCNT, SvREFCNT_dec, SvREFCNT_inc, SvROK, SvROK_off,
SvROK_on, SvRV, SvSETMAGIC, SvSetSV, SvSetSV_nosteal, SvSTASH, SvTAINT,
SvTAINTED, SvTAINTED_off, SvTAINTED_on, SvTRUE, SvTYPE, svtype, SVt_IV,
SVt_NV, SVt_PV, SVt_PVAV, SVt_PVCV, SVt_PVHV, SVt_PVMG, SvUPGRADE, SvUV,
SvUVX, sv_2mortal, sv_bless, sv_catpv, sv_catpvf, sv_catpvf_mg, sv_catpvn,
sv_catpvn_mg, sv_catpv_mg, sv_catsv, sv_catsv_mg, sv_chop, sv_cmp, sv_dec,
sv_derived_from, sv_eq, sv_grow, sv_inc, sv_insert, sv_isa, sv_isobject,
sv_len, sv_magic, sv_mortalcopy, sv_newmortal, sv_setiv, sv_setiv_mg,
sv_setnv, sv_setnv_mg, sv_setpv, sv_setpvf, sv_setpvf_mg, sv_setpviv,
sv_setpviv_mg, sv_setpvn, sv_setpvn_mg, sv_setpv_mg, sv_setref_iv,
sv_setref_nv, sv_setref_pv, sv_setref_pvn, sv_setsv, sv_setsv_mg, sv_setuv,
sv_setuv_mg, sv_unref, sv_upgrade, sv_usepvn, sv_usepvn_mg, sv_vcatpvfn,
sv_vsetpvfn, THIS, toLOWER, toUPPER, warn, XPUSHi, XPUSHn, XPUSHp, XPUSHs,
XPUSHu, XS, XSRETURN, XSRETURN_EMPTY, XSRETURN_IV, XSRETURN_NO,
XSRETURN_NV, XSRETURN_PV, XSRETURN_UNDEF, XSRETURN_YES, XST_mIV, XST_mNO,
XST_mNV, XST_mPV, XST_mUNDEF, XST_mYES, XS_VERSION, XS_VERSION_BOOTCHECK,
Zero

=item AUTHORS

=item SEE ALSO

=back

=head2 perlintern - autogenerated documentation of purely B<internal> 
		 Perl functions

=over

=item DESCRIPTION

=item AUTHORS

=item SEE ALSO

=back

=head2 perlhist - the Perl history records

=over

=item DESCRIPTION

=item INTRODUCTION

=item THE KEEPERS OF THE PUMPKIN

=over

=item PUMPKIN?

=back

=item THE RECORDS

=over

=item SELECTED RELEASE SIZES

=item SELECTED PATCH SIZES

=back

=item THE KEEPERS OF THE RECORDS

=back

=head1 PRAGMA DOCUMENTATION

=head2 attrs - set/get attributes of a subroutine (deprecated)

=over

=item SYNOPSIS

=item DESCRIPTION

method, locked

=back

=head2 re - Perl pragma to alter regular expression behaviour

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 attributes - get/set subroutine or variable attributes

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Built-in Attributes

locked, method, lvalue

=item Available Subroutines

get, reftype

=item Package-specific Attribute Handling

FETCH_I<type>_ATTRIBUTES, MODIFY_I<type>_ATTRIBUTES

=item Syntax of Attribute Lists

=back

=item EXPORTS

=over

=item Default exports

=item Available exports

=item Export tags defined

=back

=item EXAMPLES

=item SEE ALSO

=back

=head2 attrs - set/get attributes of a subroutine (deprecated)

=over

=item SYNOPSIS

=item DESCRIPTION

method, locked

=back

=head2 autouse - postpone load of modules until a function is used

=over

=item SYNOPSIS

=item DESCRIPTION

=item WARNING

=item AUTHOR

=item SEE ALSO

=back

=head2 base - Establish IS-A relationship with base class at compile time

=over

=item SYNOPSIS

=item DESCRIPTION

=item HISTORY

=item SEE ALSO

=back

=head2 blib - Use MakeMaker's uninstalled version of a package

=over

=item SYNOPSIS

=item DESCRIPTION

=item BUGS

=item AUTHOR

=back

=head2 bytes - Perl pragma to force byte semantics rather than character
semantics

=over

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=back

=head2 charnames - define character names for C<\N{named}> string literal
escape.

=over

=item SYNOPSIS

=item DESCRIPTION

=item CUSTOM TRANSLATORS

=item BUGS

=back

=head2 constant - Perl pragma to declare constants

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTES

=item TECHNICAL NOTE

=item BUGS

=item AUTHOR

=item COPYRIGHT

=back

=head2 diagnostics - Perl compiler pragma to force verbose warning
diagnostics

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item The C<diagnostics> Pragma

=item The I<splain> Program

=back

=item EXAMPLES

=item INTERNALS

=item BUGS

=item AUTHOR

=back

=head2 fields - compile-time class fields

=over

=item SYNOPSIS

=item DESCRIPTION

new, phash

=item SEE ALSO

=back

=head2 filetest - Perl pragma to control the filetest permission operators

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item subpragma access

=back

=back

=head2 integer - Perl pragma to compute arithmetic in integer instead of
double

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 less - perl pragma to request less of something from the compiler

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 lib - manipulate @INC at compile time

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Adding directories to @INC

=item Deleting directories from @INC

=item Restoring original @INC

=back

=item SEE ALSO

=item AUTHOR

=back

=head2 locale - Perl pragma to use and avoid POSIX locales for built-in
operations

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 open - perl pragma to set default disciplines for input and output

=over

=item SYNOPSIS

=item DESCRIPTION

=item UNIMPLEMENTED FUNCTIONALITY

=item SEE ALSO

=back

=head2 ops - Perl pragma to restrict unsafe operations when compiling

=over

=item SYNOPSIS	

=item DESCRIPTION

=item SEE ALSO

=back

=head2 overload - Package for overloading perl operations

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Declaration of overloaded functions

=item Calling Conventions for Binary Operations

FALSE, TRUE, C<undef>

=item Calling Conventions for Unary Operations

=item Calling Conventions for Mutators

C<++> and C<-->, C<x=> and other assignment versions

=item Overloadable Operations

I<Arithmetic operations>, I<Comparison operations>, I<Bit operations>,
I<Increment and decrement>, I<Transcendental functions>, I<Boolean, string
and numeric conversion>, I<Iteration>, I<Dereferencing>, I<Special>

=item Inheritance and overloading

Strings as values of C<use overload> directive, Overloading of an operation
is inherited by derived classes

=back

=item SPECIAL SYMBOLS FOR C<use overload>

=over

=item Last Resort

=item Fallback 

C<undef>, TRUE, defined, but FALSE

=item Copy Constructor

B<Example>

=back

=item MAGIC AUTOGENERATION

I<Assignment forms of arithmetic operations>, I<Conversion operations>,
I<Increment and decrement>, C<abs($a)>, I<Unary minus>, I<Negation>,
I<Concatenation>, I<Comparison operations>, I<Iterator>, I<Dereferencing>,
I<Copy operator>

=item Losing overloading

=item Run-time Overloading

=item Public functions

overload::StrVal(arg), overload::Overloaded(arg), overload::Method(obj,op)

=item Overloading constants

integer, float, binary, q, qr

=item IMPLEMENTATION

=item Metaphor clash

=item Cookbook

=over

=item Two-face scalars

=item Two-face references

=item Symbolic calculator

=item I<Really> symbolic calculator

=back

=item AUTHOR

=item DIAGNOSTICS

=item BUGS

=back

=head2 re - Perl pragma to alter regular expression behaviour

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 sigtrap - Perl pragma to enable simple signal handling

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

=over

=item SIGNAL HANDLERS

B<stack-trace>, B<die>, B<handler> I<your-handler>

=item SIGNAL LISTS

B<normal-signals>, B<error-signals>, B<old-interface-signals>

=item OTHER

B<untrapped>, B<any>, I<signal>, I<number>

=back

=item EXAMPLES

=back

=head2 strict - Perl pragma to restrict unsafe constructs

=over

=item SYNOPSIS

=item DESCRIPTION

C<strict refs>, C<strict vars>, C<strict subs>

=back

=head2 subs - Perl pragma to predeclare sub names

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 utf8 - Perl pragma to enable/disable UTF-8 in source code

=over

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=back

=head2 vars - Perl pragma to predeclare global variable names (obsolete)

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 warnings - Perl pragma to control optional warnings

=over

=item SYNOPSIS

=item DESCRIPTION

use warnings::register, warnings::enabled([$category]),
warnings::warn([$category,] $message)

=back

=head1 MODULE DOCUMENTATION

=head2 AnyDBM_File - provide framework for multiple DBMs

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item DBM Comparisons

[0], [1], [2], [3]

=back

=item SEE ALSO

=back

=head2 AutoLoader - load subroutines only on demand

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Subroutine Stubs

=item Using B<AutoLoader>'s AUTOLOAD Subroutine

=item Overriding B<AutoLoader>'s AUTOLOAD Subroutine

=item Package Lexicals

=item B<AutoLoader> vs. B<SelfLoader>

=back

=item CAVEATS

=item SEE ALSO

=back

=head2 AutoSplit - split a package for autoloading

=over

=item SYNOPSIS

=item DESCRIPTION

$keep, $check, $modtime

=over

=item Multiple packages

=back

=item DIAGNOSTICS

=back

=head2 B - The Perl Compiler

=over

=item SYNOPSIS

=item DESCRIPTION

=item OVERVIEW OF CLASSES

=over

=item SV-RELATED CLASSES

=item B::SV METHODS

REFCNT, FLAGS

=item B::IV METHODS

IV, IVX, needs64bits, packiv

=item B::NV METHODS

NV, NVX

=item B::RV METHODS

RV

=item B::PV METHODS

PV

=item B::PVMG METHODS

MAGIC, SvSTASH

=item B::MAGIC METHODS

MOREMAGIC, PRIVATE, TYPE, FLAGS, OBJ, PTR

=item B::PVLV METHODS

TARGOFF, TARGLEN, TYPE, TARG

=item B::BM METHODS

USEFUL, PREVIOUS, RARE, TABLE

=item B::GV METHODS

is_empty, NAME, STASH, SV, IO, FORM, AV, HV, EGV, CV, CVGEN, LINE, FILE,
FILEGV, GvREFCNT, FLAGS

=item B::IO METHODS

LINES, PAGE, PAGE_LEN, LINES_LEFT, TOP_NAME, TOP_GV, FMT_NAME, FMT_GV,
BOTTOM_NAME, BOTTOM_GV, SUBPROCESS, IoTYPE, IoFLAGS

=item B::AV METHODS

FILL, MAX, OFF, ARRAY, AvFLAGS

=item B::CV METHODS

STASH, START, ROOT, GV, FILE, DEPTH, PADLIST, OUTSIDE, XSUB, XSUBANY,
CvFLAGS

=item B::HV METHODS

FILL, MAX, KEYS, RITER, NAME, PMROOT, ARRAY

=item OP-RELATED CLASSES

=item B::OP METHODS

next, sibling, name, ppaddr, desc, targ, type, seq, flags, private

=item B::UNOP METHOD

first

=item B::BINOP METHOD

last

=item B::LOGOP METHOD

other

=item B::LISTOP METHOD

children

=item B::PMOP METHODS

pmreplroot, pmreplstart, pmnext, pmregexp, pmflags, pmpermflags, precomp

=item B::SVOP METHOD

sv, gv

=item B::PADOP METHOD

padix

=item B::PVOP METHOD

pv

=item B::LOOP METHODS

redoop, nextop, lastop

=item B::COP METHODS

label, stash, file, cop_seq, arybase, line

=back

=item FUNCTIONS EXPORTED BY C<B>

main_cv, init_av, main_root, main_start, comppadlist, sv_undef, sv_yes,
sv_no, amagic_generation, walkoptree(OP, METHOD), walkoptree_debug(DEBUG),
walksymtable(SYMREF, METHOD, RECURSE), svref_2object(SV), ppname(OPNUM),
hash(STR), cast_I32(I), minus_c, cstring(STR), class(OBJ), threadsv_names

=item AUTHOR

=back

=head2 B::Asmdata - Autogenerated data about Perl ops, used to generate
bytecode

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Assembler - Assemble Perl bytecode

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Bblock - Walk basic blocks

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Bytecode - Perl compiler's bytecode backend

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

B<-ofilename>, B<-afilename>, B<-->, B<-f>, B<-fcompress-nullops>,
B<-fomit-sequence-numbers>, B<-fbypass-nullops>, B<-fstrip-syntax-tree>,
B<-On>, B<-D>, B<-Do>, B<-Db>, B<-Da>, B<-DC>, B<-S>, B<-m>

=item EXAMPLES

=item BUGS

=item AUTHOR

=back

=head2 B::C - Perl compiler's C backend

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

B<-ofilename>, B<-v>, B<-->, B<-uPackname>, B<-D>, B<-Do>, B<-Dc>, B<-DA>,
B<-DC>, B<-DM>, B<-f>, B<-fcog>, B<-fno-cog>, B<-On>, B<-llimit>

=item EXAMPLES

=item BUGS

=item AUTHOR

=back

=head2 B::CC - Perl compiler's optimized C translation backend

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

B<-ofilename>, B<-v>, B<-->, B<-uPackname>, B<-mModulename>, B<-D>, B<-Dr>,
B<-DO>, B<-Ds>, B<-Dp>, B<-Dq>, B<-Dl>, B<-Dt>, B<-f>,
B<-ffreetmps-each-bblock>, B<-ffreetmps-each-loop>, B<-fomit-taint>, B<-On>

=item EXAMPLES

=item BUGS

=item DIFFERENCES

=over

=item Loops

=item Context of ".."

=item Arithmetic

=item Deprecated features

=back

=item AUTHOR

=back

=head2 B::Debug - Walk Perl syntax tree, printing debug info about ops

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Deparse - Perl compiler backend to produce perl code

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

B<-l>, B<-p>, B<-q>, B<-u>I<PACKAGE>, B<-s>I<LETTERS>, B<C>, B<i>I<NUMBER>,
B<T>, B<v>I<STRING>B<.>

=item USING B::Deparse AS A MODULE

=over

=item Synopsis

=item Description

=item new

=item coderef2text

=back

=item BUGS

=item AUTHOR

=back

=head2 B::Disassembler - Disassemble Perl bytecode

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Lint - Perl lint

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS AND LINT CHECKS

B<context>, B<implicit-read> and B<implicit-write>, B<dollar-underscore>,
B<private-names>, B<undefined-subs>, B<regexp-variables>, B<all>, B<none>

=item NON LINT-CHECK OPTIONS

B<-u Package>

=item BUGS

=item AUTHOR

=back

=head2 B::O, O - Generic interface to Perl Compiler backends

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONVENTIONS

=item IMPLEMENTATION

=item AUTHOR

=back

=head2 B::Showlex - Show lexical variables used in functions or files

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Stackobj - Helper module for CC backend

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Terse - Walk Perl syntax tree, printing terse info about ops

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 B::Xref - Generates cross reference reports for Perl programs

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

C<-oFILENAME>, C<-r>, C<-D[tO]>

=item BUGS

=item AUTHOR

=back

=head2 Bblock, B::Bblock - Walk basic blocks

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 Benchmark - benchmark running times of Perl code

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Methods

new, debug, iters

=item Standard Exports

timeit(COUNT, CODE), timethis ( COUNT, CODE, [ TITLE, [ STYLE ]] ),
timethese ( COUNT, CODEHASHREF, [ STYLE ] ), timediff ( T1, T2 ), timestr (
TIMEDIFF, [ STYLE, [ FORMAT ] ] )

=item Optional Exports

clearcache ( COUNT ), clearallcache ( ), cmpthese ( COUT, CODEHASHREF, [
STYLE ] ), cmpthese ( RESULTSHASHREF ), countit(TIME, CODE), disablecache (
), enablecache ( ), timesum ( T1, T2 )

=back

=item NOTES

=item EXAMPLES

=item INHERITANCE

=item CAVEATS

=item SEE ALSO

=item AUTHORS

=item MODIFICATION HISTORY

=back

=head2 ByteLoader - load byte compiled perl code

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=item SEE ALSO

=back

=head2 Bytecode, B::Bytecode - Perl compiler's bytecode backend

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

B<-ofilename>, B<-afilename>, B<-->, B<-f>, B<-fcompress-nullops>,
B<-fomit-sequence-numbers>, B<-fbypass-nullops>, B<-fstrip-syntax-tree>,
B<-On>, B<-D>, B<-Do>, B<-Db>, B<-Da>, B<-DC>, B<-S>, B<-m>

=item EXAMPLES

=item BUGS

=item AUTHOR

=back

=head2 CGI - Simple Common Gateway Interface Class

=over

=item SYNOPSIS

=item ABSTRACT

=item DESCRIPTION

=over

=item PROGRAMMING STYLE

=item CALLING CGI.PM ROUTINES

1. Use another name for the argument, if one is available.  Forexample,
-value is an alias for -values, 2. Change the capitalization, e.g. -Values,
3. Put quotes around the argument name, e.g. '-values'

=item CREATING A NEW QUERY OBJECT (OBJECT-ORIENTED STYLE):

=item CREATING A NEW QUERY OBJECT FROM AN INPUT FILE

=item FETCHING A LIST OF KEYWORDS FROM THE QUERY:

=item FETCHING THE NAMES OF ALL THE PARAMETERS PASSED TO YOUR SCRIPT:

=item FETCHING THE VALUE OR VALUES OF A SINGLE NAMED PARAMETER:

=item SETTING THE VALUE(S) OF A NAMED PARAMETER:

=item APPENDING ADDITIONAL VALUES TO A NAMED PARAMETER:

=item IMPORTING ALL PARAMETERS INTO A NAMESPACE:

=item DELETING A PARAMETER COMPLETELY:

=item DELETING ALL PARAMETERS:

=item DIRECT ACCESS TO THE PARAMETER LIST:

=item FETCHING THE PARAMETER LIST AS A HASH:

=item SAVING THE STATE OF THE SCRIPT TO A FILE:

=item RETRIEVING CGI ERRORS

=item USING THE FUNCTION-ORIENTED INTERFACE

B<:cgi>, B<:form>, B<:html2>, B<:html3>, B<:netscape>, B<:html>,
B<:standard>, B<:all>

=item PRAGMAS

-any, -compile, -nph, -newstyle_urls, -autoload, -no_debug,
-private_tempfiles

=item SPECIAL FORMS FOR IMPORTING HTML-TAG FUNCTIONS

1. start_table() (generates a <TABLE> tag), 2. end_table() (generates a
</TABLE> tag), 3. start_ul() (generates a <UL> tag), 4. end_ul() (generates
a </UL> tag)

=back

=item GENERATING DYNAMIC DOCUMENTS

=over

=item CREATING A STANDARD HTTP HEADER:

=item GENERATING A REDIRECTION HEADER

=item CREATING THE HTML DOCUMENT HEADER

B<Parameters:>, 4, 5, 6..

=item ENDING THE HTML DOCUMENT:

=item CREATING A SELF-REFERENCING URL THAT PRESERVES STATE INFORMATION:

=item OBTAINING THE SCRIPT'S URL

B<-absolute>, B<-relative>, B<-full>, B<-path> (B<-path_info>), B<-query>
(B<-query_string>)

=item MIXING POST AND URL PARAMETERS

=back

=item CREATING STANDARD HTML ELEMENTS:

=over

=item PROVIDING ARGUMENTS TO HTML SHORTCUTS

=item THE DISTRIBUTIVE PROPERTY OF HTML SHORTCUTS

=item HTML SHORTCUTS AND LIST INTERPOLATION

=item NON-STANDARD HTML SHORTCUTS

=item PRETTY-PRINTING HTML

=back

=item CREATING FILL-OUT FORMS:

=over

=item CREATING AN ISINDEX TAG

=item STARTING AND ENDING A FORM

B<application/x-www-form-urlencoded>, B<multipart/form-data>

=item CREATING A TEXT FIELD

B<Parameters>

=item CREATING A BIG TEXT FIELD

=item CREATING A PASSWORD FIELD

=item CREATING A FILE UPLOAD FIELD

B<Parameters>

=item CREATING A POPUP MENU

=item CREATING A SCROLLING LIST

B<Parameters:>

=item CREATING A GROUP OF RELATED CHECKBOXES

B<Parameters:>

=item CREATING A STANDALONE CHECKBOX

B<Parameters:>

=item CREATING A RADIO BUTTON GROUP

B<Parameters:>

=item CREATING A SUBMIT BUTTON 

B<Parameters:>

=item CREATING A RESET BUTTON

=item CREATING A DEFAULT BUTTON

=item CREATING A HIDDEN FIELD

B<Parameters:>

=item CREATING A CLICKABLE IMAGE BUTTON

B<Parameters:>, 3.The third option (-align, optional) is an alignment type,
and may be
TOP, BOTTOM or MIDDLE

=item CREATING A JAVASCRIPT ACTION BUTTON

=back

=item HTTP COOKIES

1. an expiration time, 2. a domain, 3. a path, 4. a "secure" flag,
B<-name>, B<-value>, B<-path>, B<-domain>, B<-expires>, B<-secure>

=item WORKING WITH FRAMES

1. Create a <Frameset> document, 2. Specify the destination for the
document in the HTTP header, 3. Specify the destination for the document in
the <FORM> tag

=item LIMITED SUPPORT FOR CASCADING STYLE SHEETS

=item DEBUGGING

=over

=item DUMPING OUT ALL THE NAME/VALUE PAIRS

=back

=item FETCHING ENVIRONMENT VARIABLES

B<Accept()>, B<raw_cookie()>, B<user_agent()>, B<path_info()>,
B<path_translated()>, B<remote_host()>, B<script_name()>Return the script
name as a partial URL, for self-refering
scripts, B<referer()>, B<auth_type ()>, B<server_name ()>, B<virtual_host
()>, B<server_software ()>, B<remote_user ()>, B<user_name ()>,
B<request_method()>, B<content_type()>, B<http()>, B<https()>

=item USING NPH SCRIPTS

In the B<use> statement, By calling the B<nph()> method:, By using B<-nph>
parameters in the B<header()> and B<redirect()>  statements:

=item Server Push

multipart_init(), multipart_start(), multipart_end()

=item Avoiding Denial of Service Attacks

B<$CGI::POST_MAX>, B<$CGI::DISABLE_UPLOADS>, B<1. On a script-by-script
basis>, B<2. Globally for all scripts>

=item COMPATIBILITY WITH CGI-LIB.PL

=item AUTHOR INFORMATION

=item CREDITS

Matt Heffron (heffron@falstaff.css.beckman.com), James Taylor
(james.taylor@srs.gov), Scott Anguish <sanguish@digifix.com>, Mike Jewell
(mlj3u@virginia.edu), Timothy Shimmin (tes@kbs.citri.edu.au), Joergen Haegg
(jh@axis.se), Laurent Delfosse (delfosse@delfosse.com), Richard Resnick
(applepi1@aol.com), Craig Bishop (csb@barwonwater.vic.gov.au), Tony Curtis
(tc@vcpc.univie.ac.at), Tim Bunce (Tim.Bunce@ig.co.uk), Tom Christiansen
(tchrist@convex.com), Andreas Koenig (k@franz.ww.TU-Berlin.DE), Tim
MacKenzie (Tim.MacKenzie@fulcrum.com.au), Kevin B. Hendricks
(kbhend@dogwood.tyler.wm.edu), Stephen Dahmen (joyfire@inxpress.net), Ed
Jordan (ed@fidalgo.net), David Alan Pisoni (david@cnation.com), Doug
MacEachern (dougm@opengroup.org), Robin Houston (robin@oneworld.org),
...and many many more..

=item A COMPLETE EXAMPLE OF A SIMPLE FORM-BASED SCRIPT

=item BUGS

=item SEE ALSO

=back

=head2 CGI::Apache - Backward compatibility module for CGI.pm

=over

=item SYNOPSIS

=item ABSTRACT

=item DESCRIPTION

=item AUTHOR INFORMATION

=item BUGS

=item SEE ALSO

=back

=head2 CGI::Carp, B<CGI::Carp> - CGI routines for writing to the HTTPD (or
other) error log

=over

=item SYNOPSIS

=item DESCRIPTION

=item REDIRECTING ERROR MESSAGES

=item MAKING PERL ERRORS APPEAR IN THE BROWSER WINDOW

=over

=item Changing the default message

=back

=item CHANGE LOG

=item AUTHORS

=item SEE ALSO

=back

=head2 CGI::Cookie - Interface to Netscape Cookies

=over

=item SYNOPSIS

=item DESCRIPTION

=item USING CGI::Cookie

B<1. expiration date>, B<2. domain>, B<3. path>, B<4. secure flag>

=over

=item Creating New Cookies

=item Sending the Cookie to the Browser

=item Recovering Previous Cookies

=item Manipulating Cookies

B<name()>, B<value()>, B<domain()>, B<path()>, B<expires()>

=back

=item AUTHOR INFORMATION

=item BUGS

=item SEE ALSO

=back

=head2 CGI::Fast - CGI Interface for Fast CGI

=over

=item SYNOPSIS

=item DESCRIPTION

=item OTHER PIECES OF THE PUZZLE

=item WRITING FASTCGI PERL SCRIPTS

=item INSTALLING FASTCGI SCRIPTS

=item USING FASTCGI SCRIPTS AS CGI SCRIPTS

=item CAVEATS

=item AUTHOR INFORMATION

=item BUGS

=item SEE ALSO

=back

=head2 CGI::Pretty - module to produce nicely formatted HTML code

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Tags that won't be formatted

=item Customizing the Indenting

=back

=item BUGS

=item AUTHOR

=item SEE ALSO

=back

=head2 CGI::Push - Simple Interface to Server Push

=over

=item SYNOPSIS

=item DESCRIPTION

=item USING CGI::Push

-next_page, -last_page, -type, -delay, -cookie, -target, -expires

=over

=item Heterogeneous Pages

=item Changing the Page Delay on the Fly

=back

=item INSTALLING CGI::Push SCRIPTS

=item AUTHOR INFORMATION

=item BUGS

=item SEE ALSO

=back

=head2 CGI::Switch - Backward compatibility module for defunct CGI::Switch

=over

=item SYNOPSIS

=item ABSTRACT

=item DESCRIPTION

=item AUTHOR INFORMATION

=item BUGS

=item SEE ALSO

=back

=head2 CPAN - query, download and build perl modules from CPAN sites

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Interactive Mode

Searching for authors, bundles, distribution files and modules, make, test,
install, clean	modules or distributions, get, readme, look module or
distribution, Signals

=item CPAN::Shell

=item autobundle

=item recompile

=item The four C<CPAN::*> Classes: Author, Bundle, Module, Distribution

=item ProgrammerE<39>s interface

expand($type,@things), Programming Examples

=item Methods in the four Classes

=item Cache Manager

=item Bundles

=item Prerequisites

=item Finding packages and VERSION

=item Debugging

=item Floppy, Zip, Offline Mode

=back

=item CONFIGURATION

C<o conf E<lt>scalar optionE<gt>>, C<o conf E<lt>scalar optionE<gt>
E<lt>valueE<gt>>, C<o conf E<lt>list optionE<gt>>, C<o conf E<lt>list
optionE<gt> [shift|pop]>, C<o conf E<lt>list optionE<gt>
[unshift|push|splice] E<lt>listE<gt>>

=over

=item Note on urllist parameter's format

=item urllist parameter has CD-ROM support

=back

=item SECURITY

=item EXPORT

=item POPULATE AN INSTALLATION WITH LOTS OF MODULES

=item WORKING WITH CPAN.pm BEHIND FIREWALLS

http firewall, ftp firewall, One way visibility, SOCKS, IP Masquerade

=item BUGS

=item AUTHOR

=item SEE ALSO

=back

=head2 CPAN::FirstTime - Utility for CPAN::Config file Initialization

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 CPANox, CPAN::Nox - Wrapper around CPAN.pm without using any XS
module

=over

=item SYNOPSIS

=item DESCRIPTION

=item  SEE ALSO

=back

=head2 Carp, carp    - warn of errors (from perspective of caller)

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Forcing a Stack Trace

=back

=item BUGS

=back

=head2 Carp::Heavy - Carp guts

=over

=item SYNOPIS

=item DESCRIPTION

=back

=head2 Class::Struct - declare struct-like datatypes as Perl classes

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item The C<struct()> function

=item Element Types and Accessor Methods

Scalar (C<'$'> or C<'*$'>), Array (C<'@'> or C<'*@'>), Hash (C<'%'> or
C<'*%'>), Class (C<'Class_Name'> or C<'*Class_Name'>)

=item Initializing with C<new>

=back

=item EXAMPLES

Example 1, Example 2, Example 3

=item Author and Modification History

=back

=head2 Config - access Perl configuration information

=over

=item SYNOPSIS

=item DESCRIPTION

myconfig(), config_sh(), config_vars(@names)

=item EXAMPLE

=item WARNING

=item GLOSSARY

=over

=item _

C<_a>, C<_exe>, C<_o>

=item a

C<afs>, C<alignbytes>, C<ansi2knr>, C<aphostname>, C<api_revision>,
C<api_subversion>, C<api_version>, C<api_versionstring>, C<ar>, C<archlib>,
C<archlibexp>, C<archname64>, C<archname>, C<archobjs>, C<awk>

=item b

C<baserev>, C<bash>, C<bin>, C<bincompat5005>, C<binexp>, C<bison>,
C<byacc>, C<byteorder>

=item c

C<c>, C<castflags>, C<cat>, C<cc>, C<cccdlflags>, C<ccdlflags>, C<ccflags>,
C<ccsymbols>, C<cf_by>, C<cf_email>, C<cf_time>, C<charsize>, C<chgrp>,
C<chmod>, C<chown>, C<clocktype>, C<comm>, C<compress>

=item C

C<CONFIGDOTSH>, C<contains>, C<cp>, C<cpio>, C<cpp>, C<cpp_stuff>,
C<cppccsymbols>, C<cppflags>, C<cpplast>, C<cppminus>, C<cpprun>,
C<cppstdin>, C<cppsymbols>, C<crosscompile>, C<cryptlib>, C<csh>

=item d

C<d_access>, C<d_accessx>, C<d_alarm>, C<d_archlib>, C<d_atolf>,
C<d_atoll>, C<d_attribut>, C<d_bcmp>, C<d_bcopy>, C<d_bincompat5005>,
C<d_bsd>, C<d_bsdgetpgrp>, C<d_bsdsetpgrp>, C<d_bzero>, C<d_casti32>,
C<d_castneg>, C<d_charvspr>, C<d_chown>, C<d_chroot>, C<d_chsize>,
C<d_closedir>, C<d_const>, C<d_crypt>, C<d_csh>, C<d_cuserid>,
C<d_dbl_dig>, C<d_difftime>, C<d_dirnamlen>, C<d_dlerror>, C<d_dlopen>,
C<d_dlsymun>, C<d_dosuid>, C<d_drand48proto>, C<d_dup2>, C<d_eaccess>,
C<d_endgrent>, C<d_endhent>, C<d_endnent>, C<d_endpent>, C<d_endpwent>,
C<d_endsent>, C<d_endspent>, C<d_eofnblk>, C<d_eunice>, C<d_fchmod>,
C<d_fchown>, C<d_fcntl>, C<d_fd_macros>, C<d_fd_set>, C<d_fds_bits>,
C<d_fgetpos>, C<d_flexfnam>, C<d_flock>, C<d_fork>, C<d_fpathconf>,
C<d_fpos64_t>, C<d_fs_data_s>, C<d_fseeko>, C<d_fsetpos>, C<d_fstatfs>,
C<d_fstatvfs>, C<d_ftello>, C<d_ftime>, C<d_Gconvert>, C<d_getcwd>,
C<d_getfsstat>, C<d_getgrent>, C<d_getgrps>, C<d_gethbyaddr>,
C<d_gethbyname>, C<d_gethent>, C<d_gethname>, C<d_gethostprotos>,
C<d_getlogin>, C<d_getmnt>, C<d_getmntent>, C<d_getnbyaddr>,
C<d_getnbyname>, C<d_getnent>, C<d_getnetprotos>, C<d_getpbyname>,
C<d_getpbynumber>, C<d_getpent>, C<d_getpgid>, C<d_getpgrp2>, C<d_getpgrp>,
C<d_getppid>, C<d_getprior>, C<d_getprotoprotos>, C<d_getpwent>,
C<d_getsbyname>, C<d_getsbyport>, C<d_getsent>, C<d_getservprotos>,
C<d_getspent>, C<d_getspnam>, C<d_gettimeod>, C<d_gnulibc>, C<d_grpasswd>,
C<d_hasmntopt>, C<d_htonl>, C<d_iconv>, C<d_index>, C<d_inetaton>,
C<d_int64_t>, C<d_isascii>, C<d_killpg>, C<d_lchown>, C<d_ldbl_dig>,
C<d_link>, C<d_locconv>, C<d_lockf>, C<d_longdbl>, C<d_longlong>,
C<d_lseekproto>, C<d_lstat>, C<d_madvise>, C<d_mblen>, C<d_mbstowcs>,
C<d_mbtowc>, C<d_memchr>, C<d_memcmp>, C<d_memcpy>, C<d_memmove>,
C<d_memset>, C<d_mkdir>, C<d_mkdtemp>, C<d_mkfifo>, C<d_mkstemp>,
C<d_mkstemps>, C<d_mktime>, C<d_mmap>, C<d_mprotect>, C<d_msg>,
C<d_msg_ctrunc>, C<d_msg_dontroute>, C<d_msg_oob>, C<d_msg_peek>,
C<d_msg_proxy>, C<d_msgctl>, C<d_msgget>, C<d_msgrcv>, C<d_msgsnd>,
C<d_msync>, C<d_munmap>, C<d_mymalloc>, C<d_nice>, C<d_nv_preserves_uv>,
C<d_off64_t>, C<d_old_pthread_create_joinable>, C<d_oldpthreads>,
C<d_oldsock>, C<d_open3>, C<d_pathconf>, C<d_pause>, C<d_phostname>,
C<d_pipe>, C<d_poll>, C<d_portable>, C<d_PRId64>, C<d_PRIeldbl>,
C<d_PRIEldbl>, C<d_PRIfldbl>, C<d_PRIFldbl>, C<d_PRIgldbl>, C<d_PRIGldbl>,
C<d_PRIi64>, C<d_PRIo64>, C<d_PRIu64>, C<d_PRIx64>, C<d_PRIX64>,
C<d_pthread_yield>, C<d_pwage>, C<d_pwchange>, C<d_pwclass>,
C<d_pwcomment>, C<d_pwexpire>, C<d_pwgecos>, C<d_pwpasswd>, C<d_pwquota>,
C<d_qgcvt>, C<d_quad>, C<d_readdir>, C<d_readlink>, C<d_rename>,
C<d_rewinddir>, C<d_rmdir>, C<d_safebcpy>, C<d_safemcpy>, C<d_sanemcmp>,
C<d_sched_yield>, C<d_scm_rights>, C<d_seekdir>, C<d_select>, C<d_sem>,
C<d_semctl>, C<d_semctl_semid_ds>, C<d_semctl_semun>, C<d_semget>,
C<d_semop>, C<d_setegid>, C<d_seteuid>, C<d_setgrent>, C<d_setgrps>,
C<d_sethent>, C<d_setlinebuf>, C<d_setlocale>, C<d_setnent>, C<d_setpent>,
C<d_setpgid>, C<d_setpgrp2>, C<d_setpgrp>, C<d_setprior>, C<d_setpwent>,
C<d_setregid>, C<d_setresgid>, C<d_setresuid>, C<d_setreuid>, C<d_setrgid>,
C<d_setruid>, C<d_setsent>, C<d_setsid>, C<d_setspent>, C<d_setvbuf>,
C<d_sfio>, C<d_shm>, C<d_shmat>, C<d_shmatprototype>, C<d_shmctl>,
C<d_shmdt>, C<d_shmget>, C<d_sigaction>, C<d_sigsetjmp>, C<d_socket>,
C<d_socklen_t>, C<d_sockpair>, C<d_sqrtl>, C<d_statblks>,
C<d_statfs_f_flags>, C<d_statfs_s>, C<d_statvfs>, C<d_stdio_cnt_lval>,
C<d_stdio_ptr_lval>, C<d_stdio_stream_array>, C<d_stdiobase>,
C<d_stdstdio>, C<d_strchr>, C<d_strcoll>, C<d_strctcpy>, C<d_strerrm>,
C<d_strerror>, C<d_strtod>, C<d_strtol>, C<d_strtold>, C<d_strtoll>,
C<d_strtoul>, C<d_strtoull>, C<d_strtouq>, C<d_strxfrm>, C<d_suidsafe>,
C<d_symlink>, C<d_syscall>, C<d_sysconf>, C<d_sysernlst>, C<d_syserrlst>,
C<d_system>, C<d_tcgetpgrp>, C<d_tcsetpgrp>, C<d_telldir>,
C<d_telldirproto>, C<d_time>, C<d_times>, C<d_truncate>, C<d_tzname>,
C<d_umask>, C<d_uname>, C<d_union_semun>, C<d_ustat>, C<d_vendorarch>,
C<d_vendorbin>, C<d_vendorlib>, C<d_vfork>, C<d_void_closedir>,
C<d_voidsig>, C<d_voidtty>, C<d_volatile>, C<d_vprintf>, C<d_wait4>,
C<d_waitpid>, C<d_wcstombs>, C<d_wctomb>, C<d_xenix>, C<date>,
C<db_hashtype>, C<db_prefixtype>, C<defvoidused>, C<direntrytype>,
C<dlext>, C<dlsrc>, C<doublesize>, C<drand01>, C<dynamic_ext>

=item e

C<eagain>, C<ebcdic>, C<echo>, C<egrep>, C<emacs>, C<eunicefix>,
C<exe_ext>, C<expr>, C<extensions>

=item f

C<fflushall>, C<fflushNULL>, C<find>, C<firstmakefile>, C<flex>,
C<fpossize>, C<fpostype>, C<freetype>, C<full_ar>, C<full_csh>, C<full_sed>

=item g

C<gccversion>, C<gidformat>, C<gidsign>, C<gidsize>, C<gidtype>,
C<glibpth>, C<grep>, C<groupcat>, C<groupstype>, C<gzip>

=item h

C<h_fcntl>, C<h_sysfile>, C<hint>, C<hostcat>, C<huge>

=item i

C<i16size>, C<i16type>, C<i32size>, C<i32type>, C<i64size>, C<i64type>,
C<i8size>, C<i8type>, C<i_arpainet>, C<i_bsdioctl>, C<i_db>, C<i_dbm>,
C<i_dirent>, C<i_dld>, C<i_dlfcn>, C<i_fcntl>, C<i_float>, C<i_gdbm>,
C<i_grp>, C<i_iconv>, C<i_ieeefp>, C<i_inttypes>, C<i_limits>, C<i_locale>,
C<i_machcthr>, C<i_malloc>, C<i_math>, C<i_memory>, C<i_mntent>, C<i_ndbm>,
C<i_netdb>, C<i_neterrno>, C<i_netinettcp>, C<i_niin>, C<i_poll>,
C<i_pthread>, C<i_pwd>, C<i_rpcsvcdbm>, C<i_sfio>, C<i_sgtty>, C<i_shadow>,
C<i_socks>, C<i_stdarg>, C<i_stddef>, C<i_stdlib>, C<i_string>,
C<i_sunmath>, C<i_sysaccess>, C<i_sysdir>, C<i_sysfile>, C<i_sysfilio>,
C<i_sysin>, C<i_sysioctl>, C<i_syslog>, C<i_sysmman>, C<i_sysmode>,
C<i_sysmount>, C<i_sysndir>, C<i_sysparam>, C<i_sysresrc>, C<i_syssecrt>,
C<i_sysselct>, C<i_syssockio>, C<i_sysstat>, C<i_sysstatfs>,
C<i_sysstatvfs>, C<i_systime>, C<i_systimek>, C<i_systimes>, C<i_systypes>,
C<i_sysuio>, C<i_sysun>, C<i_sysutsname>, C<i_sysvfs>, C<i_syswait>,
C<i_termio>, C<i_termios>, C<i_time>, C<i_unistd>, C<i_ustat>, C<i_utime>,
C<i_values>, C<i_varargs>, C<i_varhdr>, C<i_vfork>,
C<ignore_versioned_solibs>, C<inc_version_list>, C<inc_version_list_init>,
C<incpath>, C<inews>, C<installarchlib>, C<installbin>, C<installman1dir>,
C<installman3dir>, C<installprefix>, C<installprefixexp>,
C<installprivlib>, C<installscript>, C<installsitearch>, C<installsitebin>,
C<installsitelib>, C<installstyle>, C<installusrbinperl>,
C<installvendorarch>, C<installvendorbin>, C<installvendorlib>, C<intsize>,
C<ivdformat>, C<ivsize>, C<ivtype>

=item k

C<known_extensions>, C<ksh>

=item l

C<large>, C<ld>, C<lddlflags>, C<ldflags>, C<ldlibpthname>, C<less>,
C<lib_ext>, C<libc>, C<libperl>, C<libpth>, C<libs>, C<libsdirs>,
C<libsfiles>, C<libsfound>, C<libspath>, C<libswanted>, C<line>, C<lint>,
C<lkflags>, C<ln>, C<lns>, C<locincpth>, C<loclibpth>, C<longdblsize>,
C<longlongsize>, C<longsize>, C<lp>, C<lpr>, C<ls>, C<lseeksize>,
C<lseektype>

=item m

C<mail>, C<mailx>, C<make>, C<make_set_make>, C<mallocobj>, C<mallocsrc>,
C<malloctype>, C<man1dir>, C<man1direxp>, C<man1ext>, C<man3dir>,
C<man3direxp>, C<man3ext>

=item M

C<Mcc>, C<medium>, C<mips_type>, C<mkdir>, C<mmaptype>, C<models>,
C<modetype>, C<more>, C<multiarch>, C<mv>, C<myarchname>, C<mydomain>,
C<myhostname>, C<myuname>

=item n

C<n>, C<netdb_hlen_type>, C<netdb_host_type>, C<netdb_name_type>,
C<netdb_net_type>, C<nm>, C<nm_opt>, C<nm_so_opt>, C<nonxs_ext>, C<nroff>,
C<nvsize>, C<nvtype>

=item o

C<o_nonblock>, C<obj_ext>, C<old_pthread_create_joinable>, C<optimize>,
C<orderlib>, C<osname>, C<osvers>

=item p

C<package>, C<pager>, C<passcat>, C<patchlevel>, C<path_sep>, C<perl5>,
C<perl>

=item P

C<PERL_REVISION>, C<PERL_SUBVERSION>, C<PERL_VERSION>, C<perladmin>,
C<perlpath>, C<pg>, C<phostname>, C<pidtype>, C<plibpth>, C<pm_apiversion>,
C<pmake>, C<pr>, C<prefix>, C<prefixexp>, C<privlib>, C<privlibexp>,
C<prototype>, C<ptrsize>

=item q

C<quadkind>, C<quadtype>

=item r

C<randbits>, C<randfunc>, C<randseedtype>, C<ranlib>, C<rd_nodata>,
C<revision>, C<rm>, C<rmail>, C<runnm>

=item s

C<sched_yield>, C<scriptdir>, C<scriptdirexp>, C<sed>, C<seedfunc>,
C<selectminbits>, C<selecttype>, C<sendmail>, C<sh>, C<shar>, C<sharpbang>,
C<shmattype>, C<shortsize>, C<shrpenv>, C<shsharp>, C<sig_count>,
C<sig_name>, C<sig_name_init>, C<sig_num>, C<sig_num_init>, C<signal_t>,
C<sitearch>, C<sitearchexp>, C<sitebin>, C<sitebinexp>, C<sitelib>,
C<sitelib_stem>, C<sitelibexp>, C<siteprefix>, C<siteprefixexp>,
C<sizesize>, C<sizetype>, C<sleep>, C<smail>, C<small>, C<so>,
C<sockethdr>, C<socketlib>, C<socksizetype>, C<sort>, C<spackage>,
C<spitshell>, C<split>, C<sPRId64>, C<sPRIeldbl>, C<sPRIEldbl>,
C<sPRIfldbl>, C<sPRIFldbl>, C<sPRIgldbl>, C<sPRIGldbl>, C<sPRIi64>,
C<sPRIo64>, C<sPRIu64>, C<sPRIx64>, C<sPRIX64>, C<src>, C<ssizetype>,
C<startperl>, C<startsh>, C<static_ext>, C<stdchar>, C<stdio_base>,
C<stdio_bufsiz>, C<stdio_cnt>, C<stdio_filbuf>, C<stdio_ptr>,
C<stdio_stream_array>, C<strings>, C<submit>, C<subversion>, C<sysman>

=item t

C<tail>, C<tar>, C<tbl>, C<tee>, C<test>, C<timeincl>, C<timetype>,
C<touch>, C<tr>, C<trnl>, C<troff>

=item u

C<u16size>, C<u16type>, C<u32size>, C<u32type>, C<u64size>, C<u64type>,
C<u8size>, C<u8type>, C<uidformat>, C<uidsign>, C<uidsize>, C<uidtype>,
C<uname>, C<uniq>, C<uquadtype>, C<use5005threads>, C<use64bitall>,
C<use64bitint>, C<usedl>, C<useithreads>, C<uselargefiles>,
C<uselongdouble>, C<usemorebits>, C<usemultiplicity>, C<usemymalloc>,
C<usenm>, C<useopcode>, C<useperlio>, C<useposix>, C<usesfio>,
C<useshrplib>, C<usesocks>, C<usethreads>, C<usevendorprefix>, C<usevfork>,
C<usrinc>, C<uuname>, C<uvoformat>, C<uvsize>, C<uvtype>, C<uvuformat>,
C<uvxformat>

=item v

C<vendorarch>, C<vendorarchexp>, C<vendorbin>, C<vendorbinexp>,
C<vendorlib>, C<vendorlib_stem>, C<vendorlibexp>, C<vendorprefix>,
C<vendorprefixexp>, C<version>, C<vi>, C<voidflags>

=item x

C<xlibpth>, C<xs_apiversion>

=item z

C<zcat>, C<zip>

=back

=item NOTE

=back

=head2 Cwd, getcwd - get pathname of current working directory

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 DB - programmatic interface to the Perl debugging API (draft,
subject to
change)

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Global Variables

 $DB::sub,  %DB::sub,  $DB::single,  $DB::signal,  $DB::trace,	@DB::args, 
@DB::dbline,  %DB::dbline,  $DB::package,  $DB::filename,  $DB::subname, 
$DB::lineno

=item API Methods

CLIENT->register(), CLIENT->evalcode(STRING), CLIENT->skippkg('D::hide'),
CLIENT->run(), CLIENT->step(), CLIENT->next(), CLIENT->done()

=item Client Callback Methods

CLIENT->init(), CLIENT->prestop([STRING]), CLIENT->stop(), CLIENT->idle(),
CLIENT->poststop([STRING]), CLIENT->evalcode(STRING), CLIENT->cleanup(),
CLIENT->output(LIST)

=back

=item BUGS

=item AUTHOR

=back

=head2 DB_File - Perl5 access to Berkeley DB version 1.x

=over

=item SYNOPSIS

=item DESCRIPTION

B<DB_HASH>, B<DB_BTREE>, B<DB_RECNO>

=over

=item Using DB_File with Berkeley DB version 2 or 3

=item Interface to Berkeley DB

=item Opening a Berkeley DB Database File

=item Default Parameters

=item In Memory Databases

=back

=item DB_HASH

=over

=item A Simple Example

=back

=item DB_BTREE

=over

=item Changing the BTREE sort order

=item Handling Duplicate Keys 

=item The get_dup() Method

=item The find_dup() Method

=item The del_dup() Method

=item Matching Partial Keys 

=back

=item DB_RECNO

=over

=item The 'bval' Option

=item A Simple Example

=item Extra RECNO Methods

B<$X-E<gt>push(list) ;>, B<$value = $X-E<gt>pop ;>, B<$X-E<gt>shift>,
B<$X-E<gt>unshift(list) ;>, B<$X-E<gt>length>

=item Another Example

=back

=item THE API INTERFACE

B<$status = $X-E<gt>get($key, $value [, $flags]) ;>, B<$status =
$X-E<gt>put($key, $value [, $flags]) ;>, B<$status = $X-E<gt>del($key [,
$flags]) ;>, B<$status = $X-E<gt>fd ;>, B<$status = $X-E<gt>seq($key,
$value, $flags) ;>, B<$status = $X-E<gt>sync([$flags]) ;>

=item DBM FILTERS

B<filter_store_key>, B<filter_store_value>, B<filter_fetch_key>,
B<filter_fetch_value>

=over

=item The Filter

=item An Example -- the NULL termination problem.

=item Another Example -- Key is a C int.

=back

=item HINTS AND TIPS 

=over

=item Locking: The Trouble with fd

=item Safe ways to lock a database

B<Tie::DB_Lock>, B<Tie::DB_LockFile>, B<DB_File::Lock>

=item Sharing Databases With C Applications

=item The untie() Gotcha

=back

=item COMMON QUESTIONS

=over

=item Why is there Perl source in my database?

=item How do I store complex data structures with DB_File?

=item What does "Invalid Argument" mean?

=item What does "Bareword 'DB_File' not allowed" mean? 

=back

=item REFERENCES

=item HISTORY

=item BUGS

=item AVAILABILITY

=item COPYRIGHT

=item SEE ALSO

=item AUTHOR

=back

=head2 Data::Dumper - stringified perl data structures, suitable for both
printing and C<eval>

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Methods

I<PACKAGE>->new(I<ARRAYREF [>, I<ARRAYREF]>), I<$OBJ>->Dump  I<or> 
I<PACKAGE>->Dump(I<ARRAYREF [>, I<ARRAYREF]>), I<$OBJ>->Seen(I<[HASHREF]>),
I<$OBJ>->Values(I<[ARRAYREF]>), I<$OBJ>->Names(I<[ARRAYREF]>),
I<$OBJ>->Reset

=item Functions

Dumper(I<LIST>)

=item Configuration Variables or Methods

$Data::Dumper::Indent  I<or>  I<$OBJ>->Indent(I<[NEWVAL]>),
$Data::Dumper::Purity  I<or>  I<$OBJ>->Purity(I<[NEWVAL]>),
$Data::Dumper::Pad  I<or>  I<$OBJ>->Pad(I<[NEWVAL]>),
$Data::Dumper::Varname	I<or>  I<$OBJ>->Varname(I<[NEWVAL]>),
$Data::Dumper::Useqq  I<or>  I<$OBJ>->Useqq(I<[NEWVAL]>),
$Data::Dumper::Terse  I<or>  I<$OBJ>->Terse(I<[NEWVAL]>),
$Data::Dumper::Freezer	I<or>  $I<OBJ>->Freezer(I<[NEWVAL]>),
$Data::Dumper::Toaster	I<or>  $I<OBJ>->Toaster(I<[NEWVAL]>),
$Data::Dumper::Deepcopy  I<or>	$I<OBJ>->Deepcopy(I<[NEWVAL]>),
$Data::Dumper::Quotekeys  I<or>  $I<OBJ>->Quotekeys(I<[NEWVAL]>),
$Data::Dumper::Bless  I<or>  $I<OBJ>->Bless(I<[NEWVAL]>),
$Data::Dumper::Maxdepth  I<or>	$I<OBJ>->Maxdepth(I<[NEWVAL]>)

=item Exports

Dumper

=back

=item EXAMPLES

=item BUGS

=item AUTHOR

=item VERSION

=item SEE ALSO

=back

=head2 Devel::DProf - a Perl code profiler

=over

=item SYNOPSIS

=item DESCRIPTION

=item PROFILE FORMAT

=item AUTOLOAD

=item ENVIRONMENT

=item BUGS

=item SEE ALSO

=back

=head2 Devel::Peek - A data debugging tool for the XS programmer

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=over

=item A simple scalar string

=item A simple scalar number

=item A simple scalar with an extra reference

=item A reference to a simple scalar

=item A reference to an array

=item A reference to a hash

=item Dumping a large array or hash

=item A reference to an SV which holds a C pointer

=item A reference to a subroutine

=back

=item EXPORTS

=item BUGS

=item AUTHOR

=item SEE ALSO

=back

=head2 Devel::SelfStubber - generate stubs for a SelfLoading module

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 DirHandle - supply object methods for directory handles

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Dumpvalue - provides screen dump of Perl data.

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Creation

C<arrayDepth>, C<hashDepth>, C<compactDump>, C<veryCompact>, C<globPrint>,
C<DumpDBFiles>, C<DumpPackages>, C<DumpReused>, C<tick>, C<HighBit>,
C<printUndef>, C<UsageOnly>, unctrl, subdump, bareStringify, quoteHighBit,
stopDbSignal

=item Methods

dumpValue, dumpValues, dumpvars, set_quote, set_unctrl, compactDump,
veryCompact, set, get

=back

=back

=head2 DynaLoader - Dynamically load C libraries into Perl code

=over

=item SYNOPSIS

=item DESCRIPTION

@dl_library_path, @dl_resolve_using, @dl_require_symbols, @dl_librefs,
@dl_modules, dl_error(), $dl_debug, dl_findfile(), dl_expandspec(),
dl_load_file(), dl_unload_file(), dl_loadflags(), dl_find_symbol(),
dl_find_symbol_anywhere(), dl_undef_symbols(), dl_install_xsub(),
bootstrap()

=item AUTHOR

=back

=head2 DynaLoader::XSLoader, XSLoader - Dynamically load C libraries into
Perl code

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 English - use nice English (or awk) names for ugly punctuation
variables

=over

=item SYNOPSIS

=item DESCRIPTION

=item BUGS

=back

=head2 Env - perl module that imports environment variables as scalars or
arrays

=over

=item SYNOPSIS

=item DESCRIPTION

=item LIMITATIONS

=item AUTHOR

=back

=head2 Errno - System errno constants

=over

=item SYNOPSIS

=item DESCRIPTION

=item CAVEATS

=item AUTHOR

=item COPYRIGHT

=back

=head2 Exporter - Implements default import method for modules

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item How to Export

=item Selecting What To Export

=item Specialised Import Lists

=item Exporting without using Export's import method

=item Module Version Checking

=item Managing Unknown Symbols

=item Tag Handling Utility Functions

=back

=back

=head2 Exporter::Heavy - Exporter guts

=over

=item SYNOPIS

=item DESCRIPTION

=back

=head2 ExtUtils::Command - utilities to replace common UNIX commands in
Makefiles etc.

=over

=item SYNOPSIS

=item DESCRIPTION

=back

cat

eqtime src dst

rm_f files...

rm_f files...

touch files ..

mv source... destination

cp source... destination

chmod mode files..

mkpath directory..

test_f file

=over

=item BUGS

=item SEE ALSO 

=item AUTHOR

=back

=head2 ExtUtils::Embed - Utilities for embedding Perl in C/C++ applications

=over

=item SYNOPSIS

=item DESCRIPTION

=item @EXPORT

=item FUNCTIONS

xsinit(), Examples, ldopts(), Examples, perl_inc(), ccflags(), ccdlflags(),
ccopts(), xsi_header(), xsi_protos(@modules), xsi_body(@modules)

=item EXAMPLES

=item SEE ALSO

=item AUTHOR

=back

=head2 ExtUtils::Install - install files from here to there

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 ExtUtils::Installed - Inventory management of installed modules

=over

=item SYNOPSIS

=item DESCRIPTION

=item USAGE

=item FUNCTIONS

new(), modules(), files(), directories(), directory_tree(), validate(),
packlist(), version()

=item EXAMPLE

=item AUTHOR

=back

=head2 ExtUtils::Liblist - determine libraries to use and how to use them

=over

=item SYNOPSIS

=item DESCRIPTION

For static extensions, For dynamic extensions, For dynamic extensions

=over

=item EXTRALIBS

=item LDLOADLIBS and LD_RUN_PATH

=item BSLOADLIBS

=back

=item PORTABILITY

=over

=item VMS implementation

=item Win32 implementation

=back

=item SEE ALSO

=back

=head2 ExtUtils::MM_Cygwin - methods to override UN*X behaviour in
ExtUtils::MakeMaker

=over

=item SYNOPSIS

=item DESCRIPTION

canonpath, cflags, manifypods, perl_archive

=back

=head2 ExtUtils::MM_OS2 - methods to override UN*X behaviour in
ExtUtils::MakeMaker

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 ExtUtils::MM_Unix - methods used by ExtUtils::MakeMaker

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over

=item Preloaded methods

canonpath

=back

=back

catdir

catfile

curdir

rootdir

updir

=over

=item SelfLoaded methods

c_o (o)

=back

cflags (o)

clean (o)

const_cccmd (o)

const_config (o)

const_loadlibs (o)

constants (o)

depend (o)

dir_target (o)

dist (o)

dist_basics (o)

dist_ci (o)

dist_core (o)

dist_dir (o)

dist_test (o)

dlsyms (o)

dynamic (o)

dynamic_bs (o)

dynamic_lib (o)

exescan

extliblist

file_name_is_absolute

find_perl

=over

=item Methods to actually produce chunks of text for the Makefile

fixin

=back

force (o)

guess_name

has_link_code

htmlifypods (o)

init_dirscan

init_main

init_others

install (o)

installbin (o)

libscan (o)

linkext (o)

lsdir

macro (o)

makeaperl (o)

makefile (o)

manifypods (o)

maybe_command

maybe_command_in_dirs

needs_linking (o)

nicetext

parse_version

parse_abstract

pasthru (o)

path

perl_script

perldepend (o)

ppd

perm_rw (o)

perm_rwx (o)

pm_to_blib

post_constants (o)

post_initialize (o)

postamble (o)

prefixify

processPL (o)

realclean (o)

replace_manpage_separator

static (o)

static_lib (o)

staticmake (o)

subdir_x (o)

subdirs (o)

test (o)

test_via_harness (o)

test_via_script (o)

tool_autosplit (o)

tools_other (o)

tool_xsubpp (o)

top_targets (o)

writedoc

xs_c (o)

xs_cpp (o)

xs_o (o)

perl_archive

export_list

=over

=item SEE ALSO

=back

=head2 ExtUtils::MM_VMS - methods to override UN*X behaviour in
ExtUtils::MakeMaker

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Methods always loaded

wraplist

=back

=back

rootdir (override)

=over

=item SelfLoaded methods

guess_name (override)

=back

find_perl (override)

path (override)

maybe_command (override)

maybe_command_in_dirs (override)

perl_script (override)

file_name_is_absolute (override)

replace_manpage_separator

init_others (override)

constants (override)

cflags (override)

const_cccmd (override)

pm_to_blib (override)

tool_autosplit (override)

tool_sxubpp (override)

xsubpp_version (override)

tools_other (override)

dist (override)

c_o (override)

xs_c (override)

xs_o (override)

top_targets (override)

dlsyms (override)

dynamic_lib (override)

dynamic_bs (override)

static_lib (override)

manifypods (override)

processPL (override)

installbin (override)

subdir_x (override)

clean (override)

realclean (override)

dist_basics (override)

dist_core (override)

dist_dir (override)

dist_test (override)

install (override)

perldepend (override)

makefile (override)

test (override)

test_via_harness (override)

test_via_script (override)

makeaperl (override)

nicetext (override)

=head2 ExtUtils::MM_Win32 - methods to override UN*X behaviour in
ExtUtils::MakeMaker

=over

=item SYNOPSIS

=item DESCRIPTION

=back

catfile

constants (o)

static_lib (o)

dynamic_bs (o)

dynamic_lib (o)

canonpath

perl_script

pm_to_blib

test_via_harness (o)

tool_autosplit (override)

tools_other (o)

xs_o (o)

top_targets (o)

htmlifypods (o)

manifypods (o)

dist_ci (o)

dist_core (o)

pasthru (o)

=head2 ExtUtils::MakeMaker - create an extension Makefile

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item How To Write A Makefile.PL

=item Default Makefile Behaviour

=item make test

=item make testdb

=item make install

=item PREFIX and LIB attribute

=item AFS users

=item Static Linking of a new Perl Binary

=item Determination of Perl Library and Installation Locations

=item Which architecture dependent directory?

=item Using Attributes and Parameters

AUTHOR, ABSTRACT, ABSTRACT_FROM, BINARY_LOCATION, C, CAPI, CCFLAGS, CONFIG,
CONFIGURE, DEFINE, DIR, DISTNAME, DL_FUNCS, DL_VARS, EXCLUDE_EXT,
EXE_FILES, FIRST_MAKEFILE, FULLPERL, FUNCLIST, H, HTMLLIBPODS,
HTMLSCRIPTPODS, IMPORTS, INC, INCLUDE_EXT, INSTALLARCHLIB, INSTALLBIN,
INSTALLDIRS, INSTALLHTMLPRIVLIBDIR, INSTALLHTMLSCRIPTDIR,
INSTALLHTMLSITELIBDIR, INSTALLMAN1DIR, INSTALLMAN3DIR, INSTALLPRIVLIB,
INSTALLSCRIPT, INSTALLSITEARCH, INSTALLSITELIB, INST_ARCHLIB, INST_BIN,
INST_EXE, INST_LIB, INST_HTMLLIBDIR, INST_HTMLSCRIPTDIR, INST_MAN1DIR,
INST_MAN3DIR, INST_SCRIPT, PERL_MALLOC_OK, LDFROM, LIB, LIBPERL_A, LIBS,
LINKTYPE, MAKEAPERL, MAKEFILE, MAN1PODS, MAN3PODS, MAP_TARGET, MYEXTLIB,
NAME, NEEDS_LINKING, NOECHO, NORECURS, NO_VC, OBJECT, OPTIMIZE, PERL,
PERLMAINCC, PERL_ARCHLIB, PERL_LIB, PERL_SRC, PERM_RW, PERM_RWX, PL_FILES,
PM, PMLIBDIRS, POLLUTE, PPM_INSTALL_EXEC, PPM_INSTALL_SCRIPT, PREFIX,
PREREQ_PM, SKIP, TYPEMAPS, VERSION, VERSION_FROM, XS, XSOPT, XSPROTOARG,
XS_VERSION

=item Additional lowercase attributes

clean, depend, dist, dynamic_lib, linkext, macro, realclean, test,
tool_autosplit

=item Overriding MakeMaker Methods

=item Hintsfile support

=item Distribution Support

   make distcheck,    make skipcheck,	 make distclean,    make manifest, 
  make distdir,    make tardist,    make dist,	  make uutardist,    make
shdist,    make zipdist,    make ci

=item Disabling an extension

=back

=item ENVIRONMENT

PERL_MM_OPT

=item SEE ALSO

=item AUTHORS

=back

=head2 ExtUtils::Manifest - utilities to write and check a MANIFEST file

=over

=item SYNOPSIS

=item DESCRIPTION

=item MANIFEST.SKIP

=item EXPORT_OK

=item GLOBAL VARIABLES

=item DIAGNOSTICS

C<Not in MANIFEST:> I<file>, C<No such file:> I<file>, C<MANIFEST:> I<$!>,
C<Added to MANIFEST:> I<file>

=item SEE ALSO

=item AUTHOR

=back

=head2 ExtUtils::Miniperl, writemain - write the C code for perlmain.c

=over

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=back

=head2 ExtUtils::Mkbootstrap - make a bootstrap file for use by DynaLoader

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 ExtUtils::Mksymlists - write linker options files for dynamic
extension

=over

=item SYNOPSIS

=item DESCRIPTION

DLBASE, DL_FUNCS, DL_VARS, FILE, FUNCLIST, IMPORTS, NAME

=item AUTHOR

=item REVISION

=back

=head2 ExtUtils::Packlist - manage .packlist files

=over

=item SYNOPSIS

=item DESCRIPTION

=item USAGE

=item FUNCTIONS

new(), read(), write(), validate(), packlist_file()

=item EXAMPLE

=item AUTHOR

=back

=head2 ExtUtils::testlib - add blib/* directories to @INC

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Fatal - replace functions with equivalents which succeed or die

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 Fcntl - load the C Fcntl.h defines

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item EXPORTED SYMBOLS

=back

=head2 File::Basename, fileparse - split a pathname into pieces

=over

=item SYNOPSIS

=item DESCRIPTION

fileparse_set_fstype, fileparse

=item EXAMPLES

C<basename>, C<dirname>

=back

=head2 File::CheckTree, validate - run many filetest checks on a tree

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 File::Compare - Compare files or filehandles

=over

=item SYNOPSIS

=item DESCRIPTION

=item RETURN

=item AUTHOR

=back

=head2 File::Copy - Copy files or filehandles

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Special behaviour if C<syscopy> is defined (OS/2, VMS and Win32)

rmscopy($from,$to[,$date_flag])

=back

=item RETURN

=item AUTHOR

=back

=head2 File::DosGlob - DOS like globbing and then some

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXPORTS (by request only)

=item BUGS

=item AUTHOR

=item HISTORY

=item SEE ALSO

=back

=head2 File::Find, find - traverse a file tree

=over

=item SYNOPSIS

=item DESCRIPTION

C<wanted>, C<bydepth>, C<follow>, C<follow_fast>, C<follow_skip>,
C<no_chdir>, C<untaint>, C<untaint_pattern>, C<untaint_skip>

=item CAVEAT

=back

=head2 File::Glob - Perl extension for BSD glob routine

=over

=item SYNOPSIS

=item DESCRIPTION

C<GLOB_ERR>, C<GLOB_MARK>, C<GLOB_NOCASE>, C<GLOB_NOCHECK>, C<GLOB_NOSORT>,
C<GLOB_BRACE>, C<GLOB_NOMAGIC>, C<GLOB_QUOTE>, C<GLOB_TILDE>, C<GLOB_CSH>

=item DIAGNOSTICS

C<GLOB_NOSPACE>, C<GLOB_ABEND>

=item NOTES

=item AUTHOR

=back

=head2 File::Path - create or remove directory trees

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHORS

=back

=head2 File::Spec - portably perform operations on file names

=over

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=item AUTHORS

=back

=head2 File::Spec::Functions - portably perform operations on file names

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Exports

=back

=item SEE ALSO

=back

=head2 File::Spec::Mac - File::Spec for MacOS

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

canonpath

=back

catdir

catfile

curdir

devnull

rootdir

tmpdir

updir

file_name_is_absolute

path

splitpath

splitdir

catpath

abs2rel

rel2abs

=over

=item SEE ALSO

=back

=head2 File::Spec::OS2 - methods for OS/2 file specs

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 File::Spec::Unix - methods used by File::Spec

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

canonpath

=back

catdir

catfile

curdir

devnull

rootdir

tmpdir

updir

no_upwards

case_tolerant

file_name_is_absolute

path

join

splitpath

splitdir

catpath

abs2rel

rel2abs

=over

=item SEE ALSO

=back

=head2 File::Spec::VMS - methods for VMS file specs

=over

=item SYNOPSIS

=item DESCRIPTION

eliminate_macros

=back

fixpath

=over

=item Methods always loaded

canonpath (override)

=back

catdir

catfile

curdir (override)

devnull (override)

rootdir (override)

tmpdir (override)

updir (override)

case_tolerant (override)

path (override)

file_name_is_absolute (override)

splitpath (override)

splitdir (override)

catpath (override)

abs2rel (override)

rel2abs (override)

=over

=item SEE ALSO

=back

=head2 File::Spec::Win32 - methods for Win32 file specs

=over

=item SYNOPSIS

=item DESCRIPTION

devnull

=back

tmpdir

catfile

canonpath

splitpath

splitdir

catpath

abs2rel

rel2abs

=over

=item SEE ALSO

=back

=head2 File::stat - by-name interface to Perl's built-in stat() functions

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 FileCache - keep more files open than the system permits

=over

=item SYNOPSIS

=item DESCRIPTION

=item BUGS

=back

=head2 FileHandle - supply object methods for filehandles

=over

=item SYNOPSIS

=item DESCRIPTION

$fh->print, $fh->printf, $fh->getline, $fh->getlines

=item SEE ALSO

=back

=head2 FindBin - Locate directory of original perl script

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXPORTABLE VARIABLES

=item KNOWN BUGS

=item AUTHORS

=item COPYRIGHT

=back

=head2 GDBM_File - Perl5 access to the gdbm library.

=over

=item SYNOPSIS

=item DESCRIPTION

=item AVAILABILITY

=item BUGS

=item SEE ALSO

=back

=head2 Getopt::Long - Extended processing of command line options

=over

=item SYNOPSIS

=item DESCRIPTION

=item Command Line Options, an Introduction

=item Getting Started with Getopt::Long

=over

=item Simple options

=item A little bit less simple options

=item Mixing command line option with other arguments

=item Options with values

=item Options with multiple values

=item Options with hash values

=item User-defined subroutines to handle options

=item Options with multiple names

=item Case and abbreviations

=item Summary of Option Specifications

!, +, s, i, f, : I<type> [ I<desttype> ]

=back

=item Advanced Possibilities

=over

=item Documentation and help texts

=item Storing options in a hash

=item Bundling

=item The lonesome dash

=item Argument call-back

=back

=item Configuring Getopt::Long

default, auto_abbrev, getopt_compat, require_order, permute, bundling
(default: reset), bundling_override (default: reset), ignore_case 
(default: set), ignore_case_always (default: reset), pass_through (default:
reset), prefix, prefix_pattern, debug (default: reset)

=item Return values and Errors

=item Legacy

=over

=item Default destinations

=item Alternative option starters

=item Configuration variables

=back

=item AUTHOR

=item COPYRIGHT AND DISCLAIMER

=back

=head2 Getopt::Std, getopt - Process single-character switches with switch
clustering

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 I18N::Collate - compare 8-bit scalar data according to the current
locale

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 IO - load various IO modules

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 IO::Dir - supply object methods for directory handles

=over

=item SYNOPSIS

=item DESCRIPTION

new ( [ DIRNAME ] ), open ( DIRNAME ), read (), seek ( POS ), tell (),
rewind (), close (), tie %hash, IO::Dir, DIRNAME [, OPTIONS ]

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::File - supply object methods for filehandles

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( FILENAME [,MODE [,PERMS]] ), new_tmpfile

=item METHODS

open( FILENAME [,MODE [,PERMS]] )

=item SEE ALSO

=item HISTORY

=back

=head2 IO::Handle - supply object methods for I/O handles

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new (), new_from_fd ( FD, MODE )

=item METHODS

$io->fdopen ( FD, MODE ), $io->opened, $io->getline, $io->getlines,
$io->ungetc ( ORD ), $io->write ( BUF, LEN [, OFFSET ] ), $io->error,
$io->clearerr, $io->sync, $io->flush, $io->printflush ( ARGS ),
$io->blocking ( [ BOOL ] ), $io->untaint

=item NOTE

=item SEE ALSO

=item BUGS

=item HISTORY

=back

=head2 IO::Pipe - supply object methods for pipes

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [READER, WRITER] )

=item METHODS

reader ([ARGS]), writer ([ARGS]), handles ()

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Poll - Object interface to system poll call

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

mask ( IO [, EVENT_MASK ] ), poll ( [ TIMEOUT ] ), events ( IO ), remove (
IO ), handles( [ EVENT_MASK ] )

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Seekable - supply seek based methods for I/O objects

=over

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=item HISTORY

=back

=head2 IO::Select - OO interface to the select system call

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ HANDLES ] )

=item METHODS

add ( HANDLES ), remove ( HANDLES ), exists ( HANDLE ), handles, can_read (
[ TIMEOUT ] ), can_write ( [ TIMEOUT ] ), has_exception ( [ TIMEOUT ] ),
count (), bits(), select ( READ, WRITE, ERROR [, TIMEOUT ] )

=item EXAMPLE

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Socket - Object interface to socket communications

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ARGS] )

=item METHODS

accept([PKG]), socketpair(DOMAIN, TYPE, PROTOCOL), timeout([VAL]),
sockopt(OPT [, VAL]), sockdomain, socktype, protocol, connected

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Socket::INET - Object interface for AF_INET domain sockets

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ARGS] )

=over

=item METHODS

sockaddr (), sockport (), sockhost (), peeraddr (), peerport (), peerhost
()

=back

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Socket::UNIX - Object interface for AF_UNIX domain sockets

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ARGS] )

=item METHODS

hostpath(), peerpath()

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::lib::IO::Dir, IO::Dir - supply object methods for directory
handles

=over

=item SYNOPSIS

=item DESCRIPTION

new ( [ DIRNAME ] ), open ( DIRNAME ), read (), seek ( POS ), tell (),
rewind (), close (), tie %hash, IO::Dir, DIRNAME [, OPTIONS ]

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::lib::IO::File, IO::File - supply object methods for filehandles

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( FILENAME [,MODE [,PERMS]] ), new_tmpfile

=item METHODS

open( FILENAME [,MODE [,PERMS]] )

=item SEE ALSO

=item HISTORY

=back

=head2 IO::lib::IO::Handle, IO::Handle - supply object methods for I/O
handles

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new (), new_from_fd ( FD, MODE )

=item METHODS

$io->fdopen ( FD, MODE ), $io->opened, $io->getline, $io->getlines,
$io->ungetc ( ORD ), $io->write ( BUF, LEN [, OFFSET ] ), $io->error,
$io->clearerr, $io->sync, $io->flush, $io->printflush ( ARGS ),
$io->blocking ( [ BOOL ] ), $io->untaint

=item NOTE

=item SEE ALSO

=item BUGS

=item HISTORY

=back

=head2 IO::lib::IO::Pipe, IO::Pipe - supply object methods for pipes

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [READER, WRITER] )

=item METHODS

reader ([ARGS]), writer ([ARGS]), handles ()

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::lib::IO::Poll, IO::Poll - Object interface to system poll call

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

mask ( IO [, EVENT_MASK ] ), poll ( [ TIMEOUT ] ), events ( IO ), remove (
IO ), handles( [ EVENT_MASK ] )

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::lib::IO::Seekable, IO::Seekable - supply seek based methods for
I/O objects

=over

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=item HISTORY

=back

=head2 IO::lib::IO::Select, IO::Select - OO interface to the select system
call

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ HANDLES ] )

=item METHODS

add ( HANDLES ), remove ( HANDLES ), exists ( HANDLE ), handles, can_read (
[ TIMEOUT ] ), can_write ( [ TIMEOUT ] ), has_exception ( [ TIMEOUT ] ),
count (), bits(), select ( READ, WRITE, ERROR [, TIMEOUT ] )

=item EXAMPLE

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::lib::IO::Socket, IO::Socket - Object interface to socket
communications

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ARGS] )

=item METHODS

accept([PKG]), socketpair(DOMAIN, TYPE, PROTOCOL), timeout([VAL]),
sockopt(OPT [, VAL]), sockdomain, socktype, protocol, connected

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::lib::IO::Socket::INET, IO::Socket::INET - Object interface for
AF_INET domain sockets

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ARGS] )

=over

=item METHODS

sockaddr (), sockport (), sockhost (), peeraddr (), peerport (), peerhost
()

=back

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::lib::IO::Socket::UNIX, IO::Socket::UNIX - Object interface for
AF_UNIX domain sockets

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ARGS] )

=item METHODS

hostpath(), peerpath()

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IPC::Msg - SysV Msg IPC object class

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

new ( KEY , FLAGS ), id, rcv ( BUF, LEN [, TYPE [, FLAGS ]] ), remove, set
( STAT ), set ( NAME => VALUE [, NAME => VALUE ...] ), snd ( TYPE, MSG [,
FLAGS ] ), stat

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IPC::Open2, open2 - open a process for both reading and writing

=over

=item SYNOPSIS

=item DESCRIPTION

=item WARNING 

=item SEE ALSO

=back

=head2 IPC::Open3, open3 - open a process for reading, writing, and error
handling

=over

=item SYNOPSIS

=item DESCRIPTION

=item WARNING

=back

=head2 IPC::Semaphore - SysV Semaphore IPC object class

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

new ( KEY , NSEMS , FLAGS ), getall, getncnt ( SEM ), getpid ( SEM ),
getval ( SEM ), getzcnt ( SEM ), id, op ( OPLIST ), remove, set ( STAT ),
set ( NAME => VALUE [, NAME => VALUE ...] ), setall ( VALUES ), setval ( N
, VALUE ), stat

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IPC::SysV - SysV IPC constants

=over

=item SYNOPSIS

=item DESCRIPTION

ftok( PATH, ID )

=item SEE ALSO

=item AUTHORS

=item COPYRIGHT

=back

=head2 IPC::SysV::Msg, IPC::Msg - SysV Msg IPC object class

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

new ( KEY , FLAGS ), id, rcv ( BUF, LEN [, TYPE [, FLAGS ]] ), remove, set
( STAT ), set ( NAME => VALUE [, NAME => VALUE ...] ), snd ( TYPE, MSG [,
FLAGS ] ), stat

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IPC::SysV::Semaphore, IPC::Semaphore - SysV Semaphore IPC object
class

=over

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

new ( KEY , NSEMS , FLAGS ), getall, getncnt ( SEM ), getpid ( SEM ),
getval ( SEM ), getzcnt ( SEM ), id, op ( OPLIST ), remove, set ( STAT ),
set ( NAME => VALUE [, NAME => VALUE ...] ), setall ( VALUES ), setval ( N
, VALUE ), stat

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 Math::BigFloat - Arbitrary length float math package

=over

=item SYNOPSIS

=item DESCRIPTION

number format, Error returns 'NaN', Division is computed to, Rounding is
performed

=item BUGS

=item AUTHOR

=back

=head2 Math::BigInt - Arbitrary size integer math package

=over

=item SYNOPSIS

=item DESCRIPTION

Canonical notation, Input, Output

=item EXAMPLES

=item Autocreating constants

=item BUGS

=item AUTHOR

=back

=head2 Math::Trig - trigonometric functions

=over

=item SYNOPSIS

=item DESCRIPTION

=item TRIGONOMETRIC FUNCTIONS

B<tan>

=over

=item ERRORS DUE TO DIVISION BY ZERO

=item SIMPLE (REAL) ARGUMENTS, COMPLEX RESULTS

=back

=item PLANE ANGLE CONVERSIONS

=item RADIAL COORDINATE CONVERSIONS

=over

=item COORDINATE SYSTEMS

=item 3-D ANGLE CONVERSIONS

cartesian_to_cylindrical, cartesian_to_spherical, cylindrical_to_cartesian,
cylindrical_to_spherical, spherical_to_cartesian, spherical_to_cylindrical

=back

=item GREAT CIRCLE DISTANCES

=item EXAMPLES

=item BUGS

=item AUTHORS

=back

=head2 NDBM_File - Tied access to ndbm files

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Net::Ping - check a remote host for reachability

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item Functions

Net::Ping->new([$proto [, $def_timeout [, $bytes]]]);, $p->ping($host [,
$timeout]);, $p->close();, pingecho($host [, $timeout]);

=back

=item WARNING

=item NOTES

=back

=head2 Net::hostent - by-name interface to Perl's built-in gethost*()
functions

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=item NOTE

=item AUTHOR

=back

=head2 Net::netent - by-name interface to Perl's built-in getnet*()
functions

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=item NOTE

=item AUTHOR

=back

=head2 Net::protoent - by-name interface to Perl's built-in getproto*()
functions

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 Net::servent - by-name interface to Perl's built-in getserv*()
functions

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=item NOTE

=item AUTHOR

=back

=head2 O - Generic interface to Perl Compiler backends

=over

=item SYNOPSIS

=item DESCRIPTION

=item CONVENTIONS

=item IMPLEMENTATION

=item AUTHOR

=back

=head2 ODBM_File - Tied access to odbm files

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Opcode - Disable named opcodes when compiling perl code

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item WARNING

=item Operator Names and Operator Lists

an operator name (opname), an operator tag name (optag), a negated opname
or optag, an operator set (opset)

=item Opcode Functions

opcodes, opset (OP, ...), opset_to_ops (OPSET), opset_to_hex (OPSET),
full_opset, empty_opset, invert_opset (OPSET), verify_opset (OPSET, ...),
define_optag (OPTAG, OPSET), opmask_add (OPSET), opmask, opdesc (OP, ...),
opdump (PAT)

=item Manipulating Opsets

=item TO DO (maybe)

=back

=over

=item Predefined Opcode Tags

:base_core, :base_mem, :base_loop, :base_io, :base_orig, :base_math,
:base_thread, :default, :filesys_read, :sys_db, :browse, :filesys_open,
:filesys_write, :subprocess, :ownprocess, :others, :still_to_be_decided,
:dangerous

=item SEE ALSO

=item AUTHORS

=back

=head2 Opcode::Safe, Safe - Compile and execute code in restricted
compartments

=over

=item SYNOPSIS

=item DESCRIPTION

a new namespace, an operator mask

=item WARNING

=over

=item RECENT CHANGES

=item Methods in class Safe

permit (OP, ...), permit_only (OP, ...), deny (OP, ...), deny_only (OP,
...), trap (OP, ...), untrap (OP, ...), share (NAME, ...), share_from
(PACKAGE, ARRAYREF), varglob (VARNAME), reval (STRING), rdo (FILENAME),
root (NAMESPACE), mask (MASK)

=item Some Safety Issues

Memory, CPU, Snooping, Signals, State Changes

=item AUTHOR

=back

=back

=head2 Opcode::ops, ops - Perl pragma to restrict unsafe operations when
compiling

=over

=item SYNOPSIS	

=item DESCRIPTION

=item SEE ALSO

=back

=head2 POSIX - Perl interface to IEEE Std 1003.1

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item CAVEATS 

=item FUNCTIONS

_exit, abort, abs, access, acos, alarm, asctime, asin, assert, atan, atan2,
atexit, atof, atoi, atol, bsearch, calloc, ceil, chdir, chmod, chown,
clearerr, clock, close, closedir, cos, cosh, creat, ctermid, ctime,
cuserid, difftime, div, dup, dup2, errno, execl, execle, execlp, execv,
execve, execvp, exit, exp, fabs, fclose, fcntl, fdopen, feof, ferror,
fflush, fgetc, fgetpos, fgets, fileno, floor, fmod, fopen, fork, fpathconf,
fprintf, fputc, fputs, fread, free, freopen, frexp, fscanf, fseek, fsetpos,
fstat, ftell, fwrite, getc, getchar, getcwd, getegid, getenv, geteuid,
getgid, getgrgid, getgrnam, getgroups, getlogin, getpgrp, getpid, getppid,
getpwnam, getpwuid, gets, getuid, gmtime, isalnum, isalpha, isatty,
iscntrl, isdigit, isgraph, islower, isprint, ispunct, isspace, isupper,
isxdigit, kill, labs, ldexp, ldiv, link, localeconv, localtime, log, log10,
longjmp, lseek, malloc, mblen, mbstowcs, mbtowc, memchr, memcmp, memcpy,
memmove, memset, mkdir, mkfifo, mktime, modf, nice, offsetof, open,
opendir, pathconf, pause, perror, pipe, pow, printf, putc, putchar, puts,
qsort, raise, rand, read, readdir, realloc, remove, rename, rewind,
rewinddir, rmdir, scanf, setgid, setjmp, setlocale, setpgid, setsid,
setuid, sigaction, siglongjmp, sigpending, sigprocmask, sigsetjmp,
sigsuspend, sin, sinh, sleep, sprintf, sqrt, srand, sscanf, stat, strcat,
strchr, strcmp, strcoll, strcpy, strcspn, strerror, strftime, strlen,
strncat, strncmp, strncpy, stroul, strpbrk, strrchr, strspn, strstr,
strtod, strtok, strtol, strtoul, strxfrm, sysconf, system, tan, tanh,
tcdrain, tcflow, tcflush, tcgetpgrp, tcsendbreak, tcsetpgrp, time, times,
tmpfile, tmpnam, tolower, toupper, ttyname, tzname, tzset, umask, uname,
ungetc, unlink, utime, vfprintf, vprintf, vsprintf, wait, waitpid,
wcstombs, wctomb, write

=item CLASSES

=over

=item POSIX::SigAction

new

=item POSIX::SigSet

new, addset, delset, emptyset, fillset, ismember

=item POSIX::Termios

new, getattr, getcc, getcflag, getiflag, getispeed, getlflag, getoflag,
getospeed, setattr, setcc, setcflag, setiflag, setispeed, setlflag,
setoflag, setospeed, Baud rate values, Terminal interface values, c_cc
field values, c_cflag field values, c_iflag field values, c_lflag field
values, c_oflag field values

=back

=item PATHNAME CONSTANTS

Constants

=item POSIX CONSTANTS

Constants

=item SYSTEM CONFIGURATION

Constants

=item ERRNO

Constants

=item FCNTL

Constants

=item FLOAT

Constants

=item LIMITS

Constants

=item LOCALE

Constants

=item MATH

Constants

=item SIGNAL

Constants

=item STAT

Constants, Macros

=item STDLIB

Constants

=item STDIO

Constants

=item TIME

Constants

=item UNISTD

Constants

=item WAIT

Constants, Macros

=item CREATION

=back

=head2 Pod::Checker, podchecker() - check pod documents for syntax errors

=over

=item SYNOPSIS

=item OPTIONS/ARGUMENTS

=over

=item podchecker()

B<-warnings> =E<gt> I<val>

=back

=item DESCRIPTION

=item DIAGNOSTICS

=over

=item Errors

empty =headn, =over on line I<N> without closing =back, =item without
previous =over, =back without previous =over, No argument for =begin, =end
without =begin, Nested =begin's, =for without formatter specification,
unresolved internal link I<NAME>, Unknown command "I<CMD>", Unknown
interior-sequence "I<SEQ>", nested commands
I<CMD>E<lt>...I<CMD>E<lt>...E<gt>...E<gt>, garbled entity I<STRING>, Entity
number out of range, malformed link LE<lt>E<gt>, nonempty ZE<lt>E<gt>,
empty XE<lt>E<gt>, Spurious text after =pod / =cut, Spurious character(s)
after =back

=item Warnings

multiple occurence of link target I<name>, line containing nothing but
whitespace in paragraph, file does not start with =head, No numeric
argument for =over, previous =item has no contents, preceding non-item
paragraph(s), =item type mismatch (I<one> vs. I<two>), I<N> unescaped
C<E<lt>E<gt>> in paragraph, Unknown entity, No items in =over, No argument
for =item, empty section in previous paragraph, Verbatim paragraph in NAME
section, Hyperlinks

=back

=item RETURN VALUE

=item EXAMPLES

=item INTERFACE

=back

C<$checker-E<gt>poderror( @args )>, C<$checker-E<gt>poderror( {%opts},
@args )>

C<$checker-E<gt>num_errors()>

C<$checker-E<gt>name()>

C<$checker-E<gt>node()>

C<$checker-E<gt>idx()>

C<$checker-E<gt>hyperlink()>

=over

=item AUTHOR

=back

=head2 Pod::Find - find POD documents in directory trees

=over

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

B<-verbose>, B<-perl>, B<-script>, B<-inc>

=item AUTHOR

=item SEE ALSO

=back

=head2 Pod::Html - module to convert pod files to HTML

=over

=item SYNOPSIS

=item DESCRIPTION

=item ARGUMENTS

backlink, css, flush, header, help, htmldir, htmlroot, index, infile,
libpods, netscape, outfile, podpath, podroot, quiet, recurse, title,
verbose

=item EXAMPLE

=item ENVIRONMENT

=item AUTHOR

=item SEE ALSO

=item COPYRIGHT

=back

=head2 Pod::InputObjects - objects representing POD input paragraphs,
commands, etc.

=over

=item SYNOPSIS

=item REQUIRES

=item EXPORTS

=item DESCRIPTION

B<Pod::InputSource>, B<Pod::Paragraph>, B<Pod::InteriorSequence>,
B<Pod::ParseTree>

=back

=over

=item B<Pod::InputSource>

=back

=over

=item B<new()>

=back

=over

=item B<name()>

=back

=over

=item B<handle()>

=back

=over

=item B<was_cutting()>

=back

=over

=item B<Pod::Paragraph>

=back

=over

=item B<new()>

=back

=over

=item B<cmd_name()>

=back

=over

=item B<text()>

=back

=over

=item B<raw_text()>

=back

=over

=item B<cmd_prefix()>

=back

=over

=item B<cmd_separator()>

=back

=over

=item B<parse_tree()>

=back

=over

=item B<file_line()>

=back

=over

=item B<Pod::InteriorSequence>

=back

=over

=item B<new()>

=back

=over

=item B<cmd_name()>

=back

=over

=item B<prepend()>

=back

=over

=item B<append()>

=back

=over

=item B<nested()>

=back

=over

=item B<raw_text()>

=back

=over

=item B<left_delimiter()>

=back

=over

=item B<right_delimiter()>

=back

=over

=item B<parse_tree()>

=back

=over

=item B<file_line()>

=back

=over

=item B<DESTROY()>

=back

=over

=item B<Pod::ParseTree>

=back

=over

=item B<new()>

=back

=over

=item B<top()>

=back

=over

=item B<children()>

=back

=over

=item B<prepend()>

=back

=over

=item B<append()>

=back

=over

=item B<raw_text()>

=back

=over

=item B<DESTROY()>

=back

=over

=item SEE ALSO

=item AUTHOR

=back

=head2 Pod::Man - Convert POD data to formatted *roff input

=over

=item SYNOPSIS

=item DESCRIPTION

center, date, fixed, fixedbold, fixeditalic, fixedbolditalic, release,
section

=item DIAGNOSTICS

roff font should be 1 or 2 chars, not `%s', Invalid link %s, Unknown escape
EE<lt>%sE<gt>, Unknown sequence %s, Unmatched =back

=item BUGS

=item SEE ALSO

=item AUTHOR

=back

=head2 Pod::ParseUtils - helpers for POD parsing and conversion

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=over

=item Pod::List

new()

=back

file()

start()

indent()

type()

rx()

item()

parent()

tag()

=over

=item Pod::Hyperlink

new()

=back

parse($string)

markup($string)

text()

warning()

line(), file()

page()

node()

alttext()

type()

link()

=over

=item Pod::Cache

new()

=back

item()

find_page($name)

=over

=item Pod::Cache::Item

new()

=back

page()

description()

path()

file()

nodes()

find_node($name)

idx()

=over

=item AUTHOR

=item SEE ALSO

=back

=head2 Pod::Parser - base class for creating POD filters and translators

=over

=item SYNOPSIS

=item REQUIRES

=item EXPORTS

=item DESCRIPTION

=item QUICK OVERVIEW

=item PARSING OPTIONS

B<-want_nonPODs> (default: unset), B<-process_cut_cmd> (default: unset),
B<-warnings> (default: unset)

=back

=over

=item RECOMMENDED SUBROUTINE/METHOD OVERRIDES

=back

=over

=item B<command()>

C<$cmd>, C<$text>, C<$line_num>, C<$pod_para>

=back

=over

=item B<verbatim()>

C<$text>, C<$line_num>, C<$pod_para>

=back

=over

=item B<textblock()>

C<$text>, C<$line_num>, C<$pod_para>

=back

=over

=item B<interior_sequence()>

=back

=over

=item OPTIONAL SUBROUTINE/METHOD OVERRIDES

=back

=over

=item B<new()>

=back

=over

=item B<initialize()>

=back

=over

=item B<begin_pod()>

=back

=over

=item B<begin_input()>

=back

=over

=item B<end_input()>

=back

=over

=item B<end_pod()>

=back

=over

=item B<preprocess_line()>

=back

=over

=item B<preprocess_paragraph()>

=back

=over

=item METHODS FOR PARSING AND PROCESSING

=back

=over

=item B<parse_text()>

B<-expand_seq> =E<gt> I<code-ref>|I<method-name>, B<-expand_text> =E<gt>
I<code-ref>|I<method-name>, B<-expand_ptree> =E<gt>
I<code-ref>|I<method-name>

=back

=over

=item B<interpolate()>

=back

=over

=item B<parse_paragraph()>

=back

=over

=item B<parse_from_filehandle()>

=back

=over

=item B<parse_from_file()>

=back

=over

=item ACCESSOR METHODS

=back

=over

=item B<errorsub()>

=back

=over

=item B<cutting()>

=back

=over

=item B<parseopts()>

=back

=over

=item B<output_file()>

=back

=over

=item B<output_handle()>

=back

=over

=item B<input_file()>

=back

=over

=item B<input_handle()>

=back

=over

=item B<input_streams()>

=back

=over

=item B<top_stream()>

=back

=over

=item PRIVATE METHODS AND DATA

=back

=over

=item B<_push_input_stream()>

=back

=over

=item B<_pop_input_stream()>

=back

=over

=item TREE-BASED PARSING

=item SEE ALSO

=item AUTHOR

=back

=head2 Pod::Plainer - Perl extension for converting Pod to old style Pod.

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item EXPORT

=back

=item AUTHOR

=item SEE ALSO

=back

=head2 Pod::Select, podselect() - extract selected sections of POD from
input

=over

=item SYNOPSIS

=item REQUIRES

=item EXPORTS

=item DESCRIPTION

=item SECTION SPECIFICATIONS

=item RANGE SPECIFICATIONS

=back

=over

=item OBJECT METHODS

=back

=over

=item B<curr_headings()>

=back

=over

=item B<select()>

=back

=over

=item B<add_selection()>

=back

=over

=item B<clear_selections()>

=back

=over

=item B<match_section()>

=back

=over

=item B<is_selected()>

=back

=over

=item EXPORTED FUNCTIONS

=back

=over

=item B<podselect()>

B<-output>, B<-sections>, B<-ranges>

=back

=over

=item PRIVATE METHODS AND DATA

=back

=over

=item B<_compile_section_spec()>

=back

=over

=item $self->{_SECTION_HEADINGS}

=back

=over

=item $self->{_SELECTED_SECTIONS}

=back

=over

=item SEE ALSO

=item AUTHOR

=back

=head2 Pod::Text - Convert POD data to formatted ASCII text

=over

=item SYNOPSIS

=item DESCRIPTION

alt, indent, loose, sentence, width

=item DIAGNOSTICS

Bizarre space in item, Can't open %s for reading: %s, Unknown escape: %s,
Unknown sequence: %s, Unmatched =back

=item RESTRICTIONS

=item NOTES

=item SEE ALSO

=item AUTHOR

=back

=head2 Pod::Text::Color - Convert POD data to formatted color ASCII text

=over

=item SYNOPSIS

=item DESCRIPTION

=item BUGS

=item SEE ALSO

=item AUTHOR

=back

=head2 Pod::Text::Termcap, Pod::Text::Color - Convert POD data to ASCII
text with format escapes

=over

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=item AUTHOR

=back

=head2 Pod::Usage, pod2usage() - print a usage message from embedded pod
documentation

=over

=item SYNOPSIS

=item ARGUMENTS

C<-message>, C<-msg>, C<-exitval>, C<-verbose>, C<-output>, C<-input>,
C<-pathlist>

=item DESCRIPTION

=item EXAMPLES

=over

=item Recommended Use

=back

=item CAVEATS

=item AUTHOR

=item ACKNOWLEDGEMENTS

=back

=head2 SDBM_File - Tied access to sdbm files

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Safe - Compile and execute code in restricted compartments

=over

=item SYNOPSIS

=item DESCRIPTION

a new namespace, an operator mask

=item WARNING

=over

=item RECENT CHANGES

=item Methods in class Safe

permit (OP, ...), permit_only (OP, ...), deny (OP, ...), deny_only (OP,
...), trap (OP, ...), untrap (OP, ...), share (NAME, ...), share_from
(PACKAGE, ARRAYREF), varglob (VARNAME), reval (STRING), rdo (FILENAME),
root (NAMESPACE), mask (MASK)

=item Some Safety Issues

Memory, CPU, Snooping, Signals, State Changes

=item AUTHOR

=back

=back

=head2 Search::Dict, look - search for key in dictionary file

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 SelectSaver - save and restore selected file handle

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 SelfLoader - load functions only on demand

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item The __DATA__ token

=item SelfLoader autoloading

=item Autoloading and package lexicals

=item SelfLoader and AutoLoader

=item __DATA__, __END__, and the FOOBAR::DATA filehandle.

=item Classes and inherited methods.

=back

=item Multiple packages and fully qualified subroutine names

=back

=head2 Shell - run shell commands transparently within perl

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 Socket, sockaddr_in, sockaddr_un, inet_aton, inet_ntoa - load the C
socket.h defines and structure manipulators 

=over

=item SYNOPSIS

=item DESCRIPTION

inet_aton HOSTNAME, inet_ntoa IP_ADDRESS, INADDR_ANY, INADDR_BROADCAST,
INADDR_LOOPBACK, INADDR_NONE, sockaddr_in PORT, ADDRESS, sockaddr_in
SOCKADDR_IN, pack_sockaddr_in PORT, IP_ADDRESS, unpack_sockaddr_in
SOCKADDR_IN, sockaddr_un PATHNAME, sockaddr_un SOCKADDR_UN,
pack_sockaddr_un PATH, unpack_sockaddr_un SOCKADDR_UN

=back

=head2 Symbol - manipulate Perl symbols and their names

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Sys::Hostname - Try every conceivable way to get hostname

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 Syslog, Sys::Syslog, openlog, closelog, setlogmask, syslog - Perl
interface to the UNIX syslog(3) calls

=over

=item SYNOPSIS

=item DESCRIPTION

openlog $ident, $logopt, $facility, syslog $priority, $format, @args,
setlogmask $mask_priority, setlogsock $sock_type (added in 5.004_02),
closelog

=item EXAMPLES

=item SEE ALSO

=item AUTHOR

=back

=head2 Syslog::Syslog, Sys::Syslog, openlog, closelog, setlogmask, syslog -
Perl interface to the UNIX syslog(3) calls

=over

=item SYNOPSIS

=item DESCRIPTION

openlog $ident, $logopt, $facility, syslog $priority, $format, @args,
setlogmask $mask_priority, setlogsock $sock_type (added in 5.004_02),
closelog

=item EXAMPLES

=item SEE ALSO

=item AUTHOR

=back

=head2 Term::ANSIColor - Color screen output using ANSI escape sequences

=over

=item SYNOPSIS

=item DESCRIPTION

=item DIAGNOSTICS

Invalid attribute name %s, Identifier %s used only once: possible typo, No
comma allowed after filehandle, Bareword %s not allowed while "strict subs"
in use

=item RESTRICTIONS

=item AUTHORS

=back

=head2 Term::Cap - Perl termcap interface

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=back

=head2 Term::Complete - Perl word completion module

=over

=item SYNOPSIS

=item DESCRIPTION

E<lt>tabE<gt>, ^D, ^U, E<lt>delE<gt>, E<lt>bsE<gt>

=item DIAGNOSTICS

=item BUGS

=item AUTHOR

=back

=head2 Term::ReadLine - Perl interface to various C<readline> packages. If
no real package is found, substitutes stubs instead of basic functions.

=over

=item SYNOPSIS

=item DESCRIPTION

=item Minimal set of supported functions

C<ReadLine>, C<new>, C<readline>, C<addhistory>, C<IN>, $C<OUT>,
C<MinLine>, C<findConsole>, Attribs, C<Features>

=item Additional supported functions

C<tkRunning>, C<ornaments>, C<newTTY>

=item EXPORTS

=item ENVIRONMENT

=back

=head2	 Test - provides a simple framework for writing test scripts

=over

=item SYNOPSIS

=item DESCRIPTION

=item TEST TYPES

NORMAL TESTS, SKIPPED TESTS, TODO TESTS

=item RETURN VALUE

=item ONFAIL

=item SEE ALSO

=item AUTHOR

=back

=head2 Test::Harness - run perl standard test scripts with statistics

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item The test script output

=back

=item EXPORT

=item DIAGNOSTICS

C<All tests successful.\nFiles=%d,  Tests=%d, %s>, C<FAILED tests
%s\n\tFailed %d/%d tests, %.2f%% okay.>, C<Test returned status %d (wstat
%d)>, C<Failed 1 test, %.2f%% okay. %s>, C<Failed %d/%d tests, %.2f%% okay.
%s>

=item ENVIRONMENT

=item SEE ALSO

=item AUTHORS

=item BUGS

=back

=head2 Text::Abbrev, abbrev - create an abbreviation table from a list

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLE

=back

=head2 Text::ParseWords - parse text into an array of tokens or array of
arrays

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

0a simple word, 1multiple spaces are skipped because of our $delim, 2use of
quotes to include a space in a word, 3use of a backslash to include a space
in a word, 4use of a backslash to remove the special meaning of a
double-quote, 5another simple word (note the lack of effect of the
backslashed double-quote)

=item AUTHORS

=back

=head2 Text::Soundex - Implementation of the Soundex Algorithm as Described
by Knuth

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=item LIMITATIONS

=item AUTHOR

=back

=head2 Text::Tabs -- expand and unexpand tabs per the unix expand(1) and
unexpand(1)

=over

=item SYNOPSIS

=item DESCRIPTION

=item BUGS

=item AUTHOR

=back

=head2 Text::Wrap - line wrapping to form simple paragraphs

=over

=item SYNOPSIS 

=item DESCRIPTION

=item EXAMPLE

=item AUTHOR

=back

=head2 Thread - manipulate threads in Perl (EXPERIMENTAL, subject to
change)

=over

=item SYNOPSIS

=item DESCRIPTION

=item FUNCTIONS

new \&start_sub, new \&start_sub, LIST, lock VARIABLE, async BLOCK;,
Thread->self, Thread->list, cond_wait VARIABLE, cond_signal VARIABLE,
cond_broadcast VARIABLE, yield

=item METHODS

join, eval, detach, equal, tid

=item LIMITATIONS

=item SEE ALSO

=back

=head2 Thread::Queue - thread-safe queues

=over

=item SYNOPSIS

=item DESCRIPTION

=item FUNCTIONS AND METHODS

new, enqueue LIST, dequeue, dequeue_nb, pending

=item SEE ALSO

=back

=head2 Thread::Semaphore - thread-safe semaphores

=over

=item SYNOPSIS

=item DESCRIPTION

=item FUNCTIONS AND METHODS

new, new NUMBER, down, down NUMBER, up, up NUMBER

=back

=head2 Thread::Signal - Start a thread which runs signal handlers reliably

=over

=item SYNOPSIS

=item DESCRIPTION

=item BUGS

=back

=head2 Thread::Specific - thread-specific keys

=over

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Tie::Array - base class for tied arrays

=over

=item SYNOPSIS	

=item DESCRIPTION	

TIEARRAY classname, LIST, STORE this, index, value, FETCH this, index,
FETCHSIZE this, STORESIZE this, count, EXTEND this, count, EXISTS this,
key, DELETE this, key, CLEAR this, DESTROY this, PUSH this, LIST, POP this,
SHIFT this, UNSHIFT this, LIST, SPLICE this, offset, length, LIST

=item CAVEATS

=item AUTHOR 

=back

=head2 Tie::Handle, Tie::StdHandle  - base class definitions for tied
handles

=over

=item SYNOPSIS

=item DESCRIPTION

TIEHANDLE classname, LIST, WRITE this, scalar, length, offset, PRINT this,
LIST, PRINTF this, format, LIST, READ this, scalar, length, offset,
READLINE this, GETC this, CLOSE this, OPEN this, filename, BINMODE this,
EOF this, TELL this, SEEK this, offset, whence, DESTROY this

=item MORE INFORMATION

=back

=head2 Tie::Hash, Tie::StdHash - base class definitions for tied hashes

=over

=item SYNOPSIS

=item DESCRIPTION

TIEHASH classname, LIST, STORE this, key, value, FETCH this, key, FIRSTKEY
this, NEXTKEY this, lastkey, EXISTS this, key, DELETE this, key, CLEAR this

=item CAVEATS

=item MORE INFORMATION

=back

=head2 Tie::RefHash - use references as hash keys

=over

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLE

=item AUTHOR

=item VERSION

=item SEE ALSO

=back

=head2 Tie::Scalar, Tie::StdScalar - base class definitions for tied
scalars

=over

=item SYNOPSIS

=item DESCRIPTION

TIESCALAR classname, LIST, FETCH this, STORE this, value, DESTROY this

=item MORE INFORMATION

=back

=head2 Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing

=over

=item SYNOPSIS

=item DESCRIPTION

=item CAVEATS

=back

=head2 Time::Local - efficiently compute time from local and GMT time

=over

=item SYNOPSIS

=item DESCRIPTION

=item IMPLEMENTATION

=item BUGS

=back

=head2 Time::gmtime - by-name interface to Perl's built-in gmtime()
function

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 Time::localtime - by-name interface to Perl's built-in localtime()
function

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 Time::tm - internal object used by Time::gmtime and Time::localtime

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 UNIVERSAL - base class for ALL classes (blessed references)

=over

=item SYNOPSIS

=item DESCRIPTION

isa ( TYPE ), can ( METHOD ), VERSION ( [ REQUIRE ] ), UNIVERSAL::isa (
VAL, TYPE ), UNIVERSAL::can ( VAL, METHOD )

=back

=head2 User::grent - by-name interface to Perl's built-in getgr*()
functions

=over

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 User::pwent - by-name interface to Perl's built-in getpw*()
functions

=over

=item SYNOPSIS

=item DESCRIPTION

=over

=item System Specifics

=back

=item NOTE

=item AUTHOR

=item HISTORY

March 18th, 2000

=back

=head2 XSLoader - Dynamically load C libraries into Perl code

=over

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head1 AUXILIARY DOCUMENTATION

Here should be listed all the extra programs' documentation, but they
don't all have manual pages yet:

=over

=item a2p

=item s2p

=item find2perl

=item h2ph

=item c2ph

=item h2xs

=item xsubpp

=item pod2man

=item wrapsuid

=back

=head1 AUTHOR

Larry Wall <F<larry@wall.org>>, with the help of oodles
of other folks.

