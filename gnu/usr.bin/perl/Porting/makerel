#!/usr/bin/perl -w

# A first attempt at some automated support for making a perl release.
# Very basic but functional - if you're on a unix system.
#
# No matter how automated this gets, you'll always need to read
# and re-read pumpkin.pod checking for things to be done at various
# stages of the process.
#
# Tim Bunce, June 1997

use ExtUtils::Manifest qw(fullcheck);
$ExtUtils::Manifest::Quiet = 1;
use Getopt::Std;

$|=1;

sub usage { die <<EOF; }
usage: $0 [ -r rootdir ] [-s suffix ] [ -b ]
    -r rootdir   directory under which to create the build dir and tarball
                 defaults to '..'
    -s suffix    suffix to append to to the perl-x.y.z dir and tarball name
		 defaults to the concatenaion of the local_patches entry
		 in patchlevel.h (or blank, if none)
    -b           make a .bz2 file in addtion to a .gz file
EOF

my %opts;
getopts('br:s:', \%opts) or usage;
@ARGV && usage;

$relroot = defined $opts{r} ? $opts{r} : "..";

die "Must be in root of the perl source tree.\n"
	unless -f "./MANIFEST" and -f "patchlevel.h";

open PATCHLEVEL,"<patchlevel.h" or die;
my @patchlevel_h = <PATCHLEVEL>;
close PATCHLEVEL;
my $patchlevel_h = join "", grep { /^#\s*define/ } @patchlevel_h;
print $patchlevel_h;
$revision = $1 if $patchlevel_h =~ /PERL_REVISION\s+(\d+)/;
$patchlevel = $1 if $patchlevel_h =~ /PERL_VERSION\s+(\d+)/;
$subversion = $1 if $patchlevel_h =~ /PERL_SUBVERSION\s+(\d+)/;
die "Unable to parse patchlevel.h" unless $subversion >= 0;
$vers = sprintf("%d.%d.%d", $revision, $patchlevel, $subversion);

# fetch list of local patches
my (@local_patches, @lpatch_tags, $lpatch_tags);
@local_patches = grep { /^static.*local_patches/../^};/ } @patchlevel_h;
@local_patches = grep { !/^\s*,?NULL/  } @local_patches;
@lpatch_tags   = map  {  /^\s*,"(\w+)/ } @local_patches;
$lpatch_tags   = join "-", @lpatch_tags;

$perl = "perl-$vers";
$reldir = "$perl";

$lpatch_tags = $opts{s} if defined $opts{s};
$reldir .= "-$lpatch_tags" if $lpatch_tags;

print "\nMaking a release for $perl in $relroot/$reldir\n\n";

print "Cross-checking the MANIFEST...\n";
($missfile, $missentry) = fullcheck();
@$missentry
    = grep {$_ !~ m!^\.git/! and $_ !~ m!(?:/|^)\.gitignore!} @$missentry;
if (@$missfile ) {
    warn "Can't make a release with MANIFEST files missing:\n";
    warn "\t".$_."\n" for (@$missfile);
}
if (@$missentry ) {
    warn "Can't make a release with files not listed in MANIFEST\n";
    warn "\t".$_."\n" for (@$missentry);

}
if ("@$missentry" =~ m/\.orig\b/) {
    # Handy listing of find command and .orig files from patching work.
    # I tend to run 'xargs rm' and copy and paste the file list.
    my $cmd = "find . -name '*.orig' -print";
    print "$cmd\n";
    system($cmd);
}
die "Aborted.\n" if @$missentry or @$missfile;
print "\n";

# VMS no longer has hardcoded version numbers descrip.mms

print "Creating $relroot/$reldir release directory...\n";
die "$relroot/$reldir release directory already exists\n"   if -e "$relroot/$reldir";
die "$relroot/$reldir.tar.gz release file already exists\n" if -e "$relroot/$reldir.tar.gz";
mkdir("$relroot/$reldir", 0755) or die "mkdir $relroot/$reldir: $!\n";
print "\n";


print "Copying files to release directory...\n";
# ExtUtils::Manifest maniread does not preserve the order
$cmd = "awk '{print \$1}' MANIFEST | cpio -pdm $relroot/$reldir";
system($cmd) == 0
    or die "$cmd failed";
print "\n";

chdir "$relroot/$reldir" or die $!;

print "Setting file permissions...\n";
system("find . -type f -print     | xargs chmod 0444");
system("find . -type d -print     | xargs chmod 0755");
system("find t ext lib -name '*.t'     -print | xargs chmod +x");
system("find t ext lib -name 'test.pl' -print | xargs chmod +x");
my @exe = qw(
    Configure
    configpm
    configure.gnu
    embed.pl
    installperl
    installman
    keywords.pl
    opcode.pl
    t/TEST
    *.SH
    vms/ext/Stdio/test.pl
    vms/ext/filespec.t
    x2p/*.SH
    Porting/findrfuncs
    Porting/genlog
    Porting/makerel
    Porting/*.pl
    mpeix/nm
    mpeix/relink
    Cross/generate_config_sh
    Cross/warp
);
system("chmod +x @exe") == 0
    or die "system: $!";

my @writables = qw(
    NetWare/config_H.wc
    NetWare/Makefile
    keywords.h
    opcode.h
    opnames.h
    pp_proto.h
    pp.sym
    proto.h
    embed.h
    embedvar.h
    global.sym
    overload.c
    overload.h
    perlapi.h
    perlapi.c
    ext/Devel-PPPort/module2.c
    ext/Devel-PPPort/module3.c
    reentr.c
    reentr.h
    regcharclass.h
    regnodes.h
    warnings.h
    lib/warnings.pm
    win32/Makefile
    win32/Makefile.ce
    win32/makefile.mk
    win32/config_H.bc
    win32/config_H.gc
    win32/config_H.vc
    utils/Makefile
    uconfig.h
);
system("chmod +w @writables") == 0
    or die "system: $!";

print "Adding CRs to DOSish files...\n";
# This list is also in curliff.pl.
my @crlf = qw(
    djgpp/configure.bat
    README.ce
    README.dos
    README.symbian
    README.win32
    symbian/config.pl
    symbian/makesis.pl
    symbian/README
    symbian/xsbuild.pl
    win32/Makefile
    win32/Makefile.ce
    win32/ce-helpers/compile-all.bat
    win32/ce-helpers/compile.bat
    win32/ce-helpers/registry.bat
    win32/distclean.bat
    win32/makefile.mk
);
system("perl -pi -e 's/\\015*\\012/\\015\\012/' @crlf") == 0
    or die "system: $!";
print "\n";

chdir ".." or die $!;

my $src = (-e $perl) ? $perl : 'perl'; # 'perl' in maint branch

print "Creating and compressing the tar.gz file...\n";
$cmd = "tar cf - $reldir | gzip --best > $reldir.tar.gz";
system($cmd) == 0 or die "$cmd failed";

if ($opts{b}) {
    print "Creating and compressing the tar.bz2 file...\n";
    $cmd = "tar cf - $reldir | bzip2 > $reldir.tar.bz2";
    system($cmd) == 0 or die "$cmd failed";
}

print "\n";

system("ls -ld $perl*");
print "\n";

for my $sha (qw(sha1 shasum sha1sum)) {
    if (`which $sha 2>/dev/null`) {
	system("$sha $perl*.tar.*");
	last;
    }
}
