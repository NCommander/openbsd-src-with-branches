IMPORTANT: After applying this patch, you must rebuild the
Info documentation derived from the Texinfo files in the
gcc distribution, as this patch does not include patches
to any derived files (due to differences in the way gcc
version 2.7.2.1 is obtained by users).  Use the following
command sequence after applying this patch:

  cd gcc-2.7.2.1; make -f Makefile.in gcc.info

If that fails due to `makeinfo' not being installed, obtain
texinfo-3.9.tar.gz from a GNU distribution site, unpack,
build, and install it, and try the above command sequence
again.


diff -rcp2N gcc-2.7.2.1/flags.h gcc-2.7.2.1.f.1/flags.h
*** gcc-2.7.2.1/flags.h	Thu Jun 15 07:34:11 1995
--- gcc-2.7.2.1.f.1/flags.h	Mon Nov 11 15:02:26 1996
*************** extern int flag_unroll_loops;
*** 204,207 ****
--- 204,221 ----
  extern int flag_unroll_all_loops;
  
+ /* Nonzero forces all invariant computations in loops to be moved
+    outside the loop. */
+ 
+ extern int flag_move_all_movables;
+ 
+ /* Nonzero forces all general induction variables in loops to be
+    strength reduced. */
+ 
+ extern int flag_reduce_all_givs;
+ 
+ /* Nonzero gets another run of loop_optimize performed. */
+ 
+ extern int flag_rerun_loop_opt;
+ 
  /* Nonzero for -fcse-follow-jumps:
     have cse follow jumps to do a more extensive job.  */
diff -rcp2N gcc-2.7.2.1/gcc.texi gcc-2.7.2.1.f.1/gcc.texi
*** gcc-2.7.2.1/gcc.texi	Mon Nov 11 14:54:07 1996
--- gcc-2.7.2.1.f.1/gcc.texi	Mon Nov 11 15:04:26 1996
*************** original English.
*** 149,152 ****
--- 149,153 ----
  @sp 3
  @center Last updated 29 June 1996
+ @center (Revised for GNU Fortran 1996-03-06)
  @sp 1
  @c The version number appears twice more in this file.  
diff -rcp2N gcc-2.7.2.1/invoke.texi gcc-2.7.2.1.f.1/invoke.texi
*** gcc-2.7.2.1/invoke.texi	Tue Oct  3 11:40:43 1995
--- gcc-2.7.2.1.f.1/invoke.texi	Mon Nov 11 15:02:33 1996
*************** in the following sections.
*** 149,152 ****
--- 149,153 ----
  -fschedule-insns2  -fstrength-reduce  -fthread-jumps 
  -funroll-all-loops  -funroll-loops
+ -fmove-all-movables  -freduce-all-givs  -frerun-loop-opt
  -O  -O0  -O1  -O2  -O3
  @end smallexample
*************** Perform the optimization of loop unrolli
*** 1940,1943 ****
--- 1941,1985 ----
  and usually makes programs run more slowly.  @samp{-funroll-all-loops}
  implies @samp{-fstrength-reduce} as well as @samp{-frerun-cse-after-loop}.
+ 
+ @item -fmove-all-movables
+ Forces all invariant computations in loops to be moved
+ outside the loop.
+ This option is provided primarily to improve performance
+ for some Fortran code, though it might improve code written
+ in other languages.
+ 
+ @emph{Note:} When compiling programs written in Fortran,
+ this option is enabled by default.
+ 
+ Analysis of Fortran code optimization and the resulting
+ optimizations triggered by this option, and the
+ @samp{-freduce-all-givs} and @samp{-frerun-loop-opt}
+ options as well, were
+ contributed by Toon Moene (@code{toon@@moene.indiv.nluug.nl}).
+ 
+ Please let us (@code{fortran@@gnu.ai.mit.edu})
+ know how use of these options affects
+ the performance of your production code.
+ We're very interested in code that runs @emph{slower}
+ when these options are @emph{enabled}.
+ 
+ @item -freduce-all-givs
+ Forces all general-induction variables in loops to be
+ strength-reduced.
+ This option is provided primarily to improve performance
+ for some Fortran code, though it might improve code written
+ in other languages.
+ 
+ @emph{Note:} When compiling programs written in Fortran,
+ this option is enabled by default.
+ 
+ @item -frerun-loop-opt
+ Runs loop optimizations a second time.
+ This option is provided primarily to improve performance
+ for some Fortran code, though it might improve code written
+ in other languages.
+ 
+ @emph{Note:} When compiling programs written in Fortran,
+ this option is enabled by default.
  
  @item -fno-peephole
diff -rcp2N gcc-2.7.2.1/loop.c gcc-2.7.2.1.f.1/loop.c
*** gcc-2.7.2.1/loop.c	Mon Nov 11 14:54:08 1996
--- gcc-2.7.2.1.f.1/loop.c	Mon Nov 11 15:02:33 1996
*************** move_movables (movables, threshold, insn
*** 1629,1632 ****
--- 1629,1633 ----
  
  	  if (already_moved[regno]
+ 	      || flag_move_all_movables
  	      || (threshold * savings * m->lifetime) >= insn_count
  	      || (m->forces && m->forces->done
*************** strength_reduce (scan_start, end, loop_t
*** 3821,3826 ****
  	     exit.  */
  
! 	  if (v->lifetime * threshold * benefit < insn_count
! 	      && ! bl->reversed)
  	    {
  	      if (loop_dump_stream)
--- 3822,3827 ----
  	     exit.  */
  
! 	  if ( ! flag_reduce_all_givs && v->lifetime * threshold * benefit < insn_count
! 	      && ! bl->reversed )
  	    {
  	      if (loop_dump_stream)
diff -rcp2N gcc-2.7.2.1/toplev.c gcc-2.7.2.1.f.1/toplev.c
*** gcc-2.7.2.1/toplev.c	Fri Oct 20 17:56:35 1995
--- gcc-2.7.2.1.f.1/toplev.c	Mon Nov 11 15:02:33 1996
*************** int flag_unroll_loops;
*** 388,391 ****
--- 388,405 ----
  int flag_unroll_all_loops;
  
+ /* Nonzero forces all invariant computations in loops to be moved
+    outside the loop. */
+ 
+ int flag_move_all_movables = 0;
+ 
+ /* Nonzero forces all general induction variables in loops to be
+    strength reduced. */
+ 
+ int flag_reduce_all_givs = 0;
+ 
+ /* Nonzero gets another run of loop_optimize performed. */
+ 
+ int flag_rerun_loop_opt = 0;
+ 
  /* Nonzero for -fwritable-strings:
     store string constants in data segment and don't uniquize them.  */
*************** struct { char *string; int *variable; in
*** 542,545 ****
--- 556,562 ----
    {"unroll-loops", &flag_unroll_loops, 1},
    {"unroll-all-loops", &flag_unroll_all_loops, 1},
+   {"move-all-movables", &flag_move_all_movables, 1},
+   {"reduce-all-givs", &flag_reduce_all_givs, 1},
+   {"rerun-loop-opt", &flag_rerun_loop_opt, 1},
    {"writable-strings", &flag_writable_strings, 1},
    {"peephole", &flag_no_peephole, 0},
*************** rest_of_compilation (decl)
*** 2894,2897 ****
--- 2911,2916 ----
  	       {
  		 loop_optimize (insns, loop_dump_file);
+ 		 if (flag_rerun_loop_opt)
+ 		 	loop_optimize (insns, loop_dump_file);
  	       });
      }
diff -rcp2N gcc-2.7.2.1/tree.c gcc-2.7.2.1.f.1/tree.c
*** gcc-2.7.2.1/tree.c	Sun Oct  1 21:26:56 1995
--- gcc-2.7.2.1.f.1/tree.c	Mon Nov 11 15:02:33 1996
*************** saveable_tree_cons (purpose, value, chai
*** 1965,1968 ****
--- 1965,1992 ----
  }
  
+ /* Try to find out whether the type for which the size is to be determined
+    is an ARRAY(of ARRAY(of ARRAY ... of something with a constant size
+    which is an integral multiple of BITS_PER_UNIT)).
+    In that case, the size in bytes can be determined using an EXACT_DIV_EXPR.
+ */
+ enum tree_code
+ which_div_expr(type)
+      tree type;
+ {
+   tree t;
+ 
+   if (TREE_CODE (type) != POINTER_TYPE && TREE_CODE (type) != ARRAY_TYPE)
+     return CEIL_DIV_EXPR;
+ 
+   for (t = TREE_TYPE (type); TREE_CODE (t) == ARRAY_TYPE; t = TREE_TYPE (t))
+     ;
+ 
+   if (TYPE_SIZE (t) != 0 && TREE_CODE (TYPE_SIZE (t)) == INTEGER_CST &&
+       TREE_INT_CST_LOW (TYPE_SIZE (t)) % BITS_PER_UNIT == 0)
+     return EXACT_DIV_EXPR;
+   else
+     return CEIL_DIV_EXPR;
+ }
+ 
  /* Return the size nominally occupied by an object of type TYPE
     when it resides in memory.  The value is measured in units of bytes,
*************** size_in_bytes (type)
*** 1985,1989 ****
        return integer_zero_node;
      }
!   t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type),
  		  size_int (BITS_PER_UNIT));
    if (TREE_CODE (t) == INTEGER_CST)
--- 2009,2013 ----
        return integer_zero_node;
      }
!   t = size_binop (which_div_expr (type), TYPE_SIZE (type),
  		  size_int (BITS_PER_UNIT));
    if (TREE_CODE (t) == INTEGER_CST)
*************** int_size_in_bytes (type)
*** 2009,2013 ****
    if (TREE_INT_CST_HIGH (TYPE_SIZE (type)) != 0)
      {
!       tree t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type),
  			   size_int (BITS_PER_UNIT));
        return TREE_INT_CST_LOW (t);
--- 2033,2037 ----
    if (TREE_INT_CST_HIGH (TYPE_SIZE (type)) != 0)
      {
!       tree t = size_binop (which_div_expr (type), TYPE_SIZE (type),
  			   size_int (BITS_PER_UNIT));
        return TREE_INT_CST_LOW (t);
diff -rcp2N gcc-2.7.2.1/version.c gcc-2.7.2.1.f.1/version.c
*** gcc-2.7.2.1/version.c	Mon Nov 11 14:54:09 1996
--- gcc-2.7.2.1.f.1/version.c	Mon Nov 11 15:02:34 1996
***************
*** 1 ****
! char *version_string = "2.7.2.1";
--- 1 ----
! char *version_string = "2.7.2.1.f.1";
