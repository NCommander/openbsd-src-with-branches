*** gcc-2.7.2/flags.h	Thu Jun 15 07:34:11 1995
--- g77-new/flags.h	Wed Mar  6 10:32:55 1996
*************** extern int flag_unroll_loops;
*** 204,207 ****
--- 204,221 ----
  extern int flag_unroll_all_loops;
  
+ /* Nonzero forces all invariant computations in loops to be moved
+    outside the loop. */
+ 
+ extern int flag_move_all_movables;
+ 
+ /* Nonzero forces all general induction variables in loops to be
+    strength reduced. */
+ 
+ extern int flag_reduce_all_givs;
+ 
+ /* Nonzero gets another run of loop_optimize performed. */
+ 
+ extern int flag_rerun_loop_opt;
+ 
  /* Nonzero for -fcse-follow-jumps:
     have cse follow jumps to do a more extensive job.  */
*** gcc-2.7.2/gcc.info	Wed Mar  6 10:23:38 1996
--- g77-new/gcc.info	Fri Mar 15 02:17:17 1996
*************** Indirect:
*** 34,60 ****
  gcc.info-1: 1382
  gcc.info-2: 42854
! gcc.info-3: 80578
! gcc.info-4: 127608
! gcc.info-5: 173792
! gcc.info-6: 214726
! gcc.info-7: 235436
! gcc.info-8: 285158
! gcc.info-9: 333642
! gcc.info-10: 382691
! gcc.info-11: 419654
! gcc.info-12: 468472
! gcc.info-13: 517503
! gcc.info-14: 564845
! gcc.info-15: 604398
! gcc.info-16: 654371
! gcc.info-17: 703324
! gcc.info-18: 751502
! gcc.info-19: 797360
! gcc.info-20: 846162
! gcc.info-21: 890260
! gcc.info-22: 933466
! gcc.info-23: 982355
! gcc.info-24: 1032258
! gcc.info-25: 1067513
  
  Tag Table:
--- 34,60 ----
  gcc.info-1: 1382
  gcc.info-2: 42854
! gcc.info-3: 80645
! gcc.info-4: 129158
! gcc.info-5: 175342
! gcc.info-6: 216276
! gcc.info-7: 236986
! gcc.info-8: 286708
! gcc.info-9: 335192
! gcc.info-10: 384241
! gcc.info-11: 421204
! gcc.info-12: 470022
! gcc.info-13: 519053
! gcc.info-14: 566395
! gcc.info-15: 605948
! gcc.info-16: 655921
! gcc.info-17: 704874
! gcc.info-18: 753052
! gcc.info-19: 798910
! gcc.info-20: 847712
! gcc.info-21: 891810
! gcc.info-22: 935016
! gcc.info-23: 983905
! gcc.info-24: 1033808
! gcc.info-25: 1069063
  
  Tag Table:
*************** Node: G++ and GCC37258
*** 68,297 ****
  Node: Invoking GCC39475
  Node: Option Summary42854
! Node: Overall Options53305
! Node: Invoking G++57868
! Node: C Dialect Options59742
! Node: C++ Dialect Options69842
! Node: Warning Options80578
! Node: Debugging Options95513
! Node: Optimize Options105094
! Node: Preprocessor Options115596
! Node: Assembler Options122059
! Node: Link Options122426
! Node: Directory Options127608
! Node: Target Options131100
! Node: Submodel Options134757
! Node: M680x0 Options136138
! Node: VAX Options139647
! Node: SPARC Options140182
! Node: Convex Options146602
! Node: AMD29K Options148783
! Node: ARM Options151814
! Node: M88K Options153231
! Node: RS/6000 and PowerPC Options161178
! Node: RT Options172088
! Node: MIPS Options173792
! Node: i386 Options181418
! Node: HPPA Options186857
! Node: Intel 960 Options189953
! Node: DEC Alpha Options192563
! Node: Clipper Options194235
! Node: H8/300 Options194634
! Node: System V Options195079
! Node: Code Gen Options195765
! Node: Environment Variables204274
! Node: Running Protoize208497
! Node: Installation214726
! Node: Configurations235436
! Node: Other Dir271347
! Node: Cross-Compiler273063
! Node: Steps of Cross274894
! Node: Configure Cross276012
! Node: Tools and Libraries276649
! Node: Cross Runtime279092
! Node: Cross Headers283173
! Node: Build Cross285158
! Node: Sun Install287034
! Node: VMS Install288166
! Node: Collect2298095
! Node: Header Dirs300804
! Node: C Extensions302218
! Node: Statement Exprs305497
! Node: Local Labels307391
! Node: Labels as Values309453
! Node: Nested Functions311318
! Node: Constructing Calls315174
! Node: Naming Types317231
! Node: Typeof318325
! Node: Lvalues320190
! Node: Conditionals322630
! Node: Long Long323521
! Node: Complex324965
! Node: Zero Length326827
! Node: Variable Length327501
! Node: Macro Varargs330026
! Node: Subscripting332129
! Node: Pointer Arith332612
! Node: Initializers333177
! Node: Constructors333642
! Node: Labeled Elements335336
! Node: Case Ranges337965
! Node: Cast to Union338646
! Node: Function Attributes339724
! Node: Function Prototypes348987
! Node: C++ Comments350786
! Node: Dollar Signs351322
! Node: Character Escapes352102
! Node: Alignment352383
! Node: Variable Attributes353855
! Node: Type Attributes361763
! Node: Inline368282
! Node: Extended Asm372159
! Node: Asm Labels382691
! Node: Explicit Reg Vars384010
! Node: Global Reg Vars385258
! Node: Local Reg Vars389823
! Node: Alternate Keywords391415
! Node: Incomplete Enums392817
! Node: Function Names393573
! Node: C++ Extensions394824
! Node: Naming Results396061
! Node: Min and Max399375
! Node: Destructors and Goto400825
! Node: C++ Interface401375
! Node: Template Instantiation406598
! Node: C++ Signatures412330
! Node: Trouble416674
! Node: Actual Bugs418385
! Node: Installation Problems419654
! Node: Cross-Compiler Problems433440
! Node: Interoperation434911
! Node: External Bugs448275
! Node: Incompatibilities450407
! Node: Fixed Headers458957
! Node: Standard Libraries461299
! Node: Disappointments462546
! Node: C++ Misunderstandings466771
! Node: Static Definitions467418
! Node: Temporaries468472
! Node: Protoize Caveats470676
! Node: Non-bugs474632
! Node: Warnings and Errors483592
! Node: Bugs485362
! Node: Bug Criteria486722
! Node: Bug Lists489152
! Node: Bug Reporting490545
! Node: Sending Patches502963
! Node: Service508350
! Node: VMS508911
! Node: Include Files and VMS509304
! Node: Global Declarations513194
! Node: VMS Misc517503
! Node: Portability521829
! Node: Interface523592
! Node: Passes528225
! Node: RTL545568
! Node: RTL Objects547456
! Node: Accessors550500
! Node: Flags555826
! Node: Machine Modes564845
! Node: Constants572479
! Node: Regs and Memory577667
! Node: Arithmetic589377
! Node: Comparisons595275
! Node: Bit Fields599337
! Node: Conversions600701
! Node: RTL Declarations603589
! Node: Side Effects604398
! Node: Incdec616945
! Node: Assembler619461
! Node: Insns620983
! Node: Calls641836
! Node: Sharing644431
! Node: Reading RTL647507
! Node: Machine Desc648446
! Node: Patterns650299
! Node: Example653243
! Node: RTL Template654371
! Node: Output Template666569
! Node: Output Statement670530
! Node: Constraints674243
! Node: Simple Constraints675246
! Node: Multi-Alternative686679
! Node: Class Preferences689515
! Node: Modifiers690395
! Node: Machine Constraints693555
! Node: No Constraints702203
! Node: Standard Names703324
! Node: Pattern Ordering731232
! Node: Dependent Patterns732458
! Node: Jump Patterns735273
! Node: Insn Canonicalizations741089
! Node: Peephole Definitions744584
! Node: Expander Definitions751502
! Node: Insn Splitting758948
! Node: Insn Attributes765962
! Node: Defining Attributes767009
! Node: Expressions769021
! Node: Tagging Insns775333
! Node: Attr Example779696
! Node: Insn Lengths782072
! Node: Constant Attributes785436
! Node: Delay Slots786596
! Node: Function Units789807
! Node: Target Macros795477
! Node: Driver797360
! Node: Run-time Target809090
! Node: Storage Layout814977
! Node: Type Layout828925
! Node: Registers835348
! Node: Register Basics836328
! Node: Allocation Order840365
! Node: Values in Registers841783
! Node: Leaf Functions846162
! Node: Stack Registers848637
! Node: Obsolete Register Macros849470
! Node: Register Classes852165
! Node: Stack and Calling871700
! Node: Frame Layout872136
! Node: Frame Registers875576
! Node: Elimination879386
! Node: Stack Arguments883642
! Node: Register Arguments890260
! Node: Scalar Return898935
! Node: Aggregate Return902898
! Node: Caller Saves906613
! Node: Function Entry907763
! Node: Profiling916691
! Node: Varargs919595
! Node: Trampolines927004
! Node: Library Calls933466
! Node: Addressing Modes941524
! Node: Condition Code949112
! Node: Costs955311
! Node: Sections963690
! Node: PIC968479
! Node: Assembler Format971189
! Node: File Framework972194
! Node: Data Output976431
! Node: Uninitialized Data982355
! Node: Label Output985062
! Node: Initialization994456
! Node: Macros for Initialization1000599
! Node: Instruction Output1005196
! Node: Dispatch Tables1013191
! Node: Alignment Output1015568
! Node: Debugging Info1017308
! Node: All Debuggers1017917
! Node: DBX Options1020331
! Node: DBX Hooks1025216
! Node: File Names and DBX1028555
! Node: SDB and DWARF1030528
! Node: Cross-compilation1032258
! Node: Misc1038705
! Node: Config1055831
! Node: Fragments1063276
! Node: Target Fragment1063873
! Node: Host Fragment1066911
! Node: Index1067513
  
  End Tag Table
--- 68,297 ----
  Node: Invoking GCC39475
  Node: Option Summary42854
! Node: Overall Options53372
! Node: Invoking G++57935
! Node: C Dialect Options59809
! Node: C++ Dialect Options69909
! Node: Warning Options80645
! Node: Debugging Options95580
! Node: Optimize Options105161
! Node: Preprocessor Options117146
! Node: Assembler Options123609
! Node: Link Options123976
! Node: Directory Options129158
! Node: Target Options132650
! Node: Submodel Options136307
! Node: M680x0 Options137688
! Node: VAX Options141197
! Node: SPARC Options141732
! Node: Convex Options148152
! Node: AMD29K Options150333
! Node: ARM Options153364
! Node: M88K Options154781
! Node: RS/6000 and PowerPC Options162728
! Node: RT Options173638
! Node: MIPS Options175342
! Node: i386 Options182968
! Node: HPPA Options188407
! Node: Intel 960 Options191503
! Node: DEC Alpha Options194113
! Node: Clipper Options195785
! Node: H8/300 Options196184
! Node: System V Options196629
! Node: Code Gen Options197315
! Node: Environment Variables205824
! Node: Running Protoize210047
! Node: Installation216276
! Node: Configurations236986
! Node: Other Dir272897
! Node: Cross-Compiler274613
! Node: Steps of Cross276444
! Node: Configure Cross277562
! Node: Tools and Libraries278199
! Node: Cross Runtime280642
! Node: Cross Headers284723
! Node: Build Cross286708
! Node: Sun Install288584
! Node: VMS Install289716
! Node: Collect2299645
! Node: Header Dirs302354
! Node: C Extensions303768
! Node: Statement Exprs307047
! Node: Local Labels308941
! Node: Labels as Values311003
! Node: Nested Functions312868
! Node: Constructing Calls316724
! Node: Naming Types318781
! Node: Typeof319875
! Node: Lvalues321740
! Node: Conditionals324180
! Node: Long Long325071
! Node: Complex326515
! Node: Zero Length328377
! Node: Variable Length329051
! Node: Macro Varargs331576
! Node: Subscripting333679
! Node: Pointer Arith334162
! Node: Initializers334727
! Node: Constructors335192
! Node: Labeled Elements336886
! Node: Case Ranges339515
! Node: Cast to Union340196
! Node: Function Attributes341274
! Node: Function Prototypes350537
! Node: C++ Comments352336
! Node: Dollar Signs352872
! Node: Character Escapes353652
! Node: Alignment353933
! Node: Variable Attributes355405
! Node: Type Attributes363313
! Node: Inline369832
! Node: Extended Asm373709
! Node: Asm Labels384241
! Node: Explicit Reg Vars385560
! Node: Global Reg Vars386808
! Node: Local Reg Vars391373
! Node: Alternate Keywords392965
! Node: Incomplete Enums394367
! Node: Function Names395123
! Node: C++ Extensions396374
! Node: Naming Results397611
! Node: Min and Max400925
! Node: Destructors and Goto402375
! Node: C++ Interface402925
! Node: Template Instantiation408148
! Node: C++ Signatures413880
! Node: Trouble418224
! Node: Actual Bugs419935
! Node: Installation Problems421204
! Node: Cross-Compiler Problems434990
! Node: Interoperation436461
! Node: External Bugs449825
! Node: Incompatibilities451957
! Node: Fixed Headers460507
! Node: Standard Libraries462849
! Node: Disappointments464096
! Node: C++ Misunderstandings468321
! Node: Static Definitions468968
! Node: Temporaries470022
! Node: Protoize Caveats472226
! Node: Non-bugs476182
! Node: Warnings and Errors485142
! Node: Bugs486912
! Node: Bug Criteria488272
! Node: Bug Lists490702
! Node: Bug Reporting492095
! Node: Sending Patches504513
! Node: Service509900
! Node: VMS510461
! Node: Include Files and VMS510854
! Node: Global Declarations514744
! Node: VMS Misc519053
! Node: Portability523379
! Node: Interface525142
! Node: Passes529775
! Node: RTL547118
! Node: RTL Objects549006
! Node: Accessors552050
! Node: Flags557376
! Node: Machine Modes566395
! Node: Constants574029
! Node: Regs and Memory579217
! Node: Arithmetic590927
! Node: Comparisons596825
! Node: Bit Fields600887
! Node: Conversions602251
! Node: RTL Declarations605139
! Node: Side Effects605948
! Node: Incdec618495
! Node: Assembler621011
! Node: Insns622533
! Node: Calls643386
! Node: Sharing645981
! Node: Reading RTL649057
! Node: Machine Desc649996
! Node: Patterns651849
! Node: Example654793
! Node: RTL Template655921
! Node: Output Template668119
! Node: Output Statement672080
! Node: Constraints675793
! Node: Simple Constraints676796
! Node: Multi-Alternative688229
! Node: Class Preferences691065
! Node: Modifiers691945
! Node: Machine Constraints695105
! Node: No Constraints703753
! Node: Standard Names704874
! Node: Pattern Ordering732782
! Node: Dependent Patterns734008
! Node: Jump Patterns736823
! Node: Insn Canonicalizations742639
! Node: Peephole Definitions746134
! Node: Expander Definitions753052
! Node: Insn Splitting760498
! Node: Insn Attributes767512
! Node: Defining Attributes768559
! Node: Expressions770571
! Node: Tagging Insns776883
! Node: Attr Example781246
! Node: Insn Lengths783622
! Node: Constant Attributes786986
! Node: Delay Slots788146
! Node: Function Units791357
! Node: Target Macros797027
! Node: Driver798910
! Node: Run-time Target810640
! Node: Storage Layout816527
! Node: Type Layout830475
! Node: Registers836898
! Node: Register Basics837878
! Node: Allocation Order841915
! Node: Values in Registers843333
! Node: Leaf Functions847712
! Node: Stack Registers850187
! Node: Obsolete Register Macros851020
! Node: Register Classes853715
! Node: Stack and Calling873250
! Node: Frame Layout873686
! Node: Frame Registers877126
! Node: Elimination880936
! Node: Stack Arguments885192
! Node: Register Arguments891810
! Node: Scalar Return900485
! Node: Aggregate Return904448
! Node: Caller Saves908163
! Node: Function Entry909313
! Node: Profiling918241
! Node: Varargs921145
! Node: Trampolines928554
! Node: Library Calls935016
! Node: Addressing Modes943074
! Node: Condition Code950662
! Node: Costs956861
! Node: Sections965240
! Node: PIC970029
! Node: Assembler Format972739
! Node: File Framework973744
! Node: Data Output977981
! Node: Uninitialized Data983905
! Node: Label Output986612
! Node: Initialization996006
! Node: Macros for Initialization1002149
! Node: Instruction Output1006746
! Node: Dispatch Tables1014741
! Node: Alignment Output1017118
! Node: Debugging Info1018858
! Node: All Debuggers1019467
! Node: DBX Options1021881
! Node: DBX Hooks1026766
! Node: File Names and DBX1030105
! Node: SDB and DWARF1032078
! Node: Cross-compilation1033808
! Node: Misc1040255
! Node: Config1057381
! Node: Fragments1064826
! Node: Target Fragment1065423
! Node: Host Fragment1068461
! Node: Index1069063
  
  End Tag Table
*** gcc-2.7.2/gcc.info-2	Wed Mar  6 10:23:35 1996
--- g77-new/gcc.info-2	Fri Mar 15 02:17:16 1996
*************** are in the following sections.
*** 92,95 ****
--- 92,96 ----
            -fschedule-insns2  -fstrength-reduce  -fthread-jumps
            -funroll-all-loops  -funroll-loops
+           -fmove-all-movables  -freduce-all-givs  -frerun-loop-opt
            -O  -O0  -O1  -O2  -O3
  
*** gcc-2.7.2/gcc.info-3	Wed Mar  6 10:23:35 1996
--- g77-new/gcc.info-3	Fri Mar 15 02:17:16 1996
*************** of optimizations to be performed is desi
*** 907,910 ****
--- 907,946 ----
       `-frerun-cse-after-loop'.
  
+ `-fmove-all-movables'
+      Forces all invariant computations in loops to be moved outside the
+      loop.  This option is provided primarily to improve performance
+      for some Fortran code, though it might improve code written in
+      other languages.
+ 
+      *Note:* When compiling programs written in Fortran, this option is
+      enabled by default.
+ 
+      Analysis of Fortran code optimization and the resulting
+      optimizations triggered by this option, and the
+      `-freduce-all-givs' and `-frerun-loop-opt' options as well, were
+      contributed by Toon Moene (`toon@moene.indiv.nluug.nl').
+ 
+      Please let us (`fortran@gnu.ai.mit.edu') know how use of these
+      options affects the performance of your production code.  We're
+      very interested in code that runs *slower* when these options are
+      *enabled*.
+ 
+ `-freduce-all-givs'
+      Forces all general-induction variables in loops to be
+      strength-reduced.  This option is provided primarily to improve
+      performance for some Fortran code, though it might improve code
+      written in other languages.
+ 
+      *Note:* When compiling programs written in Fortran, this option is
+      enabled by default.
+ 
+ `-frerun-loop-opt'
+      Runs loop optimizations a second time.  This option is provided
+      primarily to improve performance for some Fortran code, though it
+      might improve code written in other languages.
+ 
+      *Note:* When compiling programs written in Fortran, this option is
+      enabled by default.
+ 
  `-fno-peephole'
       Disable any machine-specific peephole optimizations.
*** gcc-2.7.2/gcc.texi	Wed Mar  6 10:20:58 1996
--- g77-new/gcc.texi	Wed Mar  6 14:30:40 1996
*************** original English.
*** 149,152 ****
--- 149,153 ----
  @sp 3
  @center Last updated 26 November 1995
+ @center (Revised for GNU Fortran 1996-03-06)
  @sp 1
  @c The version number appears twice more in this file.  
*** gcc-2.7.2/invoke.texi	Tue Oct  3 11:40:43 1995
--- g77-new/invoke.texi	Fri Mar 15 01:49:11 1996
*************** in the following sections.
*** 149,152 ****
--- 149,153 ----
  -fschedule-insns2  -fstrength-reduce  -fthread-jumps 
  -funroll-all-loops  -funroll-loops
+ -fmove-all-movables  -freduce-all-givs  -frerun-loop-opt
  -O  -O0  -O1  -O2  -O3
  @end smallexample
*************** Perform the optimization of loop unrolli
*** 1940,1943 ****
--- 1941,1985 ----
  and usually makes programs run more slowly.  @samp{-funroll-all-loops}
  implies @samp{-fstrength-reduce} as well as @samp{-frerun-cse-after-loop}.
+ 
+ @item -fmove-all-movables
+ Forces all invariant computations in loops to be moved
+ outside the loop.
+ This option is provided primarily to improve performance
+ for some Fortran code, though it might improve code written
+ in other languages.
+ 
+ @emph{Note:} When compiling programs written in Fortran,
+ this option is enabled by default.
+ 
+ Analysis of Fortran code optimization and the resulting
+ optimizations triggered by this option, and the
+ @samp{-freduce-all-givs} and @samp{-frerun-loop-opt}
+ options as well, were
+ contributed by Toon Moene (@code{toon@@moene.indiv.nluug.nl}).
+ 
+ Please let us (@code{fortran@@gnu.ai.mit.edu})
+ know how use of these options affects
+ the performance of your production code.
+ We're very interested in code that runs @emph{slower}
+ when these options are @emph{enabled}.
+ 
+ @item -freduce-all-givs
+ Forces all general-induction variables in loops to be
+ strength-reduced.
+ This option is provided primarily to improve performance
+ for some Fortran code, though it might improve code written
+ in other languages.
+ 
+ @emph{Note:} When compiling programs written in Fortran,
+ this option is enabled by default.
+ 
+ @item -frerun-loop-opt
+ Runs loop optimizations a second time.
+ This option is provided primarily to improve performance
+ for some Fortran code, though it might improve code written
+ in other languages.
+ 
+ @emph{Note:} When compiling programs written in Fortran,
+ this option is enabled by default.
  
  @item -fno-peephole
*** gcc-2.7.2/loop.c	Tue Oct  3 12:17:16 1995
--- g77-new/loop.c	Wed Mar  6 10:32:58 1996
*************** move_movables (movables, threshold, insn
*** 1629,1632 ****
--- 1629,1633 ----
  
  	  if (already_moved[regno]
+ 	      || flag_move_all_movables
  	      || (threshold * savings * m->lifetime) >= insn_count
  	      || (m->forces && m->forces->done
*************** strength_reduce (scan_start, end, loop_t
*** 3821,3826 ****
  	     exit.  */
  
! 	  if (v->lifetime * threshold * benefit < insn_count
! 	      && ! bl->reversed)
  	    {
  	      if (loop_dump_stream)
--- 3822,3827 ----
  	     exit.  */
  
! 	  if ( ! flag_reduce_all_givs && v->lifetime * threshold * benefit < insn_count
! 	      && ! bl->reversed )
  	    {
  	      if (loop_dump_stream)
*** gcc-2.7.2/toplev.c	Fri Oct 20 17:56:35 1995
--- g77-new/toplev.c	Wed Mar  6 10:32:59 1996
*************** int flag_unroll_loops;
*** 388,391 ****
--- 388,405 ----
  int flag_unroll_all_loops;
  
+ /* Nonzero forces all invariant computations in loops to be moved
+    outside the loop. */
+ 
+ int flag_move_all_movables = 0;
+ 
+ /* Nonzero forces all general induction variables in loops to be
+    strength reduced. */
+ 
+ int flag_reduce_all_givs = 0;
+ 
+ /* Nonzero gets another run of loop_optimize performed. */
+ 
+ int flag_rerun_loop_opt = 0;
+ 
  /* Nonzero for -fwritable-strings:
     store string constants in data segment and don't uniquize them.  */
*************** struct { char *string; int *variable; in
*** 542,545 ****
--- 556,562 ----
    {"unroll-loops", &flag_unroll_loops, 1},
    {"unroll-all-loops", &flag_unroll_all_loops, 1},
+   {"move-all-movables", &flag_move_all_movables, 1},
+   {"reduce-all-givs", &flag_reduce_all_givs, 1},
+   {"rerun-loop-opt", &flag_rerun_loop_opt, 1},
    {"writable-strings", &flag_writable_strings, 1},
    {"peephole", &flag_no_peephole, 0},
*************** rest_of_compilation (decl)
*** 2894,2897 ****
--- 2911,2916 ----
  	       {
  		 loop_optimize (insns, loop_dump_file);
+ 		 if (flag_rerun_loop_opt)
+ 		 	loop_optimize (insns, loop_dump_file);
  	       });
      }
*** gcc-2.7.2/tree.c	Sun Oct  1 21:26:56 1995
--- g77-new/tree.c	Wed Mar  6 10:33:00 1996
*************** saveable_tree_cons (purpose, value, chai
*** 1965,1968 ****
--- 1965,1992 ----
  }
  
+ /* Try to find out whether the type for which the size is to be determined
+    is an ARRAY(of ARRAY(of ARRAY ... of something with a constant size
+    which is an integral multiple of BITS_PER_UNIT)).
+    In that case, the size in bytes can be determined using an EXACT_DIV_EXPR.
+ */
+ enum tree_code
+ which_div_expr(type)
+      tree type;
+ {
+   tree t;
+ 
+   if (TREE_CODE (type) != POINTER_TYPE && TREE_CODE (type) != ARRAY_TYPE)
+     return CEIL_DIV_EXPR;
+ 
+   for (t = TREE_TYPE (type); TREE_CODE (t) == ARRAY_TYPE; t = TREE_TYPE (t))
+     ;
+ 
+   if (TYPE_SIZE (t) != 0 && TREE_CODE (TYPE_SIZE (t)) == INTEGER_CST &&
+       TREE_INT_CST_LOW (TYPE_SIZE (t)) % BITS_PER_UNIT == 0)
+     return EXACT_DIV_EXPR;
+   else
+     return CEIL_DIV_EXPR;
+ }
+ 
  /* Return the size nominally occupied by an object of type TYPE
     when it resides in memory.  The value is measured in units of bytes,
*************** size_in_bytes (type)
*** 1985,1989 ****
        return integer_zero_node;
      }
!   t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type),
  		  size_int (BITS_PER_UNIT));
    if (TREE_CODE (t) == INTEGER_CST)
--- 2009,2013 ----
        return integer_zero_node;
      }
!   t = size_binop (which_div_expr (type), TYPE_SIZE (type),
  		  size_int (BITS_PER_UNIT));
    if (TREE_CODE (t) == INTEGER_CST)
*************** int_size_in_bytes (type)
*** 2009,2013 ****
    if (TREE_INT_CST_HIGH (TYPE_SIZE (type)) != 0)
      {
!       tree t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type),
  			   size_int (BITS_PER_UNIT));
        return TREE_INT_CST_LOW (t);
--- 2033,2037 ----
    if (TREE_INT_CST_HIGH (TYPE_SIZE (type)) != 0)
      {
!       tree t = size_binop (which_div_expr (type), TYPE_SIZE (type),
  			   size_int (BITS_PER_UNIT));
        return TREE_INT_CST_LOW (t);
*** gcc-2.7.2/version.c	Wed Mar  6 10:21:01 1996
--- g77-new/version.c	Mon Mar 25 21:17:27 1996
***************
*** 1 ****
! char *version_string = "2.7.2";
--- 1 ----
! char *version_string = "2.7.2.f.1";
