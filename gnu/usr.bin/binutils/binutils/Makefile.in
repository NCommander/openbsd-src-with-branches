# Makefile for GNU binary-file utilities
# Copyright (C) 1992, 1993, 1994 Free Software Foundation, Inc.

# This file is part of GNU binutils.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

VPATH = @srcdir@
srcdir = @srcdir@

target_alias = @target_alias@
prefix = @prefix@

program_transform_name = @program_transform_name@
exec_prefix = @exec_prefix@
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
tooldir = $(exec_prefix)/$(target_alias)

datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = `cd $(srcdir)/..;pwd`/install.sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL) -m 644
INSTALL_XFORM = $(INSTALL) -t='$(program_transform_name)'
INSTALL_XFORM1 = $(INSTALL_XFORM) -b=.1 -m 644

AR = ar
AR_FLAGS = rc
CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi
RANLIB = ranlib
BISONFLAGS = -d
TEXI2ROFF=texi2roff
MAKEOVERRIDES=
CC_FOR_BUILD = @CC_FOR_BUILD@
NM_FOR_TARGET = nm
NM = $(NM_FOR_TARGET)
SYMLINK = ln -s

BISON = bison -y
# Comment these out if using lex.
LEX_OPTIONS = -I -Cem 
LEX = `if [ -f ../flex/flex ] ; then echo ../flex/flex ; else echo flex ; fi`

# Distribution version
VERSION=2.6
# Distribution name
DIST_NAME=binutils-${VERSION}

version=`./../gcc/gcc -dumpversion`

# Where to find texinfo.tex to format docn with TeX
TEXIDIR = $(srcdir)/../texinfo

#CC=gcc -Wall
CC=cc
# these two are almost the same program
AR_PROG=ar
RANLIB_PROG=ranlib

# objcopy and strip should be the same program
OBJCOPY_PROG=objcopy
STRIP_PROG=strip.new

STRINGS_PROG=strings

# These should all be the same program too.
SIZE_PROG=size
NM_PROG=nm.new
OBJDUMP_PROG=objdump

# This is the demangler, as a standalone program.
# Note: This one is used as the installed name too, unlike the above.
DEMANGLER_PROG=c++filt

NLMCONV_PROG=nlmconv
DLLTOOL_PROG=dlltool

SRCONV_PROG=srconv sysdump coffdump 



MANPAGES= ar nm objdump ranlib size strings strip objcopy nlmconv

PROGS = $(SIZE_PROG) $(OBJDUMP_PROG) $(NM_PROG) $(AR_PROG) $(STRINGS_PROG) $(STRIP_PROG) $(RANLIB_PROG) $(DEMANGLER_PROG) $(OBJCOPY_PROG) @BUILD_NLMCONV@ @BUILD_SRCONV@ @BUILD_DLLTOOL@
STAGESTUFF = $(PROGS) *.o
# Files that can be generated, but should be in the distribution.
# Don't build $(DEMANGLER_PROG).1, since its name may vary with the
# configuration.
DISTSTUFF=arparse.c arparse.h arlex.c nlmheader.c sysinfo.c sysinfo.h syslex.c

# Stuff that goes in tooldir/ if appropriate
TOOL_PROGS = nm.new strip.new ar ranlib $(DLLTOOL_PROG)

BASEDIR = $(srcdir)/..
BFDDIR = $(BASEDIR)/bfd
INCDIR	= $(BASEDIR)/include
INCLUDES = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR)

ALL_CFLAGS = $(INCLUDES) @HDEFINES@ $(CFLAGS)

.c.o:
	$(CC) -c $(ALL_CFLAGS) $<

#
## Random definitions
# Hopefully all these may be flushed once we get configuration down pat.

# alloca only needed for systems which don't have it and when cc != gcc.
# ALLOCA = alloca.o

# nm tries to malloc enough space for the string table.  The old GNU malloc
# rounds this up to a power of two (e.g. 5M becomes 8M), and so it might 
# fail unnecessarily.  I've also seen some Unix malloc's fail, even when
# there is enough memory.  So use the new GNU malloc.
# MALLOC = gmalloc.o
# Use this if the system malloc is good enough.
MALLOC =

# Use the GNU getopt unless you have problems with it.
# The IRIS version could probably benefit from being assembled with
# libmalloc rather than the ordinary malloc.
LIBIBERTY = ../libiberty/libiberty.a

# Code shared by all the binutils.
BULIBS = bucomm.o version.o filemode.o

ADDL_LIBS = $(MALLOC) $(BULIBS) $(BFD) $(LIBIBERTY) 

BFD = ../bfd/libbfd.a
OPCODES = ../opcodes/libopcodes.a

EXPECT = `if [ -f $${rootme}/../expect/expect ] ; then \
          echo $${rootme}/../expect/expect ; \
          else echo expect ; fi`
RUNTEST = `if [ -f ${srcdir}/../dejagnu/runtest ] ; then \
           echo ${srcdir}/../dejagnu/runtest ; \
           else echo runtest ;  fi`
RUNTESTFLAGS =

CC_FOR_TARGET = ` \
  if [ -f $$r/../gcc/xgcc ] ; then \
    if [ -f $$r/../newlib/Makefile ] ; then \
      echo $$r/../gcc/xgcc -B$$r/../gcc/ -idirafter $$r/../newlib/targ-include -idirafter $${srcroot}/../newlib/libc/include -nostdinc; \
    else \
      echo $$r/../gcc/xgcc -B$$r/../gcc/; \
    fi; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CC); \
    else \
      echo gcc | sed '$(program_transform_name)'; \
    fi; \
  fi`

FLAGS_TO_PASS = \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)"
#
## The rules

all: $(ADDL_LIBS) $(PROGS)

# These targets are for the dejagnu testsuites. The file site.exp 
# contains global variables that all the testsuites will use.

site.exp: ./config.status Makefile
	@echo "Making a new config file..."
	@rm -f ./tmp?
	@touch site.exp
	@mv site.exp site.bak
	@echo "## variables are automatically generated by make ##" > ./tmp0
	@echo "# Do not edit here. If you wish to override these" >> ./tmp0
	@echo "# values, add them to the last section" >> ./tmp0
	@echo "# HOST AND TARGET INFO" >> ./tmp0
	@echo "set host_os @host_os@" >> ./tmp0
	@echo "set host_alias @host_alias@" >> ./tmp0
	@echo "set host_cpu @host_cpu@" >> ./tmp0
	@echo "set host_vendor @host_vendor@" >> ./tmp0
	@echo "set target_os @target_os@" >> ./tmp0
	@echo "set target_alias @target_alias@" >> ./tmp0
	@echo "set target_cpu @target_cpu@" >> ./tmp0
	@echo "set target_vendor @target_vendor@" >> ./tmp0
	@echo "set host_triplet @host@" >> ./tmp0
	@echo "set target_triplet @target@" >> ./tmp0
	@echo "# DIRECTORY INFO" >> ./tmp0
	@echo "set objdir `pwd`" >> ./tmp0
	@echo "" >> ./tmp0	
	@echo "## Variables generated by configure. Do Not Edit ##" >> ./tmp0
	@cat ./tmp0 > site.exp
	@cat site.bak | sed \
			-e '1,/^## Variables generated by.*##/ d' >> site.exp
	-@rm -f ./tmp?

check: site.exp
	rootme=`pwd`; export rootme ; \
	srcroot=`cd ${srcdir}; pwd` ; export srcroot ; \
	EXPECT=${EXPECT} ; export EXPECT ; \
	if [ -f $$rootme/../expect/expect ] ; then  \
	   TCL_LIBRARY=$${srcroot}/../tcl/library ; \
	   export TCL_LIBRARY ; else true; fi ; \
	$(RUNTEST) --tool binutils --srcdir $(srcdir)/testsuite \
	  $(RUNTESTFLAGS) CC="$(CC_FOR_TARGET)" CFLAGS="$(CFLAGS)"

installcheck:
	/bin/sh $(srcdir)/sanity.sh $(bindir)

info: binutils.info

dvi: binutils.dvi

$(SIZE_PROG): $(ADDL_LIBS) size.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(SIZE_PROG) size.o $(ADDL_LIBS) $(EXTRALIBS)

$(OBJCOPY_PROG): $(ADDL_LIBS) objcopy.o not-strip.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(OBJCOPY_PROG) objcopy.o not-strip.o $(ADDL_LIBS) $(EXTRALIBS)

$(STRINGS_PROG): $(ADDL_LIBS) strings.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(STRINGS_PROG) strings.o $(ADDL_LIBS) $(EXTRALIBS)

$(STRIP_PROG): $(ADDL_LIBS) objcopy.o is-strip.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(STRIP_PROG) objcopy.o is-strip.o $(ADDL_LIBS) $(EXTRALIBS)

$(NM_PROG): $(ADDL_LIBS) nm.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(NM_PROG) nm.o $(ADDL_LIBS) $(EXTRALIBS)

$(OBJDUMP_PROG): $(ADDL_LIBS) objdump.o $(BFD) $(OPCODES)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(OBJDUMP_PROG) objdump.o $(OPCODES) $(ADDL_LIBS) $(EXTRALIBS)

underscore.c: Makefile
	rm -f underscore.c
	echo '/*WARNING: This file is automatically generated!*/' >underscore.t
	echo "int prepends_underscore = @UNDERSCORE@;" >>underscore.t
	mv -f underscore.t underscore.c

version.o: version.c Makefile
	$(CC) -DVERSION='"$(VERSION)"' $(ALL_CFLAGS) -c $(srcdir)/version.c

cplus-dem.o: $(BASEDIR)/libiberty/cplus-dem.c $(INCDIR)/getopt.h
	$(CC) -c -DMAIN -DVERSION='"$(VERSION)"' $(ALL_CFLAGS) $(BASEDIR)/libiberty/cplus-dem.c

$(DEMANGLER_PROG): cplus-dem.o $(LIBIBERTY) underscore.o $(DEMANGLER_PROG).1
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(DEMANGLER_PROG) cplus-dem.o $(LIBIBERTY) $(EXTRALIBS) underscore.o

arparse.c: arparse.y
	$(BISON) $(BISONFLAGS)  $(srcdir)/arparse.y
	mv -f y.tab.c arparse.c
	mv -f y.tab.h arparse.h

# Separate from arparse.c so that a parallel make doesn't try to build
# both arparse.c and arparse.h simultaneously.
arparse.h: arparse.c

arlex.c: arlex.l
	$(LEX) $(LEX_OPTIONS) $(srcdir)/arlex.l
	mv lex.yy.c arlex.c

$(AR_PROG): $(ADDL_LIBS) ar.o arparse.o arlex.o not-ranlib.o $(BFD) arsup.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(AR_PROG) ar.o arparse.o arlex.o arsup.o not-ranlib.o $(ADDL_LIBS) $(EXTRALIBS)

$(RANLIB_PROG): $(ADDL_LIBS) ar.o is-ranlib.o arparse.o arlex.o arsup.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(RANLIB_PROG) ar.o arparse.o arlex.o arsup.o is-ranlib.o $(ADDL_LIBS) $(EXTRALIBS)

# This rule creates a single binary that switches between ar and ranlib
# by looking at argv[0].  Use this kludge to save some disk space.
# However, you have to install things by hand.
# (That is after 'make install', replace the installed ranlib by a link to ar.)

# Alternatively, you can install ranlib.sh as ranlib.

ar_with_ranlib: $(ADDL_LIBS) ar.o maybe-ranlib.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(AR_PROG) ar.o maybe-ranlib.o $(ADDL_LIBS) $(EXTRALIBS)
	-rm -f $(RANLIB_PROG)
	-ln $(AR_PROG) $(RANLIB_PROG)

# objcopy and strip in one binary that uses argv[0] to decide its action.

objcopy_with_strip: $(ADDL_LIBS) objcopy.o maybe-strip.o $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(OBJCOPY_PROG) objcopy.o maybe-strip.o $(ADDL_LIBS) $(EXTRALIBS)
	-rm -f $(STRIP_PROG)
	-ln $(OBJCOPY_PROG) $(STRIP_PROG)

sysroff.c: sysinfo sysroff.info 
	./sysinfo -c <$(srcdir)/sysroff.info >sysroff.c
	./sysinfo -i <$(srcdir)/sysroff.info >>sysroff.c
	./sysinfo -g <$(srcdir)/sysroff.info >>sysroff.c

sysroff.h: sysinfo sysroff.info
	./sysinfo -d <$(srcdir)/sysroff.info >sysroff.h	

# Depend upon arparse.c to avoid building both arparse.c and sysinfo.c
# simultaneously.
sysinfo.c: sysinfo.y arparse.c
	$(BISON) -tvd $(srcdir)/sysinfo.y
	rm -f sysinfo.c
	mv -f y.tab.c sysinfo.c
	mv -f y.tab.h sysinfo.h

# Separate from sysinfo.c so that a parallel make doesn't try to build
# both sysinfo.c and sysinfo.h simultaneously.
sysinfo.h: sysinfo.c

syslex.c : syslex.l
	$(LEX) $(LEX_OPTIONS) $(srcdir)/syslex.l
	mv lex.yy.c syslex.c

sysinfo: sysinfo.o syslex.o
	$(CC_FOR_BUILD) $(CFLAGS) $(LDFLAGS) -o $@ sysinfo.o syslex.o 

syslex.o: syslex.c sysinfo.h
	if [ -r syslex.c ]; then \
	  $(CC_FOR_BUILD) -c -I. $(CFLAGS)  syslex.c  ; \
	else \
	  $(CC_FOR_BUILD) -c -I. -I$(srcdir) $(CFLAGS) $(srcdir)/syslex.c ;\
	fi

sysinfo.o: sysinfo.c
	if [ -r sysinfo.c ]; then \
	  $(CC_FOR_BUILD) -c -I. $(CFLAGS)  sysinfo.c  ; \
	else \
	  $(CC_FOR_BUILD) -c -I. $(CFLAGS) $(srcdir)/sysinfo.c ; \
	fi

srconv.o: srconv.c sysroff.h sysroff.c coffgrok.h $(INCDIR)/coff/internal.h \
  ../bfd/libcoff.h config.h

srconv: srconv.o coffgrok.o $(ADDL_LIBS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ srconv.o coffgrok.o $(ADDL_LIBS) $(EXTRALIBS)

dlltool:dlltool.o defparse.o deflex.o cplus-dem.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ dlltool.o defparse.o deflex.o $(ADDL_LIBS) $(EXTRALIBS)

defparse.c:defparse.y
	$(BISON)  $(BISONFLAGS)  $(srcdir)/defparse.y
	mv -f y.tab.c defparse.c
	mv -f y.tab.h defparse.h

defparse.h: defparse.c

deflex.c:deflex.l
	$(LEX) $(LEX_OPTIONS) $(srcdir)/deflex.l
	mv lex.yy.c deflex.c

dlltool.o:dlltool.c
	$(CC) -c @DLLTOOL_DEFS@ $(ALL_CFLAGS) $(srcdir)/dlltool.c

coffdump: coffdump.o coffgrok.o $(ADDL_LIBS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@  coffdump.o coffgrok.o $(ADDL_LIBS) $(EXTRALIBS)

sysdump.o: sysdump.c sysroff.h sysroff.c bucomm.h config.h

sysdump: sysdump.o $(ADDL_LIBS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ sysdump.o $(ADDL_LIBS) $(EXTRALIBS)

# Depend upon sysinfo.c to avoid building both nlmheader.c and sysinfo.c
# simultaneously.
nlmheader.c: nlmheader.y sysinfo.c
	$(BISON) $(srcdir)/nlmheader.y
	rm -f nlmheader.c
	mv -f y.tab.c nlmheader.c

nlmconv.o: nlmconv.c
	ldname=`echo ld | sed '$(program_transform_name)'`; \
	$(CC) -c -DLD_NAME="\"$${ldname}\"" @NLMCONV_DEFS@ $(ALL_CFLAGS) $(srcdir)/nlmconv.c

$(NLMCONV_PROG): nlmconv.o nlmheader.o $(ADDL_LIBS) $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ nlmconv.o nlmheader.o $(ADDL_LIBS) $(EXTRALIBS)

# This list of dependencies was generated by doing a make with gcc -MM
# saving the output in a file and removing the gcc commands
# changing "../../devo/binutils/../bfd" to "$(BFDDIR)"
# removing "../../devo/binutils/"
# changing "../include" to "$(INCDIR)"

bucomm.o: bucomm.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/fopen-same.h bucomm.h config.h
filemode.o: filemode.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/fopen-same.h 
size.o: size.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/fopen-same.h $(INCDIR)/getopt.h config.h
objdump.o: objdump.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/fopen-same.h $(INCDIR)/getopt.h \
  $(INCDIR)/dis-asm.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/aout/stab.def config.h
nm.o: nm.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/fopen-same.h bucomm.h config.h $(INCDIR)/getopt.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/demangle.h
ar.o: ar.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/fopen-same.h bucomm.h config.h $(INCDIR)/aout/ar.h \
  $(BFDDIR)/libbfd.h arsup.h
arparse.o: arparse.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h arsup.h 
arlex.o: arlex.c ./arparse.h 
not-ranlib.o: not-ranlib.c 
arsup.o: arsup.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h arsup.h bucomm.h config.h
strings.o: strings.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h bucomm.h config.h
objcopy.o: objcopy.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/fopen-same.h bucomm.h config.h
is-strip.o: is-strip.c 
is-ranlib.o: is-ranlib.c 
not-strip.o: not-strip.c 
nlmheader.o: nlmheader.c ../bfd/bfd.h \
  $(INCDIR)/fopen-same.h bucomm.h config.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h nlmconv.h
nlmconv.o: nlmconv.c ../bfd/bfd.h $(INCDIR)/libiberty.h \
  $(INCDIR)/fopen-same.h bucomm.h config.h \
  $(BFDDIR)/libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmconv.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/ecoff.h

stage1: force
	- mkdir stage1
	- mv -f $(STAGESTUFF) stage1

stage2: force
	- mkdir stage2
	- mv -f $(STAGESTUFF) stage2

stage3: force
	- mkdir stage3
	- mv -f $(STAGESTUFF) stage3

against=stage2

comparison: force
	for i in $(STAGESTUFF) ; do cmp $$i $(against)/$$i ; done

de-stage1: force
	- (cd stage1 ; mv -f * ..)
	- rmdir stage1

de-stage2: force
	- (cd stage2 ; mv -f * ..)
	- rmdir stage2

de-stage3: force
	- (cd stage3 ; mv -f * ..)
	- rmdir stage3

###
# DOCUMENTATION TARGETS
config.texi: Makefile
	rm -f config.texi
	echo '@set VERSION $(VERSION)' > config.texi
# TeX output
binutils.dvi: $(srcdir)/binutils.texi config.texi
	TEXINPUTS=$(TEXIDIR):$$TEXINPUTS $(TEXI2DVI) $(srcdir)/binutils.texi

# info file for online browsing
binutils.info: $(srcdir)/binutils.texi config.texi
	$(MAKEINFO) -o binutils.info $(srcdir)/binutils.texi

$(DEMANGLER_PROG).1: cxxfilt.man Makefile
	sed -e 's/@PROGRAM@/$(DEMANGLER_PROG)/' < $(srcdir)/cxxfilt.man \
		> $(DEMANGLER_PROG).1

#   different targets for -ms, -mm, -me
# Try to use a recent texi2roff.  v2 was put on prep in jan91.
# If you want an index, see texi2roff doc for postprocessing 
# and add -i to texi2roff invocations below.
# Workarounds for texi2roff-2 (probably fixed in later texi2roff's, delete
#    corresponding -e lines when later texi2roff's are current)
# + @ifinfo's deleted explicitly due to texi2roff-2 bug w nested constructs.
# + @c's deleted explicitly because texi2roff sees texinfo commands in them
# + @   (that's at-BLANK) not recognized by texi2roff, turned into blank
# + @alphaenumerate is ridiculously new, turned into @enumerate

# roff output (-ms)
binutils.ms: $(srcdir)/binutils.texi
	sed -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c/d' \
		-e 's/{.*,,/{/' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/binutils.texi | \
	$(TEXI2ROFF) -ms | \
	sed -e 's/---/\\(em/g' \
	>binutils.ms 

# roff output (-mm)
# '@noindent's removed due to texi2roff-2 mm bug; if yours is newer, 
#   try leaving them in
binutils.mm: $(srcdir)/binutils.texi
	sed -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c/d' \
		-e 's/{.*,,/{/' \
		-e '/@noindent/d' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/binutils.texi | \
	$(TEXI2ROFF) -mm | \
	sed -e 's/---/\\(em/g' \
		>binutils.mm

# roff output (-me)
binutils.me: $(srcdir)/binutils.texi
	sed -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c/d' \
		-e 's/{.*,,/{/' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/binutils.texi | \
	$(TEXI2ROFF) -me | \
	sed -e 's/---/\\(em/g' \
	>binutils.me 


###

mostlyclean:
	-rm -f *.o *~ \#* core binutils.?? binutils.??? y.output config.log
	-rm -rf tmpdir
clean: mostlyclean
	-rm -f $(PROGS) underscore.c sysroff sysroff.c sysroff.h sysinfo
distclean:
	-rm -f Makefile config.status *.o *~ \#* core y.* \
		binutils.?? binutils.??s binutils.aux binutils.log binutils.toc
	-rm -f $(PROGS) underscore.c config.h stamp-h config.cache config.log
maintainer-clean realclean: clean distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	-rm -f $(DISTSTUFF) *.info TAGS

etags tags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(srcdir)/*.[hc] 

install: all
	for i in $(PROGS) ; do \
	  $(INSTALL_XFORM) $$i $(bindir)/`echo $$i | sed -e 's/.new//'` ; \
	done
	for i in $(MANPAGES) ; do \
	  $(INSTALL_XFORM1) $(srcdir)/$$i.1 $(man1dir)/$$i.1 ; \
	done
	if [ x$(DEMANGLER_PROG) != x ]; then \
	  $(INSTALL_XFORM1) $(DEMANGLER_PROG).1 $(man1dir)/$(DEMANGLER_PROG).1; \
	fi
	-if [ -d $(tooldir) ]; then \
	  if [ -d $(tooldir)/bin ]; then true; else mkdir $(tooldir)/bin; fi; \
	  for i in $(TOOL_PROGS) ; do \
	    if [ -f $$i ]; then \
	      j=`echo $$i | sed -e 's/.new//'`; \
	      rm -f $(tooldir)/bin/$$j; \
	      k=`echo $$j | sed '$(program_transform_name)'`; \
	      ln $(bindir)/$$k $(tooldir)/bin/$$j >/dev/null 2>/dev/null \
		|| $(INSTALL_PROGRAM) $$i $(tooldir)/bin/$$j; \
	    fi; \
	  done; \
	 else true; fi

# This little path search is required because in the FSF net releases,
# the info files are included in the source tree, and that may not be
# the same as the build directory.
install-info: binutils.info
	if [ -r binutils.info ]; then \
	  dir=. ; \
	else \
	  dir=$(srcdir) ; \
	fi ; \
	for i in `cd $$dir; echo binutils.info*` ; do \
		$(INSTALL_DATA) $$dir/$$i $(infodir)/$$i ; \
	done

clean-info:
	-rm -rf *.info*

# Making a dist:
# cvs rtag binutils-x-yy ld+utils
# cvs co -r binutils-x-yy ld+utils
# Sanitize
# cd {HERE}; make dist [-f Makefile.in]

dist: $(DIST_NAME).tar.z

diststuff: $(DISTSTUFF) info

$(DIST_NAME).tar.z:
	cd ../..; rm -f $(DIST_NAME); ln -s devo $(DIST_NAME)
	make diststuff -f Makefile.in
	cd ../ld; make diststuff -f Makefile.in
	cd ../gprof; make diststuff -f Makefile.in
	cd ../texinfo; mv texinfo.tex ..; rm -rf *; mv ../texinfo.tex .
	# Take out texinfo from configurable dirs
	mv ../configure.in tmp; \
	  sed -e '/^host_tools=/s/texinfo //' <tmp >../configure.in; rm tmp
	cd ..; chmod og=u `find . -print`
	cd ../..; tar chf - $(DIST_NAME) | gzip >$(DIST_NAME).tar.z
	rm -rf ../../$(DIST_NAME)

#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# Dummy target to force execution of dependent targets.
#
force:

# Target to uncomment host-specific lines in this makefile.  Such lines must
# have the following string beginning in column 1: #__<hostname>__#
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#
make:
	-@if test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	fi ; \
	grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	fi ; \
	mv -f Makefile Makefile.old; \
	echo "#The next line was generated by 'make make'"	 >Makefile ; \
	echo "HOST=$(HOST)"					>>Makefile ; \
	echo							>>Makefile ; \
	sed "s/^#__$(HOST)__#//" < Makefile.old			>>Makefile

Makefile: Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS= $(SHELL) ./config.status

config.h: stamp-h ; @true
stamp-h: config.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

### Local Variables: ***
### mode:fundamental ***
### page-delimiter: "^#" ***
### End: ***
### end of file
