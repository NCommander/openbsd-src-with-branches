# Commands covered:  exec
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1994 The Regents of the University of California.
# Copyright (c) 1994 Sun Microsystems, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# SCCS: @(#) exec.test 1.53 96/04/12 16:33:37

if {[string compare test [info procs test]] == 1} then {source defs}

# If exec is not defined just return with no error
# Some platforms like the Macintosh do not have the exec command
if {[info commands exec] == ""} {
    puts "exec not implemented for this machine"
    return
}

# This procedure generates a shell command to be passed to exec
# to mask the differences between Unix and PC shells.

proc shellCmd {string} {
    global tcl_platform
    if {$tcl_platform(platform) == "unix"} {
	return "sh -c \"$string\""
    } else {
	return "sh -c {\"$string\"}"
    }
}

# Basic operations.

test exec-1.1 {basic exec operation} {unixExecs} {
    exec echo a b c
} "a b c"
test exec-1.2 {pipelining} {unixExecs} {
    exec echo a b c d | cat | cat
} "a b c d"
test exec-1.3 {pipelining} {unixExecs} {
    set a [exec echo a b c d | cat | wc]
    list [scan $a "%d %d %d" b c d] $b $c
} {3 1 4}
set arg {12345678901234567890123456789012345678901234567890}
set arg "$arg$arg$arg$arg$arg$arg"
test exec-1.4 {long command lines} {unixExecs} {
    exec echo $arg
} $arg
set arg {}

# I/O redirection: input from Tcl command.

test exec-2.1 {redirecting input from immediate source} {unixExecs} {
    exec cat << "Sample text"
} {Sample text}
test exec-2.2 {redirecting input from immediate source} {unixExecs} {
    exec << "Sample text" cat | cat
} {Sample text}
test exec-2.3 {redirecting input from immediate source} {unixExecs} {
    exec cat << "Sample text" | cat
} {Sample text}
test exec-2.4 {redirecting input from immediate source} {unixExecs} {
    exec  cat | cat << "Sample text"
} {Sample text}
test exec-2.5 {redirecting input from immediate source} {unixExecs} {
    exec cat "<<Joined to arrows"
} {Joined to arrows}

# I/O redirection: output to file.

catch {exec rm -f gorp.file}
test exec-3.1 {redirecting output to file} {unixExecs} {
    exec echo "Some simple words" > gorp.file
    exec cat gorp.file
} "Some simple words"
test exec-3.2 {redirecting output to file} {unixExecs} {
    exec echo "More simple words" | >gorp.file cat | cat
    exec cat gorp.file
} "More simple words"
test exec-3.3 {redirecting output to file} {unixExecs} {
    exec > gorp.file echo "Different simple words" | cat | cat
    exec cat gorp.file
} "Different simple words"
test exec-3.4 {redirecting output to file} {unixExecs} {
    exec echo "Some simple words" >gorp.file
    exec cat gorp.file
} "Some simple words"
test exec-3.5 {redirecting output to file} {unixExecs} {
    exec echo "First line" >gorp.file
    exec echo "Second line" >> gorp.file
    exec cat gorp.file
} "First line\nSecond line"
test exec-3.6 {redirecting output to file} {unixExecs} {
    exec echo "First line" >gorp.file
    exec echo "Second line" >>gorp.file
    exec cat gorp.file
} "First line\nSecond line"
test exec-3.7 {redirecting output to file} {unixExecs} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    exec echo "More text" >@ $f
    exec echo >@$f "Even more"
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} "Line 1\nMore text\nEven more\nLine 3"

# I/O redirection: output and stderr to file.

catch {exec rm -f gorp.file}
test exec-4.1 {redirecting output and stderr to file} {unixExecs} {
    exec echo "test output" >& gorp.file
    exec cat gorp.file
} "test output"
test exec-4.2 {redirecting output and stderr to file} {unixExecs} {
    list [eval exec [shellCmd "echo foo bar 1>&2"] >&gorp.file] \
	    [exec cat gorp.file]
} {{} {foo bar}}
test exec-4.3 {redirecting output and stderr to file} {unixExecs} {
    exec echo "first line" > gorp.file
    list [eval exec [shellCmd "echo foo bar 1>&2"] >>&gorp.file] \
	    [exec cat gorp.file]
} "{} {first line\nfoo bar}"
test exec-4.4 {redirecting output and stderr to file} {unixExecs} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    exec echo "More text" >&@ $f
    exec echo >&@$f "Even more"
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} "Line 1\nMore text\nEven more\nLine 3"
test exec-4.5 {redirecting output and stderr to file} {unixExecs} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    eval exec >&@ $f [shellCmd "echo foo bar 1>&2"]
    eval exec >&@$f [shellCmd "echo xyzzy 1>&2"]
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} "Line 1\nfoo bar\nxyzzy\nLine 3"

# I/O redirection: input from file.

catch {exec echo "Just a few thoughts" > gorp.file}
test exec-5.1 {redirecting input from file} {unixExecs} {
    exec cat < gorp.file
} {Just a few thoughts}
test exec-5.2 {redirecting input from file} {unixExecs} {
    exec cat | cat < gorp.file
} {Just a few thoughts}
test exec-5.3 {redirecting input from file} {unixExecs} {
    exec cat < gorp.file | cat
} {Just a few thoughts}
test exec-5.4 {redirecting input from file} {unixExecs} {
    exec < gorp.file cat | cat
} {Just a few thoughts}
test exec-5.5 {redirecting input from file} {unixExecs} {
    exec cat <gorp.file
} {Just a few thoughts}
test exec-5.6 {redirecting input from file} {unixExecs} {
    set f [open gorp.file r]
    set result [exec cat <@ $f]
    close $f
    set result
} {Just a few thoughts}
test exec-5.7 {redirecting input from file} {unixExecs} {
    set f [open gorp.file r]
    set result [exec <@$f cat]
    close $f
    set result
} {Just a few thoughts}

# I/O redirection: standard error through a pipeline.

test exec-6.1 {redirecting stderr through a pipeline} {unixExecs} {
    eval exec [shellCmd "echo foo bar"] |& cat
} "foo bar"
test exec-6.2 {redirecting stderr through a pipeline} {unixExecs} {
    eval exec [shellCmd "echo foo bar 1>&2"] |& cat
} "foo bar"
test exec-6.3 {redirecting stderr through a pipeline} {unixExecs} {
    eval exec [shellCmd "echo foo bar 1>&2"] \
	|& [shellCmd "echo second msg 1>&2; cat"] |& cat
} "second msg\nfoo bar"

# I/O redirection: combinations.

catch {exec rm -f gorp.file2}
test exec-7.1 {multiple I/O redirections} {unixExecs} {
    exec << "command input" > gorp.file2 cat < gorp.file
    exec cat gorp.file2
} {Just a few thoughts}
test exec-7.2 {multiple I/O redirections} {unixExecs} {
    exec < gorp.file << "command input" cat
} {command input}

# Long input to command and output from command.

set a "0123456789 xxxxxxxxx abcdefghi ABCDEFGHIJK\n"
set a [concat $a $a $a $a]
set a [concat $a $a $a $a]
set a [concat $a $a $a $a]
set a [concat $a $a $a $a]
test exec-8.1 {long input and output} {unixExecs} {
    exec cat << $a
} $a

# Commands that return errors.

test exec-9.1 {commands returning errors} {
    set x [catch {exec gorp456} msg]
    list $x [string tolower $msg] [string tolower $errorCode]
} {1 {couldn't execute "gorp456": no such file or directory} {posix enoent {no such file or directory}}}
test exec-9.2 {commands returning errors} {unixExecs} {
    string tolower [list [catch {exec echo foo | foo123} msg] $msg $errorCode]
} {1 {couldn't execute "foo123": no such file or directory} {posix enoent {no such file or directory}}}
test exec-9.3 {commands returning errors} {unixExecs} {
    list [catch {eval exec sleep 1 | [shellCmd "exit 43"] | sleep 1} msg] $msg
} {1 {child process exited abnormally}}
test exec-9.4 {commands returning errors} {unixExecs} {
    list [catch {eval exec [shellCmd "exit 43"] | echo "foo bar"} msg] $msg
} {1 {foo bar
child process exited abnormally}}
test exec-9.5 {commands returning errors} {unixExecs} {
    list [catch {exec gorp456 | echo a b c} msg] [string tolower $msg]
} {1 {couldn't execute "gorp456": no such file or directory}}
test exec-9.6 {commands returning errors} {unixExecs} {
    list [catch {eval exec [shellCmd "echo error msg 1>&2"]} msg] $msg
} {1 {error msg}}
test exec-9.7 {commands returning errors} {unixExecs} {
    list [catch {eval exec [shellCmd "echo error msg 1>&2"] \
		     | [shellCmd "echo error msg 1>&2"]} msg] $msg
} {1 {error msg
error msg}}

# Errors in executing the Tcl command, as opposed to errors in the
# processes that are invoked.

test exec-10.1 {errors in exec invocation} {
    list [catch {exec} msg] $msg
} {1 {wrong # args: should be "exec ?switches? arg ?arg ...?"}}
test exec-10.2 {errors in exec invocation} {
    list [catch {exec | cat} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.3 {errors in exec invocation} {
    list [catch {exec cat |} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.4 {errors in exec invocation} {
    list [catch {exec cat | | cat} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.5 {errors in exec invocation} {
    list [catch {exec cat | |& cat} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.6 {errors in exec invocation} {
    list [catch {exec cat |&} msg] $msg
} {1 {illegal use of | or |& in command}}
test exec-10.7 {errors in exec invocation} {
    list [catch {exec cat <} msg] $msg
} {1 {can't specify "<" as last word in command}}
test exec-10.8 {errors in exec invocation} {
    list [catch {exec cat >} msg] $msg
} {1 {can't specify ">" as last word in command}}
test exec-10.9 {errors in exec invocation} {
    list [catch {exec cat <<} msg] $msg
} {1 {can't specify "<<" as last word in command}}
test exec-10.10 {errors in exec invocation} {
    list [catch {exec cat >>} msg] $msg
} {1 {can't specify ">>" as last word in command}}
test exec-10.11 {errors in exec invocation} {
    list [catch {exec cat >&} msg] $msg
} {1 {can't specify ">&" as last word in command}}
test exec-10.12 {errors in exec invocation} {
    list [catch {exec cat >>&} msg] $msg
} {1 {can't specify ">>&" as last word in command}}
test exec-10.13 {errors in exec invocation} {
    list [catch {exec cat >@} msg] $msg
} {1 {can't specify ">@" as last word in command}}
test exec-10.14 {errors in exec invocation} {
    list [catch {exec cat <@} msg] $msg
} {1 {can't specify "<@" as last word in command}}
test exec-10.15 {errors in exec invocation} {unixExecs} {
    list [catch {exec cat < a/b/c} msg] [string tolower $msg]
} {1 {couldn't read file "a/b/c": no such file or directory}}
test exec-10.16 {errors in exec invocation} {unixExecs} {
    list [catch {exec cat << foo > a/b/c} msg] [string tolower $msg]
} {1 {couldn't write file "a/b/c": no such file or directory}}
test exec-10.17 {errors in exec invocation} {unixExecs} {
    list [catch {exec cat << foo > a/b/c} msg] [string tolower $msg]
} {1 {couldn't write file "a/b/c": no such file or directory}}
set f [open gorp.file w]
test exec-10.18 {errors in exec invocation} {
    list [catch {exec cat <@ $f} msg] $msg
} "1 {channel \"$f\" wasn't opened for reading}"
close $f
set f [open gorp.file r]
test exec-10.19 {errors in exec invocation} {
    list [catch {exec cat >@ $f} msg] $msg
} "1 {channel \"$f\" wasn't opened for writing}"
close $f
test exec-10.20 {errors in exec invocation} {
    list [catch {exec ~non_existent_user/foo/bar} msg] $msg
} {1 {user "non_existent_user" doesn't exist}}
test exec-10.21 {errors in exec invocation} {unixExecs} {
    list [catch {exec true | ~xyzzy_bad_user/x | false} msg] $msg
} {1 {user "xyzzy_bad_user" doesn't exist}}

# Commands in background.

test exec-11.1 {commands in background} {unixExecs} {
    set x [lindex [time {exec sleep 2 &}] 0]
    expr $x<1000000
} 1
test exec-11.2 {commands in background} {unixExecs} {
    list [catch {exec echo a &b} msg] $msg
} {0 {a &b}}
test exec-11.3 {commands in background} {unixExecs} {
    llength [exec sleep 1 &]
} 1
test exec-11.4 {commands in background} {unixExecs} {
    llength [exec sleep 1 | sleep 1 | sleep 1 &]
} 3
test exec-11.5 {commands in background} {unixExecs} {
    set f [open gorp.file w]
    puts $f { catch { exec echo foo & } }
    close $f
    string compare "foo" [exec [info nameofexecutable] gorp.file]
} 0

# Make sure that background commands are properly reaped when
# they eventually die.

catch {exec sleep 3}
test exec-12.1 {reaping background processes} {unixOnly nonPortable} {
    for {set i 0} {$i < 20} {incr i} {
	exec echo foo > /dev/null &
    }
    exec sleep 1
    catch {exec ps | fgrep "echo foo" | fgrep -v fgrep | wc} msg
    lindex $msg 0
} 0
test exec-12.2 {reaping background processes} {unixExecs nonPortable} {
    exec sleep 2 | sleep 2 | sleep 2 &
    catch {exec ps | fgrep -i "sleep" | fgrep -i -v fgrep | wc} msg
    set x [lindex $msg 0]
    exec sleep 3
    catch {exec ps | fgrep -i "sleep" | fgrep -i -v fgrep | wc} msg
    list $x [lindex $msg 0]
} {3 0}
test exec-12.3 {reaping background processes} {unixOnly nonPortable} {
    exec sleep 1000 &
    exec sleep 1000 &
    set x [exec ps | fgrep "sleep" | fgrep -v fgrep]
    set pids {}
    foreach i [split $x \n] {
	lappend pids [lindex $i 0]
    }
    foreach i $pids {
	catch {exec kill -STOP $i}
    }
    catch {exec ps | fgrep "sleep" | fgrep -v fgrep | wc} msg
    set x [lindex $msg 0]

    foreach i $pids {
	catch {exec kill -KILL $i}
    }
    catch {exec ps | fgrep "sleep" | fgrep -v fgrep | wc} msg
    list $x [lindex $msg 0]
} {2 0}

# Make sure "errorCode" is set correctly.

test exec-13.1 {setting errorCode variable} {unixExecs} {
    list [catch {exec cat < a/b/c} msg] [string tolower $errorCode]
} {1 {posix enoent {no such file or directory}}}
test exec-13.2 {setting errorCode variable} {unixExecs} {
    list [catch {exec cat > a/b/c} msg] [string tolower $errorCode]
} {1 {posix enoent {no such file or directory}}}
test exec-13.3 {setting errorCode variable} {
    set x [catch {exec _weird_cmd_} msg]
    list $x [string tolower $msg] [lindex $errorCode 0] \
	    [string tolower [lrange $errorCode 2 end]]
} {1 {couldn't execute "_weird_cmd_": no such file or directory} POSIX {{no such file or directory}}}

# Switches before the first argument

test exec-14.1 {-keepnewline switch} {unixExecs} {
    exec -keepnewline echo foo
} "foo\n"
test exec-14.2 {-keepnewline switch} {
    list [catch {exec -keepnewline} msg] $msg
} {1 {wrong # args: should be "exec ?switches? arg ?arg ...?"}}
test exec-14.3 {unknown switch} {
    list [catch {exec -gorp} msg] $msg
} {1 {bad switch "-gorp": must be -keepnewline or --}}
test exec-14.4 {-- switch} {
    list [catch {exec -- -gorp} msg] [string tolower $msg]
} {1 {couldn't execute "-gorp": no such file or directory}}

# Redirecting standard error separately from standard output

test exec-15.1 {standard error redirection} {unixExecs} {
    exec echo "First line" > gorp.file
    list [eval exec [shellCmd "echo foo bar 1>&2"] 2> gorp.file] \
	    [exec cat gorp.file]
} {{} {foo bar}}
test exec-15.2 {standard error redirection} {unixExecs} {
    list [eval exec [shellCmd "echo foo bar 1>&2"] | echo biz baz >gorp.file \
	    2> gorp.file2] [exec cat gorp.file] \
	    [exec cat gorp.file2]
} {{} {biz baz} {foo bar}}
test exec-15.3 {standard error redirection} {unixExecs} {
    list [eval exec [shellCmd "echo foo bar 1>&2"] | echo biz baz 2>gorp.file \
	    > gorp.file2] [exec cat gorp.file] \
	    [exec cat gorp.file2]
} {{} {foo bar} {biz baz}}
test exec-15.4 {standard error redirection} {unixExecs} {
    set f [open gorp.file w]
    puts $f "Line 1"
    flush $f
    eval exec [shellCmd "echo foo bar 1>&2"] 2>@ $f
    puts $f "Line 3"
    close $f
    exec cat gorp.file
} {Line 1
foo bar
Line 3}
test exec-15.5 {standard error redirection} {unixExecs} {
    exec echo "First line" > gorp.file
    eval exec [shellCmd "echo foo bar 1>&2"] 2>> gorp.file
    exec cat gorp.file
} {First line
foo bar}
test exec-15.6 {standard error redirection} {unixExecs} {
    eval exec [shellCmd "echo foo bar 1>&2"] > gorp.file2 2> gorp.file \
	    >& gorp.file 2> gorp.file2 | echo biz baz
    list [exec cat gorp.file] [exec cat gorp.file2]
} {{biz baz} {foo bar}}

test exec-16.1 {flush output before exec} {unixExecs} {
    set f [open gorp.file w]
    puts $f "First line"
    exec echo "Second line" >@ $f
    puts $f "Third line"
    close $f
    exec cat gorp.file
} {First line
Second line
Third line}
test exec-16.2 {flush output before exec} {unixExecs} {
    set f [open gorp.file w]
    puts $f "First line"
    eval exec [shellCmd "echo Second line 1>&2"] >&@ $f > gorp.file2
    puts $f "Third line"
    close $f
    exec cat gorp.file
} {First line
Second line
Third line}

test exec-17.1 { inheriting standard I/O } {unixOrPc unixExecs} {
    set f [open script w]
    puts $f {close stdout
	set f [open gorp.file w]
	catch {exec echo foobar &}
	exec sleep 2
	close $f
    }
    close $f
    catch {eval exec $tcltest script} result
    set f [open gorp.file r]
    lappend result [read $f]
    close $f
    set result
} {{foobar
}}

removeFile script
removeFile gorp.file
removeFile gorp.file2

return {}
