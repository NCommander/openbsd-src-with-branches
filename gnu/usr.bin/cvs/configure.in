dnl configure.in for cvs
AC_INIT(src/cvs.h)
AC_PREREQ(2.1)dnl Required Autoconf version.
AC_CONFIG_HEADER(config.h src/options.h)

AC_DEFINE(CVS_SUPPORT)

AC_PROG_CC
AC_AIX
AC_MINIX
AC_ISC_POSIX
if test "$ISC" = yes; then
CFLAGS="$CFLAGS -D_SYSV3"
fi

AC_C_CONST
AC_C_CHAR_UNSIGNED
AC_C_INLINE

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_YACC
AC_PROG_MAKE_SET

AC_PATH_PROG(perl_path, perl, no)
AC_PATH_PROG(csh_path, csh, no)

AC_SYS_INTERPRETER
if test X"$ac_cv_sys_interpreter" != X"yes" ; then
  # silly trick to avoid problems in AC macros...
  ac_msg='perl scripts using #! may not be invoked properly'
  AC_MSG_WARN($ac_msg)
fi

AC_PATH_PROGS(gdiff_path, gnudiff diff, diff)
AC_MSG_CHECKING(to see if $gdiff_path supports -a)
if $gdiff_path -a /dev/null /dev/null > /dev/null 2>&1 ; then
  AC_MSG_RESULT(yes; appending -a to $gdiff_path)
  gdiff_path="$gdiff_path -a"
fi
AC_DEFINE_UNQUOTED(DIFF, "$gdiff_path")

AC_PATH_PROGS(ggrep_path, ggrep gnugrep grep, grep)
AC_MSG_CHECKING(to see if $ggrep_path supports -s)
[echo foostring | $ggrep_path -s foostring > conftest.out 2>/dev/null]
dnl
dnl FIXME: We use a work-around for SunOS users with /usr/5bin first in their
dnl FIXME: path but we should really iterate through all the possible grep's
dnl FIXME: for one that works the way we want it to.
dnl FIXME: On the other hand, we should handle the failure to find a "working"
dnl FIXME: -s option by doing the old fashioned ">/dev/null".....
dnl
if test $? -ne 0 ; then
  AC_MSG_WARN($ggrep_path does not support -s, used when checking for merge conflicts)
else
  AC_MSG_RESULT(yes)
  AC_MSG_CHECKING(to see if $ggrep_path -s means to work silently)
  if test -s conftest.out ; then
    AC_MSG_RESULT(no)
    if test "$ggrep_path" != /usr/bin/grep ; then
      AC_MSG_CHECKING(to see if /usr/bin/grep has the right -s)
      [echo foostring | /usr/bin/grep -s foostring > conftest.out 2>/dev/null]
      if test $? -eq 0 -a ! -s foostring ; then
	AC_MSG_RESULT(yes; using /usr/bin/grep)
	ggrep_path=/usr/bin/grep
      else
	AC_MSG_RESULT(no)
      fi
    fi
  else
    AC_MSG_RESULT(yes)
  fi
fi
AC_DEFINE_UNQUOTED(GREP, "$ggrep_path")
rm -f conftest*

AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h unistd.h string.h memory.h utime.h fcntl.h ndbm.h \
                 sys/param.h sys/select.h sys/time.h sys/timeb.h \
                 io.h direct.h sys/bsdtypes.h)
AC_HEADER_SYS_WAIT
AC_HEADER_STAT
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_TYPE_SIGNAL
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_REPLACE_FUNCS(getwd mkdir rename strdup strstr dup2 strerror valloc waitpid memmove)
AC_CHECK_FUNCS(fchmod fsync ftime mkfifo putenv setvbuf vfork vprintf ftruncate timezone getpagesize fchdir)
AC_CHECK_FUNC(re_exec, :, LIBOBJS="$LIBOBJS regex.o")
AC_FUNC_UTIME_NULL
AC_FUNC_ALLOCA
AC_SYS_LONG_FILE_NAMES

AC_MSG_CHECKING([for working fnmatch function])
AC_CACHE_VAL(ccvs_cv_sys_working_fnmatch,
[AC_TRY_RUN([
#include <fnmatch.h>
int
main ()
{
  exit ((fnmatch ("a", "a", FNM_FILE_NAME) == 0
	 && fnmatch ("a", "b", FNM_FILE_NAME) == FNM_NOMATCH)
	? 0 : 1);
}],
ccvs_cv_sys_working_fnmatch=yes,
ccvs_cv_sys_working_fnmatch=no,
ccvs_cv_sys_working_fnmatch=no)])
if test $ccvs_cv_sys_working_fnmatch = no; then
  LIBOBJS="$LIBOBJS fnmatch.o"
fi
AC_MSG_RESULT($ccvs_cv_sys_working_fnmatch)

dnl
dnl set $(KRB4) from --with-krb4=value -- WITH_KRB4
dnl
define(WITH_KRB4,[
AC_WITH([krb4],
KRB4=$withval,
KRB4=/usr/kerberos
)dnl
echo "default place for krb4 is $KRB4"
AC_SUBST(KRB4)])dnl
WITH_KRB4

AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)

AC_REQUIRE([AC_CROSS_CHECK])
krb_h=
AC_COMPILE_CHECK(krb.h,[#include <krb.h>],[int i;],
  [krb_h=yes krb_incdir=],
  [if test "$cross_compiling" != yes && test -r $KRB4/include/krb.h; then
     hold_cflags=$CFLAGS
     CFLAGS="$CFLAGS -I$KRB4/include"
     AC_COMPILE_CHECK(krb.h in $KRB4/include,
       [#include <krb.h>],[int i;],
       [krb_h=yes krb_incdir=$KRB4/include])
     CFLAGS=$hold_cflags
   fi])
if test -n "$krb_h"; then
  krb_lib=
  AC_HAVE_LIBRARY(-lkrb,[krb_lib=yes krb_libdir=],
    [if test "$cross_compiling" != yes && test -r $KRB4/lib/libkrb.a; then
       krb_lib=yes krb_libdir=$KRB4/lib
     fi])
  if test -n "$krb_lib"; then
    AC_DEFINE(HAVE_KERBEROS)
    test -n "${krb_libdir}" && LIBS="${LIBS} -L${krb_libdir}"
    LIBS="${LIBS} -lkrb"
    AC_HAVE_LIBRARY(-ldes,[LIBS="${LIBS} -ldes"])
    if test -n "$krb_incdir"; then
      includeopt="${includeopt} -I$krb_incdir"
      AC_SUBST(includeopt)
    fi
  fi
fi
AC_CHECK_FUNCS(krb_get_err_text)
# If we can't find connect, try looking in -lsocket, -lnsl, and -linet.
# The Irix 5 libc.so has connect and gethostbyname, but Irix 5 also has
# libsocket.so which has a bad implementation of gethostbyname (it
# only looks in /etc/hosts), so we only look for -lsocket if we need
# it.
unset ac_cv_func_connect
AC_CHECK_FUNC(connect, :, 
[case $LIBS in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl_s, main) ;;
esac
case $LIBS in
*-lnsl*) ;;
*) AC_CHECK_LIB(nsl, main) ;;
esac
case $LIBS in
*-lsocket*) ;;
*) AC_CHECK_LIB(socket, connect) ;;
esac
case $LIBS in
*-linet*) ;;
*) AC_CHECK_LIB(inet, connect) ;;
esac
unset ac_cv_func_connect
AC_CHECK_FUNCS(connect)])

AC_CHECK_FUNC(gethostname, :, LIBOBJS="$LIBOBJS hostname.o")

# If we have connect(), we want the full client & server arrangement.
if test "$ac_cv_func_connect" = yes; then
AC_DEFINE(CLIENT_SUPPORT)
AC_DEFINE(SERVER_SUPPORT)
fi

test -f src/options.h && (
  AC_MSG_WARN(saving ./src/options.h in ./src/options.h-SAVED)
  AC_MSG_WARN(You may wish to check that local options have not been lost.)
  AC_MSG_WARN(Do not re-run ./configure or ./config.status until you have....)
  cp ./src/options.h ./src/options.h-SAVED
)

AC_OUTPUT(Makefile lib/Makefile src/Makefile doc/Makefile \
	  man/Makefile contrib/Makefile contrib/pcl-cvs/Makefile \
	  examples/Makefile windows-NT/Makefile stamp-h)
