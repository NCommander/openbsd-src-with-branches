This is Info file pcl-cvs.info, produced by Makeinfo-1.55 from the
input file ./pcl-cvs.texinfo.

   Copyright (C) 1992 Per Cederqvist

   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the section entitled "GNU General Public License" is included
exactly as in the original, and provided that the entire resulting
derived work is distributed under the terms of a permission notice
identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the section entitled "GNU General Public
License" and this permission notice may be included in translations
approved by the Free Software Foundation instead of in the original
English.


File: pcl-cvs.info,  Node: Customization,  Next: Future enhancements,  Prev: Commands,  Up: Top

Customization
*************

   If you have an idea about any customization that would be handy but
isn't present in this list, please tell me!  *Note Bugs:: for info on
how to reach me.

`cvs-erase-input-buffer'
     If set to anything else than `nil' the edit buffer will be erased
     before you write the log message (*note Committing changes::.).

`cvs-inhibit-copyright-message'
     The copyright message that is displayed on startup can be
     annoying after a while.  Set this variable to `t' if you want to
     get rid of it.  (But don't set this to `t' in the system
     defaults file - new users should see this message at least once).

`cvs-diff-flags'
     A list of strings to pass as arguments to the `cvs diff' and
     `diff' programs.  This is used by `cvs-mode-diff-cvs' and
     `cvs-mode-diff-backup' (key `b', *note Viewing differences::.).
     If you prefer the Unidiff format you could add this line to your
     `.emacs' file:

          (setq cvs-diff-flags '("-u"))

`cvs-diff-ignore-marks'
     If this variable is non-`nil' or if a prefix argument is given
     (but not both) to `cvs-mode-diff-cvs' or `cvs-mode-diff-backup'
     marked files are not considered selected.

`cvs-log-flags'
     List of strings to send to `cvs log'.  Used by `cvs-mode-log'
     (key `l', *note Getting info about files::.).

`cvs-status-flags'
     List of strings to send to `cvs status'.  Used by
     `cvs-mode-status' (key `s', *note Getting info about files::.).

`cvs-auto-remove-handled'
     If this variable is set to any non-`nil' value
     `cvs-mode-remove-handled' will be called every time you check in
     files, after the check-in is ready.  *Note Removing handled
     entries::.

`cvs-auto-revert-after-commit'
     If this variable is set to any non-`nil' value any buffers you
     have that visit a file that is committed will be automatically
     reverted.  This variable is default `t'. *Note Committing
     changes::.

`cvs-update-prog-output-skip-regexp'
     The `-u' flag in the `modules' file can be used to run a command
     whenever a `cvs update' is performed (see cvs(5)).  This regexp
     is used to search for the last line in that output.  It is
     normally set to `"$"'.  That setting is only correct if the
     command outputs nothing.  Note that pcl-cvs will get very
     confused if the command outputs *anything* to `stderr'.

`cvs-cvsroot'
     This variable can be set to override `CVSROOT'.  It should be a
     string. If it is set then everytime a cvs command is run it will
     be called as `cvs -d CVS-CVSROOT...'  This can be useful if your
     site has several repositories.

`TMPDIR'
     Pcl-cvs uses this *environment variable* to decide where to put
     the temporary files it needs.  It defaults to `/tmp' if it is
     not set.

`cvs-commit-buffer-require-final-newline'
     When you enter a log message in the `*cvs-commit-message*' buffer
     pcl-cvs will normally automatically insert a trailing newline,
     unless there already is one.  This behavior can be controlled via
     `cvs-commit-buffer-require-final-newline'.  If it is `t' (the
     default behavior), a newline will always be appended.  If it is
     `nil', newlines will never be appended.  Any other value causes
     pcl-cvs to ask the user whenever there is no trailing newline in
     the commit message buffer.

`cvs-sort-ignore-file'
     If this variable is set to any non-`nil' value the `.cvsignore'
     will always be sorted whenever you use `cvs-mode-ignore' to add
     a file to it.  This option is on by default.


File: pcl-cvs.info,  Node: Future enhancements,  Next: Bugs,  Prev: Customization,  Up: Top

Future enhancements
*******************

   Pcl-cvs is still under development and needs a number of
enhancements to be called complete.  Below is my current wish-list
for future releases of pcl-cvs.  Please, let me know which of these
features you want most.  They are listed below in approximately the
order that I currently think I will implement them in.

   * Rewritten parser code.  There are many situations where pcl-cvs
     will fail to recognize the output from CVS.  The situation could
     be greatly increased.

   * `cvs-status'.  This will run `cvs status' in a directory and
     produce a buffer that looks pretty much like the current *cvs*
     buffer.  That buffer will include information for all
     version-controlled files.  (There will be a simple keystroke to
     remove all "uninteresting" files, that is, files that are
     "Up-to-date").  In this new buffer you will be able to update a
     file, commit a file, et c.  The big win with this is that you
     will be able to watch the differences between your current
     working file and the head revision in the repository before you
     update the file, and you can then choose to update it or let it
     wait for a while longer.

   * Log mode.  When this mode is finished you will be able to move
     around (using `n' and `p') between the revisions of a file, mark
     two of them, and run a diff between them.  You will be able to
     hide branches (similar to the way you can hide sub-paragraphs in
     outline-mode) and do merges between revisions.  Other ideas
     about this are welcome.

   * The current model for marks in the *cvs* buffer seems to be
     confusing.  I am considering to use the VM model instead, where
     marks are normally inactive.  To activate the mark, you issue a
     command like `cvs-mode-next-command-uses-marks'.  I might
     implement a flag so that you can use either version.  Feedback
     on this before I start coding it is very welcome.

   * It should be possible to run commands such as `cvs log', `cvs
     status' and `cvs commit' directly from a buffer containing a
     file, instead of having to `cvs-update'.  If the directory
     contains many files the `cvs-update' can take quite some time,
     especially on a slow machine.  I planed to put these kind of
     commands on the prefix `C-c C-v', but that turned out to be used
     by for instance c++-mode.  If you have any suggestions for a
     better prefix key, please let me know.

   * Increased robustness.  For instance, you can not currently press
     `C-g' when you are entering the description of a file that you
     are adding without confusing pcl-cvs.

   * Support for multiple active *cvs* buffers.

   * Dired support.  I have an experimental `dired-cvs.el' that works
     together with CVS 1.2.  Unfortunately I wrote it on top of a
     non-standard `dired.el', so it must be rewritten.

   * An ability to send user-supplied options to all the cvs commands.

   * Pcl-cvs is not at all clever about what it should do when `cvs
     update' runs a program (due to the `-u' option in the `modules'
     file -- see `cvs(5)').  The current release uses a regexp to
     search for the end.  At the very least that regexp should be
     configured for different modules.  Tell me if you have any idea
     about what is the right thing to do.  In a perfect world the
     program should also be allowed to print to `stderr' without
     causing pcl-cvs to crash.

   If you miss something in this wish-list, let me know!  I don't
promise that I will write it, but I will at least try to coordinate
the efforts of making a good Emacs front end to CVS.  See *Note
Bugs:: for information about how to reach me.

   So far, I have written most of pcl-cvs in my all-to-rare spare
time. If you want pcl-cvs to be developed faster you can write a
contract with Signum Support to do the extension.  You can reach
Signum Support by email to `info@signum.se' or via mail to Signum
Support AB, Box 2044, S-580 02 Linkoping, Sweden. Phone: +46 (0) 13 -
21 46 00. Fax: +46 (0) 13 - 21 47 00.


File: pcl-cvs.info,  Node: Bugs,  Next: Function and Variable Index,  Prev: Future enhancements,  Up: Top

Bugs (known and unknown)
************************

   If you find a bug or misfeature, don't hesitate to tell me!  Send
email to `ceder@lysator.liu.se'.

   If you have ideas for improvements, or if you have written some
extensions to this package, I would like to hear from you.  I hope
that you find this package useful!

   Below is a partial list of currently known problems with pcl-cvs
version 1.05.

Commit causes Emacs to hang
     Emacs waits for the `cvs commit' command to finish before you can
     do anything.  If you start a background job from the loginfo
     file you must take care that it closes `stdout' and `stderr' if
     you do not want to wait for it.  (You do that with
     `background-command &>- 2&>- &' if you are starting
     `background-command' from a `/bin/sh' shell script).

     Your emacs will also hang if there was a lock file in the
     repository.  In this case you can type `C-g' to get control over
     your emacs again.

Name clash in Emacs 19
     This is really a bug in Elib or the Emacs 19 distribution.  Both
     Elib and Emacs 19.6 through at least 19.10 contains a file named
     `cookie.el'.  One of the files will have to be renamed, and we
     are currently negotiating about which of the files to rename.

Commands while cvs-update is running
     It is possible to type commands in the *cvs* buffer while the
     update is running, but error messages is all that you will get.
     The error messages should be better.

Unexpected output from CVS
     Unexpected output from CVS confuses pcl-cvs.  It will currently
     create a bug report that you can mail to me.  It should do
     something more civilized.


File: pcl-cvs.info,  Node: Function and Variable Index,  Next: Concept Index,  Prev: Bugs,  Up: Top

Function and Variable Index
***************************

* Menu:

* bury-buffer:                          Miscellaneous commands.
* cookie-next-cookie:                   Movement commands.
* cookie-previous-cookie:               Movement commands.
* cvs-auto-remove-handled (variable):   Customization.
* cvs-auto-revert-after-commit (variable): Customization.
* cvs-auto-revert-after-commit (variable): Committing changes.
* cvs-byte-compile-files:               Miscellaneous commands.
* cvs-commit-buffer-require-final-newline (variable): Customization.
* cvs-cvsroot (variable):               Customization.
* cvs-delete-lock:                      Updating the directory.
* cvs-diff-flags (variable):            Customization.
* cvs-diff-ignore-marks (variable):     Customization.
* cvs-diff-ignore-marks (variable):     Viewing differences.
* cvs-erase-input-buffer (variable):    Customization.
* cvs-erase-input-buffer (variable):    Committing changes.
* cvs-inhibit-copyright-message (variable): Customization.
* cvs-log-flags (variable):             Customization.
* cvs-mode-acknowledge:                 Removing handled entries.
* cvs-mode-add:                         Adding and removing files.
* cvs-mode-add-change-log-entry-other-window: Editing files.
* cvs-mode-commit:                      Committing changes.
* cvs-mode-diff-backup:                 Viewing differences.
* cvs-mode-diff-cvs:                    Viewing differences.
* cvs-mode-emerge:                      Emerge.
* cvs-mode-find-file:                   Editing files.
* cvs-mode-find-file-other-window:      Editing files.
* cvs-mode-ignore:                      Removing handled entries.
* cvs-mode-log:                         Getting info about files.
* cvs-mode-mark:                        Marking files.
* cvs-mode-mark-all-files:              Marking files.
* cvs-mode-remove-file:                 Adding and removing files.
* cvs-mode-remove-handled:              Removing handled entries.
* cvs-mode-revert-updated-buffers:      Reverting your buffers.
* cvs-mode-status:                      Getting info about files.
* cvs-mode-undo-local-changes:          Undoing changes.
* cvs-mode-unmark:                      Marking files.
* cvs-mode-unmark-all-files:            Marking files.
* cvs-mode-unmark-up:                   Marking files.
* cvs-mode-update-no-prompt:            Updating the directory.
* cvs-sort-ignore-file (variable):      Customization.
* cvs-status-flags (variable):          Customization.
* cvs-update:                           Updating the directory.
* cvs-update-prog-output-skip-regexp (variable): Customization.
* TMPDIR (environment variable):        Customization.


File: pcl-cvs.info,  Node: Concept Index,  Next: Key Index,  Prev: Function and Variable Index,  Up: Top

Concept Index
*************

* Menu:

* -u option in modules file:            Customization.
* .cvsignore file, sorting:             Customization.
* About pcl-cvs:                        About pcl-cvs.
* Active files:                         Selected files.
* Added (file status):                  File status.
* Adding files:                         Adding and removing files.
* Archives:                             Archives.
* Author, how to reach:                 Bugs.
* Authors:                              Contributors.
* Automatically inserting newline:      Customization.
* Automatically remove handled files:   Customization.
* Automatically sorting .cvsignore:     Customization.
* Buffer contents:                      Buffer contents.
* Bugs, how to report them:             Bugs.
* Bugs, known:                          Bugs.
* Byte compilation:                     Miscellaneous commands.
* Ci:                                   Committing changes.
* Commit buffer:                        Committing changes.
* Commit message, inserting newline:    Customization.
* Committing changes:                   Committing changes.
* Conflict (file status):               File status.
* Conflicts, how to resolve them:       Viewing differences.
* Conflicts, resolving:                 Emerge.
* Context diff, how to get:             Customization.
* Contributors:                         Contributors.
* Copyright message, getting rid of it: Customization.
* Customization:                        Customization.
* Deleting files:                       Adding and removing files.
* Diff:                                 Viewing differences.
* Dired:                                Editing files.
* Edit buffer:                          Committing changes.
* Editing files:                        Editing files.
* Email archives:                       Archives.
* Email to the author:                  Bugs.
* Emerge:                               Emerge.
* Enhancements:                         Future enhancements.
* Erasing commit message:               Committing changes.
* Erasing the input buffer:             Customization.
* Example run:                          Getting started.
* Expunging uninteresting entries:      Removing handled entries.
* FAQ:                                  Bugs.
* File selection:                       Selected files.
* File status:                          File status.
* Finding files:                        Editing files.
* Flush changes:                        Undoing changes.
* Ftp-sites:                            Archives.
* Generating a typeset manual:          Typeset manual installation.
* Generating the on-line manual:        On-line manual installation.
* Getting pcl-cvs:                      Archives.
* Getting rid of lock files:            Miscellaneous commands.
* Getting rid of the Copyright message.: Customization.
* Getting rid of uninteresting lines:   Removing handled entries.
* Getting status:                       Getting info about files.
* Getting the *cvs* buffer:             Updating the directory.
* Handled lines, removing them:         Removing handled entries.
* Info-file (how to generate):          On-line manual installation.
* Inhibiting the Copyright message.:    Customization.
* Installation:                         Installation.
* Installation of elisp files:          Pcl-cvs installation.
* Installation of on-line manual:       On-line manual installation.
* Installation of typeset manual:       Typeset manual installation.
* Introduction:                         Getting started.
* Invoking dired:                       Editing files.
* Invoking emerge:                      Emerge.
* Known bugs:                           Bugs.
* Loading files:                        Editing files.
* Lock files:                           Miscellaneous commands.
* Log (RCS/cvs command):                Getting info about files.
* Manual installation (on-line):        On-line manual installation.
* Manual installation (typeset):        Typeset manual installation.
* Marked files:                         Selected files.
* Marking files:                        Marking files.
* Merged (file status):                 File status.
* Modified (file status):               File status.
* Modules file (-u option):             Customization.
* Move away FILE - it is in the way (file status): File status.
* Movement Commands:                    Movement commands.
* On-line manual (how to generate):     On-line manual installation.
* Printing a manual:                    Typeset manual installation.
* Problems, list of common:             Bugs.
* Putting files under CVS control:      Adding and removing files.
* Recompiling elisp files:              Miscellaneous commands.
* Removed (file status):                File status.
* Removed by you, changed in repository (file status): File status.
* Removed from repository (file status): File status.
* Removed from repository, changed by you (file status): File status.
* Removing files:                       Adding and removing files.
* Removing uninteresting (processed) lines: Removing handled entries.
* Reporting bugs and ideas:             Bugs.
* Require final newline:                Customization.
* Resolving conflicts:                  Emerge.
* Resurrecting files:                   Adding and removing files.
* Reverting buffers:                    Reverting your buffers.
* Reverting buffers after commit:       Committing changes.
* Reverting buffers after commit:       Customization.
* Selected files:                       Selected files.
* Selecting files (commands to mark files): Marking files.
* Sites:                                Archives.
* Sorting the .cvsignore file:          Customization.
* Status (cvs command):                 Getting info about files.
* Syncing buffers:                      Reverting your buffers.
* TeX - generating a typeset manual:    Typeset manual installation.
* This repository is missing!... (file status): File status.
* Undo changes:                         Undoing changes.
* Unidiff, how to get:                  Customization.
* Uninteresting entries, getting rid of them: Removing handled entries.
* Unknown (file status):                File status.
* Update program (-u option in modules file): Customization.
* Updated (file status):                File status.
* Variables, list of all:               Customization.
* Viewing differences:                  Viewing differences.


File: pcl-cvs.info,  Node: Key Index,  Prev: Concept Index,  Up: Top

Key Index
*********

* Menu:

* a - add a file:                       Adding and removing files.
* A - add ChangeLog entry:              Editing files.
* b - diff backup file:                 Viewing differences.
* c - commit files:                     Committing changes.
* C-k - remove selected entries:        Removing handled entries.
* C-n - Move down one file:             Movement commands.
* C-p - Move up one file:               Movement commands.
* d - run cvs diff:                     Viewing differences.
* DEL - unmark previous file:           Marking files.
* e - invoke emerge:                    Emerge.
* ESC DEL - unmark all files:           Marking files.
* f - find file or directory:           Editing files.
* g - Rerun cvs update:                 Updating the directory.
* l - run cvs log:                      Getting info about files.
* m - marking a file:                   Marking files.
* M - marking all files:                Marking files.
* n - Move down one file:               Movement commands.
* o - find file in other window:        Editing files.
* p - Move up on file:                  Movement commands.
* q - bury the *cvs* buffer:            Miscellaneous commands.
* r - remove a file:                    Adding and removing files.
* R - revert buffers:                   Reverting your buffers.
* s - run cvs status:                   Getting info about files.
* SPC - Move down one file:             Movement commands.
* U - undo changes:                     Undoing changes.
* u - unmark a file:                    Marking files.
* x - remove processed entries:         Removing handled entries.


