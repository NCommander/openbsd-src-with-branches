BitSet tests:
a = 0*
b = 000000000010*
c = 1010101010101010101010101010101010101010*
c[0] =1
c[1] =0
c[2] =1
c[3] =0
c[4] =1
d = 00110011001100110011001100110011001100110*
e = 1111000011110000111100001111000011110*
u = ~a = 1*
g = ~e = 0000111100001111000011110000111100001*
~c = 0101010101010101010101010101010101010101*
c & d = 0010001000100010001000100010001000100010*
c | d = 10111011101110111011101110111011101110110*
c - d = 10001000100010001000100010001000100010*
c ^ d = 10011001100110011001100110011001100110010*
f = b = 100000000010*
f &= c = 100000000010*
f |= d = 10110011001100110011001100110011001100110*
f -= e = 00000011000000110000001100000011000000110*
f ^= u = 11111100111111001111110011111100111111001*
h = d
:00110011001100110011001100110011001100110*
h.set(0):
10110011001100110011001100110011001100110*
h.set(65):
1011001100110011001100110011001100110011000000000000000000000000010*
h.clear(2):
1001001100110011001100110011001100110011000000000000000000000000010*
h.invert(11,20):
1001001100101100110010110011001100110011000000000000000000000000010*
h.set(21,30):
1001001100101100110011111111111100110011000000000000000000000000010*
h.clear(31, 40):
1001001100101100110011111111111000000000000000000000000000000000010*
h.test(0,5) = 1
h.test(31,40) = 0
set bits in e:
0 1 2 3 8 9 10 11 16 17 18 19 24 25 26 27 32 33 34 35 
clear bits in g (reverse order):
35 34 33 32 27 26 25 24 19 18 17 16 11 10 9 8 3 2 1 0 
a: 0*
after set(1,2): 0110*
after copy: 0*
after set(1): 010*

End of test.
