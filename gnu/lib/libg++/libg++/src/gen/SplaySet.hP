// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T>SplaySet_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>SplaySet_h 1

#include "<T>.Set.h"
#include "<T>.SplayNode.h"

class <T>SplaySet : public <T>Set
{
protected:
  <T>SplayNode*   root;

  <T>SplayNode*   leftmost();
  <T>SplayNode*   rightmost();
  <T>SplayNode*   pred(<T>SplayNode* t);
  <T>SplayNode*   succ(<T>SplayNode* t);
  void            _kill(<T>SplayNode* t);
  <T>SplayNode*   _copy(<T>SplayNode* t);

public:
                  <T>SplaySet();
                  <T>SplaySet(<T>SplaySet& a);
  inline                 ~<T>SplaySet();

  Pix             add(<T&> item);
  void            del(<T&> item);
  inline int             contains(<T&> item);

  inline void            clear();

  inline Pix             first();
  inline void            next(Pix& i);
  inline <T>&            operator () (Pix i);
  Pix             seek(<T&> item);

  Pix             last();
  void            prev(Pix& i);

  <T>SplaySet&    operator =  (const <T>SplaySet& b);
  void            operator |= (<T>SplaySet& b);
  void            operator -= (<T>SplaySet& b);
  void            operator &= (<T>SplaySet& b);

  int             operator == (<T>SplaySet& b);
  int             operator != (<T>SplaySet& b);
  int             operator <= (<T>SplaySet& b); 

  int             OK();
};


inline <T>SplaySet::~<T>SplaySet()
{
  _kill(root);
}

inline <T>SplaySet::<T>SplaySet()
{
  root = 0;
  count = 0;
}

inline <T>SplaySet::<T>SplaySet(<T>SplaySet& b)
{
  count = b.count;
  root = _copy(b.root);
}


inline <T>SplaySet& <T>SplaySet::operator = (const <T>SplaySet& b)
{
  if (this != &b)
    {
      _kill (root);
      count = b.count;
      root = _copy (b.root);
    }
  return *this;
}

inline int <T>SplaySet::operator != (<T>SplaySet& b)
{
  return ! (*this == b);
}

inline Pix <T>SplaySet::first()
{
  return Pix(leftmost());
}

inline Pix <T>SplaySet::last()
{
  return Pix(rightmost());
}

inline void <T>SplaySet::next(Pix& i)
{
  if (i != 0) i = Pix(succ((<T>SplayNode*)i));
}

inline void <T>SplaySet::prev(Pix& i)
{
  if (i != 0) i = Pix(pred((<T>SplayNode*)i));
}

inline <T>& <T>SplaySet::operator () (Pix i)
{
  if (i == 0) error("null Pix");
  return ((<T>SplayNode*)i)->item;
}

inline void <T>SplaySet::clear()
{
  _kill(root);
  count = 0;
  root = 0;
}

inline int <T>SplaySet::contains(<T&> key)
{
  return seek(key) != 0;
}

#endif
