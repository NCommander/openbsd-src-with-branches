// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)
    based on code by Marc Shapiro (shapiro@sor.inria.fr)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/

#ifndef _<T>FPlex_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>FPlex_h 1

#include "<T>.Plex.h"

class <T>FPlex : public <T>Plex
{
public:
                   <T>FPlex();                 // set low = 0;
                                               // fence = 0;
                                               // csize = default

                   <T>FPlex(int maxsize);      // low = 0; 
                                               // fence = 0;
                                               // csize = maxsize

                   <T>FPlex(int lo,            // low = lo; 
                            int maxsize);      // fence=lo
                                               // csize = maxsize

                   <T>FPlex(int lo,            // low = lo
                            int hi,            // fence = hi+1
                            const <T&> initval,// fill with initval,
                            int maxsize = 0);  // csize = maxsize
                                               // or fence - lo if 0

                   <T>FPlex(const <T>FPlex&);   // X(X&)

  inline                  ~<T>FPlex();

  void             operator= (const <T>FPlex&);

// virtuals

  inline <T>&             high_element ();
  inline <T>&             low_element ();

  inline const <T>&       high_element () const;
  inline const <T>&       low_element () const;

  inline Pix              first() const;
  inline Pix              last() const;
  inline void             prev(Pix& ptr) const;
  inline void             next(Pix& ptr) const;
  inline int              owns(Pix p) const;
  inline <T>&             operator () (Pix p);
  inline const <T>&       operator () (Pix p) const;

  inline int              low() const; 
  inline int              high() const;
  inline int              valid(int idx) const;
  inline void             prev(int& idx) const;
  inline void             next(int& x) const;
  inline <T>&             operator [] (int index);
  inline const <T>&       operator [] (int index) const;
    
  inline int              Pix_to_index(Pix p) const;
  inline Pix              index_to_Pix(int idx) const;    

  inline int              can_add_high() const;
  inline int              can_add_low() const;
  inline int              full() const;

  inline int              add_high(const <T&> elem);
  inline int              del_high ();
  inline int              add_low (const <T&> elem);
  inline int              del_low ();

  void             fill(const <T&> x);
  void             fill(const <T&> x, int from, int to);
  void             clear();
  void             reverse();

  int              OK () const; 
};


inline  int <T>FPlex::valid (int idx) const
{
  return idx >= lo && idx < fnc;
}

inline int <T>FPlex::low() const
{
  return lo;
}

inline int <T>FPlex::high() const
{
  return fnc - 1;
}

inline Pix  <T>FPlex::first() const
{
  return (Pix)(hd-><T>IChunk::first_pointer());
}

inline void  <T>FPlex::prev(Pix&  p) const
{
  p = Pix(hd-><T>IChunk::pred((<T>*) p));
}

inline void  <T>FPlex::next(Pix&  p) const
{
  p =  Pix(hd-><T>IChunk::succ((<T>*) p));
}

inline Pix <T>FPlex::last() const
{
  return Pix(hd-><T>IChunk::last_pointer());
}

inline  int <T>FPlex::full () const
{
  return fnc - lo == csize;
}

inline void <T>FPlex::prev(int& idx) const
{
  --idx;
}

inline void <T>FPlex::next(int& idx) const
{
  ++idx;
}

inline <T>& <T>FPlex:: operator [] (int idx)
{
  if (idx < lo || idx >= fnc) index_error();
  return *(hd->pointer_to(idx));
}

inline <T>& <T>FPlex:: operator () (Pix p)
{
  return *((<T>*)p);
}

inline  <T>& <T>FPlex::low_element ()
{
  if (empty()) index_error();
  return *(hd->pointer_to(lo));
}

inline  <T>& <T>FPlex::high_element ()
{
  if (empty()) index_error();
  return *(hd->pointer_to(fnc - 1));
}

inline const <T>& <T>FPlex:: operator [] (int idx) const
{
  if (idx < lo || idx >= fnc) index_error();
  return *(hd->pointer_to(idx));
}

inline const <T>& <T>FPlex:: operator () (Pix p) const
{
  return *((const <T>*)p);
}

inline const <T>& <T>FPlex::low_element () const
{
  if (empty()) index_error();
  return *(hd->pointer_to(lo));
}

inline const  <T>& <T>FPlex::high_element () const
{
  if (empty()) index_error();
  return *(hd->pointer_to(fnc - 1));
}

inline int <T>FPlex::can_add_high() const
{
  return hd->can_grow_high();
}

inline int <T>FPlex::can_add_low() const
{
  return hd->can_grow_low();
}

inline int <T>FPlex::add_high(const <T&> elem)
{
  if (!can_add_high()) full_error();
  *((hd-><T>IChunk::grow_high())) = elem;
  return fnc++;
}

inline  int <T>FPlex::del_high ()
{
  if (empty()) empty_error();
  hd-><T>IChunk::shrink_high();
  return --fnc - 1;
}

inline  int <T>FPlex::add_low (const <T&> elem)
{
  if (!can_add_low()) full_error();
  *((hd-><T>IChunk::grow_low())) = elem;
  return --lo;
}

inline  int <T>FPlex::del_low ()
{
  if (empty()) empty_error();
  hd-><T>IChunk::shrink_low();
  return ++lo;
}

inline  int <T>FPlex::owns (Pix p) const
{
  return hd->actual_pointer((<T>*)p);
}

inline  int <T>FPlex::Pix_to_index(Pix p) const
{
  if (!hd->actual_pointer((const <T>*)p)) index_error();
  return hd->index_of((const <T>*)p);
}

inline  Pix <T>FPlex::index_to_Pix(int idx) const
{
  if (idx < lo || idx >= fnc) index_error();
  return Pix(hd->pointer_to(idx));
}

inline <T>FPlex::~<T>FPlex() {}

#endif
