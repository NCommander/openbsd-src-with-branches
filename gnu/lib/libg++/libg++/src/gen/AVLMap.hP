// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T><C>AVLMap_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T><C>AVLMap_h 1

#include "<T>.<C>.Map.h"

struct <T><C>AVLNode
{
  <T><C>AVLNode*      lt;
  <T><C>AVLNode*      rt;
  <T>                 item;
  <C>                 cont;
  char                stat;
                      <T><C>AVLNode(<T&> h, <C&> c, 
                                    <T><C>AVLNode* l=0, <T><C>AVLNode* r=0);
                      ~<T><C>AVLNode();
};

inline <T><C>AVLNode::<T><C>AVLNode(<T&> h, <C&> c, 
                                    <T><C>AVLNode* l, <T><C>AVLNode* r)
     :lt(l), rt(r), item(h), cont(c), stat(0) {}

inline <T><C>AVLNode::~<T><C>AVLNode() {}

typedef <T><C>AVLNode* <T><C>AVLNodePtr;


class <T><C>AVLMap : public <T><C>Map
{
protected:
  <T><C>AVLNode*   root;

  <T><C>AVLNode*   leftmost();
  <T><C>AVLNode*   rightmost();
  <T><C>AVLNode*   pred(<T><C>AVLNode* t);
  <T><C>AVLNode*   succ(<T><C>AVLNode* t);
  void            _kill(<T><C>AVLNode* t);
  void            _add(<T><C>AVLNode*& t);
  void            _del(<T><C>AVLNode* p, <T><C>AVLNode*& t);

public:
                <T><C>AVLMap(<C&> dflt);
                <T><C>AVLMap(<T><C>AVLMap& a);
  inline               ~<T><C>AVLMap();

  <C>&          operator [] (<T&> key);

  void          del(<T&> key);

  inline Pix           first();
  inline void          next(Pix& i);
  inline <T>&          key(Pix i);
  inline <C>&          contents(Pix i);

  Pix           seek(<T&> key);
  inline int           contains(<T&> key);

  inline void          clear(); 

  Pix           last();
  void          prev(Pix& i);

  int           OK();
};

inline <T><C>AVLMap::~<T><C>AVLMap()
{
  _kill(root);
}

inline <T><C>AVLMap::<T><C>AVLMap(<C&> dflt) :<T><C>Map(dflt)
{
  root = 0;
}

inline Pix <T><C>AVLMap::first()
{
  return Pix(leftmost());
}

inline Pix <T><C>AVLMap::last()
{
  return Pix(rightmost());
}

inline void <T><C>AVLMap::next(Pix& i)
{
  if (i != 0) i = Pix(succ((<T><C>AVLNode*)i));
}

inline void <T><C>AVLMap::prev(Pix& i)
{
  if (i != 0) i = Pix(pred((<T><C>AVLNode*)i));
}

inline <T>& <T><C>AVLMap::key(Pix i)
{
  if (i == 0) error("null Pix");
  return ((<T><C>AVLNode*)i)->item;
}

inline <C>& <T><C>AVLMap::contents(Pix i)
{
  if (i == 0) error("null Pix");
  return ((<T><C>AVLNode*)i)->cont;
}

inline void <T><C>AVLMap::clear()
{
  _kill(root);
  count = 0;
  root = 0;
}

inline int <T><C>AVLMap::contains(<T&> key)
{
  return seek(key) != 0;
}

#endif
