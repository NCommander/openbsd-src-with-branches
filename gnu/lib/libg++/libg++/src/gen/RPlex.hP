// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)
    based on code by Marc Shapiro (shapiro@sor.inria.fr)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/

#ifndef _<T>RPlex_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>RPlex_h 1

#include "<T>.Plex.h"

// minimum number of chunks to index

#ifndef MIN_NCHUNKS
#define MIN_NCHUNKS  16
#endif

class <T>RPlex: public <T>Plex
{
  int              base;        // base index of lowest chunk
  int              lch;         // index of lowest used chunk
  int              fch;         // 1 + index of highest used chunk
  int              maxch;       // max chunks in array
  <T>IChunk**      chunks;      // array of chunks
  <T>IChunk*       ch;          // cached chunk

  void             make_initial_chunks(int up = 1);

  void             cache(int idx) const;
  void             cache(const <T>* p) const;
  <T>*             dopred(const <T>* p) const;
  <T>*             dosucc(const <T>* p) const;

  inline void             set_cache(const <T>IChunk* t) const; // logically, 
                                               // not physically const

public:
                   <T>RPlex();                 // set low = 0;
                                               // fence = 0;
                                               // csize = default

                   <T>RPlex(int ch_size);      // low = 0; 
                                               // fence = 0;
                                               // csize = ch_size

                   <T>RPlex(int lo,            // low = lo; 
                            int ch_size);      // fence=lo
                                               // csize = ch_size

                   <T>RPlex(int lo,            // low = lo
                            int hi,            // fence = hi+1
                            const <T&> initval,// fill with initval,
                            int ch_size = 0);  // csize= ch_size
                                               // or fence-lo if 0

                   <T>RPlex(const <T>RPlex&);

  inline                  ~<T>RPlex();

  void             operator= (const <T>RPlex&);

// virtuals

  inline <T>&             high_element ();
  inline <T>&             low_element ();

  inline const <T>&       high_element () const;
  inline const <T>&       low_element () const;

  inline Pix              first() const;
  inline Pix              last() const;
  inline void             prev(Pix& ptr) const;
  inline void             next(Pix& ptr) const;
  int              owns(Pix p) const;
  inline <T>&             operator () (Pix p);
  inline const <T>&       operator () (Pix p) const;

  inline int              low() const; 
  inline int              high() const;
  inline int              valid(int idx) const;
  inline void             prev(int& idx) const;
  inline void             next(int& x) const;
  inline <T>&             operator [] (int index);
  inline const <T>&       operator [] (int index) const;
    
  inline int              Pix_to_index(Pix p) const;
  inline Pix              index_to_Pix(int idx) const;    

  inline int              can_add_high() const;
  inline int              can_add_low() const;
  inline int              full() const;

  int              add_high(const <T&> elem);
  int              del_high ();
  int              add_low (const <T&> elem);
  int              del_low ();

  void             fill(const <T&> x);
  void             fill(const <T&> x, int from, int to);
  void             clear();
  void             reverse();

  int              reset_low(int newlow);
    
  int              OK () const; 
};


inline void <T>RPlex::prev(int& idx) const
{
  --idx;
}

inline void <T>RPlex::next(int& idx) const 
{
  ++idx;
}

inline  int <T>RPlex::full ()  const
{
  return 0;
}

inline int <T>RPlex::can_add_high() const
{
  return 1;
}

inline int <T>RPlex::can_add_low() const
{
  return 1;
}

inline  int <T>RPlex::valid (int idx) const
{
  return idx >= lo && idx < fnc;
}

inline int <T>RPlex::low() const
{
  return lo;
}

inline int <T>RPlex::high() const
{
  return fnc - 1;
}

inline void <T>RPlex::set_cache(const <T>IChunk* t) const
{
  ((<T>RPlex*)(this))->ch = (<T>IChunk*)t;
}

inline void <T>RPlex::cache(int idx) const
{
  if (idx < lo || idx >= fnc) index_error();
  set_cache(chunks[(idx - base) / csize]);
}  

inline  <T>& <T>RPlex::low_element () 
{
  cache(lo); return *(ch->pointer_to(lo));
}

inline  <T>& <T>RPlex::high_element ()
{
  cache(fnc-1); return *(ch->pointer_to(fnc - 1));
}

inline const <T>& <T>RPlex::low_element () const
{
  cache(lo); return *((const <T>*)(ch->pointer_to(lo)));
}

inline const <T>& <T>RPlex::high_element () const
{
  cache(fnc-1); return *((const <T>*)(ch->pointer_to(fnc - 1)));
}

inline  int <T>RPlex::Pix_to_index(Pix px) const
{
  <T>* p = (<T>*)px;
  if (!ch->actual_pointer(p)) cache(p);
  return ch->index_of(p);
}

inline  Pix <T>RPlex::index_to_Pix(int idx) const
{
  if (!ch->actual_index(idx)) cache(idx);
  return (Pix)(ch->pointer_to(idx));
}

inline Pix <T>RPlex::first() const
{
  return Pix(hd-><T>IChunk::first_pointer());
}

inline Pix <T>RPlex::last() const
{
  return Pix(tl()-><T>IChunk::last_pointer());
}

inline void <T>RPlex::prev(Pix& p) const
{
  Pix q = Pix(ch-><T>IChunk::pred((<T>*)p));
  p = (q == 0)? Pix(dopred((<T>*)p)) : q;
}

inline void <T>RPlex::next(Pix& p) const
{
  Pix q = Pix(ch-><T>IChunk::succ((<T>*)p));
  p = (q == 0)? Pix(dosucc((<T>*)p)) : q;
}

inline <T>& <T>RPlex:: operator () (Pix p)
{
  return *((<T>*)p);
}


inline <T>& <T>RPlex:: operator [] (int idx)
{
  cache(idx); return *(ch->pointer_to(idx));
}

inline const <T>& <T>RPlex:: operator () (Pix p) const
{
  return *((const <T>*)p);
}

inline const <T>& <T>RPlex:: operator [] (int idx) const
{
  cache(idx); return *((const <T>*)(ch->pointer_to(idx)));
}

inline <T>RPlex::~<T>RPlex()
{
  delete chunks;
}

#endif
