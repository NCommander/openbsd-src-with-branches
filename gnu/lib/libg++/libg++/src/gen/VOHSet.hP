// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)
     based on code by Doug Schmidt

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T>VOHSet_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>VOHSet_h 1

#include "<T>.Set.h"



class <T>VOHSet : public <T>Set
{
  <T>*                  tab;
  char*                 status;
  int                   size;
  int                   cnt; // keeps track of VALIDCELLs and DELETEDCELLs

public:
                        <T>VOHSet(int sz = DEFAULT_INITIAL_CAPACITY);
                        <T>VOHSet(<T>VOHSet&);
  inline                       ~<T>VOHSet();

  Pix           add(<T&> item);
  void          del(<T&> item);
  inline int           contains(<T&> item);

  void          clear();

  Pix           first();
  void          next(Pix& i);
  inline <T>&          operator () (Pix i);
  Pix           seek(<T&> item);

  void          operator |= (<T>VOHSet& b);
  void          operator -= (<T>VOHSet& b);
  void          operator &= (<T>VOHSet& b);

  int           operator == (<T>VOHSet& b);
  int           operator != (<T>VOHSet& b);
  int           operator <= (<T>VOHSet& b); 

  int           capacity();
  void          resize(int newsize = 0);

  int           OK();
};


inline <T>VOHSet::~<T>VOHSet()
{
  delete [] tab;
  delete status;
}


inline int <T>VOHSet::contains(<T&>  key)
{
  return seek(key) != 0;
}


inline <T>& <T>VOHSet::operator () (Pix p)
{
  if (p == 0) error("null Pix");
  return *((<T>*)p);
}

#endif
