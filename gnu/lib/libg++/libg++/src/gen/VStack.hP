// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T>VStack_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>VStack_h 1

#include "<T>.Stack.h"

class <T>VStack : public <T>Stack
{
protected:
  int                   size;
  int                   ptr;
  <T>*                  s;

public:

                        <T>VStack(int sz = DEFAULT_INITIAL_CAPACITY);
                        <T>VStack(<T>VStack&);
  inline                       ~<T>VStack();

  void                  operator = (<T>VStack&);
  inline void                  push(<T&> item);
  inline <T>                   pop();
  inline <T>&                  top();
  inline void                  del_top();

  inline int                   length();
  inline int                   empty();
  inline int                   full();
  inline void                  clear();

  void                  resize(int sz);
  int                   capacity();

  int                   OK();
};


inline <T>VStack::<T>VStack(int sz)
{
  s = new <T> [size = sz];
  ptr = 0;
}

inline <T>VStack::~<T>VStack()
{
  delete [] s;
}

inline void <T>VStack::clear()
{
  ptr = 0;
}

inline int <T>VStack::capacity()
{
  return size;
}

inline int <T>VStack::empty()
{
  return ptr == 0;
}

inline int <T>VStack::full()
{
  return ptr == size;
}

inline int <T>VStack::length()
{
  return ptr;
}

inline void <T>VStack::push(<T&> item)
{
  if (full()) error("push to full stack.");
  s[ptr++] = item;
}

inline <T> <T>VStack::pop()
{
  if (empty()) error("pop from empty stack.");
  return s[--ptr];
}


inline void <T>VStack::del_top()
{
  if (empty()) error("del_top from empty stack.");
  --ptr;
}

inline <T>& <T>VStack::top()
{
  if (empty()) error("top from empty stack.");
  return s[ptr-1];
}

#endif
