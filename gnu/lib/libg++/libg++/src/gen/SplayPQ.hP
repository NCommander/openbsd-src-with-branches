// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)

This file is part of the GNU C++ Library.  This library is free
software; you can redistribute it and/or modify it under the terms of
the GNU Library General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.  This library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU Library General Public License for more details.
You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/


#ifndef _<T>SplayPQ_h
#ifdef __GNUG__
#pragma interface
#endif
#define _<T>SplayPQ_h 1

#include "<T>.PQ.h"
#include "<T>.SplayNode.h"

class <T>SplayPQ : public <T>PQ
{
protected:
  <T>SplayNode*   root;

  <T>SplayNode*   leftmost();
  <T>SplayNode*   rightmost();
  <T>SplayNode*   pred(<T>SplayNode* t);
  <T>SplayNode*   succ(<T>SplayNode* t);
  void            _kill(<T>SplayNode* t);
  <T>SplayNode*   _copy(<T>SplayNode* t);

public:
                  <T>SplayPQ();
                  <T>SplayPQ(<T>SplayPQ& a);
  inline virtual       ~<T>SplayPQ();

  Pix           enq(<T&> item);
  <T>           deq(); 

  <T>&          front();
  void          del_front();

  inline int           contains(<T&> item);

  inline void          clear(); 

  inline Pix           first(); 
  Pix           last(); 
  inline void          next(Pix& i);
  void          prev(Pix& i);
  inline <T>&          operator () (Pix i);
  void          del(Pix i);
  Pix           seek(<T&> item);

  int           OK();                    // rep invariant
};


inline <T>SplayPQ::~<T>SplayPQ()
{
  _kill(root);
}

inline <T>SplayPQ::<T>SplayPQ()
{
  root = 0;
  count = 0;
}

inline <T>SplayPQ::<T>SplayPQ(<T>SplayPQ& b)
{
  count = b.count;
  root = _copy(b.root);
}

inline Pix <T>SplayPQ::first()
{
  return Pix(leftmost());
}

inline Pix <T>SplayPQ::last()
{
  return Pix(rightmost());
}

inline void <T>SplayPQ::next(Pix& i)
{
  if (i != 0) i = Pix(succ((<T>SplayNode*)i));
}

inline void <T>SplayPQ::prev(Pix& i)
{
  if (i != 0) i = Pix(pred((<T>SplayNode*)i));
}

inline <T>& <T>SplayPQ::operator () (Pix i)
{
  if (i == 0) error("null Pix");
  return ((<T>SplayNode*)i)->item;
}

inline void <T>SplayPQ::clear()
{
  _kill(root);
  count = 0;
  root = 0;
}

inline int <T>SplayPQ::contains(<T&> key)
{
  return seek(key) != 0;
}

#endif
