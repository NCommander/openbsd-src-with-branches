test_h
Could include all g++-include files
tFile
Hello, world via cout
Hello, world via cerr
enter a char:
c = "a"
enter three integers (short, int, long):
first  = 123 via dec =      123
second = 4567 via form = 4567 = 010727 via cout.form = 4567 = 0x11d7
third  = 89012 via hex = 15bb4
enter a float then a double:
first  = 123.456
second = -0.012
enter 5 characters separated with spaces:
first  = 1
rest   =  2 3 4 5

Making streams sout and sin...contents of file:
Thisfilehasonelinetestingoutputstreams.
Making File tf ... first line of file:
This is the first and only line of this file.
next char = 10
reopening tempfile, appending: Now there is a second line.
First 10 chars via raw system read after reopen for input:
This is th
Contents after raw lseek to pos 5:
is the first and only line of this file.
Now there is a second line.

Making SFile rf...odd elements of file in reverse order:
(i = 9 c = j d = 0.009)
(i = 7 c = h d = 0.007)
(i = 5 c = f d = 0.005)
(i = 3 c = d d = 0.003)
(i = 1 c = b d = 0.001)

Making PlotFile pf ...(You may delete or attempt to plot plot.out)
creating o
strstream...
with contents:
This is a string-based stream.
With two lines.
using it to create istrstream...
with contents:
This is a string-based stream.
With two lines.

Making filebuf streams fout and fin...contents of file:
Thisfilehasonelinetestingoutputstreams.

Final names & states:
cin:      (stdin)	0
cout:     (stdout)	0
cerr:     (stderr)	0

end of test.
tObstack
enter anything at all, end with an EOF(^D)

unique words:
deleted
redundant
with
this
in
words
the
list
simply
should
program
The
Obstacks
for
file
test
simple
a
is
This


Obstack vars:
alignment_mask = 3
chunk_size = 4080
size = 0
room = 4056

end of test
tString
an empty String:
A string initialized to Hello:Hello
A string initialized to previous string:Hello
A string initialized to previous string.at(1, 2):el
A string initialized to @:@
A string initialized to dec(20):20
n = 20 atoi(n) = 20 atof(n) = 20
z = x + y = Helloworld
x += y; x = Helloworld
y.prepend(x); y = Helloworld
cat(x, y, x, x); x = HelloworldHello
cat(y, x, x, x); x = worldHelloHello
z = x + s +  + y.at(w) + y.after(w) + . = Hello, world.
ch = x[0] = H
z = x.at(2, 3) = llo
x.at(2, 2) = r; x = Hero
x.at(0, 1) = j; x = jello
x.at(He) = je; x = jello
x.at(l, -1) = i; x = Helio
z = x.at(r) = ello
z = x.before(o) = Hell
x.before(ll) = Bri; x = Brillo
z = x.before(2) = He
z = x.after(Hel) = lo
x.after(Hel) = p; x = Help
z = x.after(3) = o
z =   a bc; z = z.after(RXwhite); z =a bc
x.gsub(l, ll); x = Hellllo
x.gsub(r, ...); x = Hello should have been replaced by this string
x.gsub(RXwhite, #); x = Hello#should#have#been#replaced#by#this#string
z = x+y; z.del(loworl); z = Held
reverse(x) = olleH
x.reverse() =
 olleH
upcase(x) = HELLO
downcase(x) = hello
capitalize(x) = Hello
z = replicate(*, 10) = **********
z = This string	has
five words
from split(z, RXwhite, w, 10), n words = 5:
This
string
has
five
words
z = join(w, nw, /); z =This/string/has/five/words
enter a word:
word =abcdefghijklmnopqrstuvwxyz length = 26

End of test
tInteger
one = 1
one + 1 = 2
two = 2
fact30 = factorial(30) = 265252859812191058636308480000000
fact28 = factorial(28) = 304888344611713860501504000000
fact30 + fact28 = 265557748156802772496809984000000
fact30 - fact28 = 264947971467579344775806976000000
fact30 * fact28 = 80872505331661933764010628483512781121876047953920000000000000
fact30 / fact28 = 870
fact30 % fact28 = 0
-fact30 = -265252859812191058636308480000000
lg(fact30) = 107
gcd(fact30, fact28) = 304888344611713860501504000000
sqrt(fact30) = 16286585271694955
negfact31 = -8222838654177922817725562880000000
fact30 + negfact31 = -7957585794365731759089254400000000
fact30 - negfact31 = 8488091513990113876361871360000000
fact30 * negfact31 = -2181131468794922353615366650200339706856997013317222400000000000000
fact30 / negfact31 = 0
fact30 % negfact31 = 265252859812191058636308480000000
gcd(fact30, negfact31) = 265252859812191058636308480000000
fib50 = fibonacci(50) = 12586269025
fib48 = fibonacci(48) = 4807526976
fib48 + fib50 = 17393796001
fib48 - fib50 = -77
78742049
fib48 * fib50 = 60508827864880718400
fib48 / fib50 = 0
fib48 % fib50 = 4807526976
gcd(fib50, fib48) = 1
sqrt(fib50) = 112188
pow64 = Ipow(2, 64) = 18446744073709551616
lg(pow64) = 64
s64 = 1 << 64 = 18446744073709551616
s32 = s64 >> 32 = 4294967296
comps64 = ~s64 = 18446744073709551615
comps64 & s32 = 4294967296
comps64 | s32 = 18446744073709551615
comps64 ^ s32 = 18446744069414584319

enter an Integer: 
number = 12345678901234567890

End of test
tRational
one = 1
third = 1/3
half = 1/2
third + half = 5/6
third - half = -1/6
third * half = 1/6
third / half = 2/3
onePointTwo = 21617278211378381/18014398509481984
double(onePointTwo) = 1.2
a = 1
a += half = 3/2
a -= half = 1
a *= half = 1/2
a /= half = 1
approxpi = 355/113
double(approxpi) = 3.14159
rpi = Rational(PI) = 28296951008113761/9007199254740992
double(rpi) = 3.14159
approxpi + rpi = 6395111199349907153/1017813515785732096
approxpi - rpi = 271516197167/1017813515785732096
approxpi * rpi = 10045417607880385155/1017813515785732096
approxpi / rpi = 3197555735433052160/3197555463916854993
-approxpi = -355/113
abs(negapproxpi) = 355/113

enter a Rational in form a/b or a: 
number = 61727839/49382716
approximating e as pow(1+1/n),n) for n =10
double(approxe) = 2.59374
log(approxe) = 0.953102
approxe = 25937424601/10000000000
approximating e as pow(1+1/n),n) for n =100
double(approxe) = 2.70481
log(approxe) = 0.995033
approxe = 27048138294215260932671947108075308336779383827810027768902010491171015143067392794394
5601434674459097335651375483564268312519281766832427980496322329650055217977882315938008175933291885667484249510001/10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000
approximating e as pow(1+1
/n),n) for n =1000
double(approxe) = 2.71692
log(approxe) = 0.9995
approxe = 271692393223589245738308812194757718896431501883657280372235477486889494552376815899788569729866142905342103401540625692485946118761765388945775359308338639957206353850043265017614448804617104484412180547960764808660701874207779837508785585701227
805310504270475882251
1824867218226931719410407150364389665913091822576819072281835735365786202176167228686198158460724641052407506305826211156964723064441295969498221919251479211700941935114755531972677360157561485144237786816579422141378066423317811515462669946309306263409027
3889159310822268542648586614208782799835344241286724612063568474638213646305043596651715
7363539734603727475241036817487743394123454315351110047165147286911606852847897691660058538349718017239557392478904798956371431895753649310804159146091161207869846173908474193444244870141657548326389152909515801323311564853415408600931219048916854602439883
4243847135102411661996020129557921444666343641039137906807591342742464200991933722791531
0632026776505819463604220277656459701824637802731611130097175821554899026770950533542079447724392716564478699218259590428013227757290224914020120846053677844560908929876825478113604817317959806378475517882593842439973411907530893433872017538213604054303103
2056448874114212008946036898659013632473745937296366658653244357047417935265651763533374
4783401695951969936296323256525034685525470426185224036844803487442831639483152362831735350269624668701702424450940840884555271325190876102665277858154695092765613639718577127438538649414492678358762110235621776218781360881010654696273264706319088453035858
3550529888085077754395613852326523053162877056534367276476814056183237572010229468011187
7014807242402138526182959424836989017158399314793404423279251711874339321727641617984209755449426901225132913478359603773397347830618825529148435238469987142047271142307958631904183756367849847277942228226102474439484455873837802710569969126008653263293094
1478779680554645850778168703661423819000515895232903243738763481571999080702098369316199
6019422462478878083850738218615176368399269074581846046489420363552566832192181299104228221773367852686272744820374762943414445622071972095036595182662104327910782483210154532180195866086962072952991831119631585641624191527428074373462416676716884669982444
2472676583768215160623063811165475659591701920645397802415709704254693734567333717916524
2325399648121877178987723999503839197328183925340949191821443698275476295245249466361817367207248089144718808572152781037112209285944844021186534832159964297181970584453756163204297111185823467744743465840230098261424789313315093951766314459027947176701489
2157468843634269615773483846518871531406096163629273381076867944999749025815798970761727
1654150429433430074144410674999471571341963068871945136265828881213205685480733082705050506471444261824310101881215356379553902437021996780151509997072192624062541851241794085476041556622974624897375629756945230282156346757431325906601608952112277920484487
5998864114930516063910324359331903843040069467324167490917499501000001/10000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

End of test
tComplex
Complex one = (1, 0)
i = (0, 1)
neg_one = (-1, 0)
sqrt(neg_one) = (0, 1)
a = (2, 3)
b = (4, 5)
a + one = (3, 3)
a - one = (1, 3)
a * one = (2, 3)
a / one = (2, 3)
a + b = (6, 8)
a - b = (-2, -2)
a * b = (-7, 22)
a / b = (0.560976, 0.0487805)
c = a; c += b = (6, 8)
c = a; c -= b = (-2, -2)
c = a; c *= b = (-7, 22)
c = a; c /= b = (0.560976, 0.0487805)
-a = (-2, -3)
real(a) = 2
imag(a) = 3
conj(a) = (2, -3)
norm(a) = 13
abs(a) = 3.60555
arg(a) = 0.982794
cos(a) = (-4.18963, -9.10923)
sin(a) = (9.1545, -4.16891)
cosh(a) = (-3.72455, 0.511823)
sinh(a) = (-3.59056, 0.530921)
log(a) = (1.28247, 0.982794)
exp(a) = (-7.31511, 1.04274)
sqrt(a) = (1.67415, 0.895977)
pow(a, 2) = (-5, 12)
pow(a, b) = (-0.753046, -0.986429)
enter a Complex number in form (a, b) or (a) or a: 
number = (1.2, -34)

End of test
tBitSet
BitSet tests:
a = 0*
b = 000000000010*
c = 1010101010101010101010101010101010101010*
c[0] =1
c[1] =0
c[2] =1
c[3] =0
c[4] =1
d = 00110011001100110011001100110011001100110*
e = 1111000011110000111100001111000011110*
u = ~a = 1*
g = ~e = 0000111100001111000011110000111100001*
~c = 0101010101010101010101010101010101010101*
c & d = 0010001000100010001000100010001000100010*
c | d = 10111011101110111011101110111011101110110*
c - d = 10001000100010001000100010001000100010*
c ^ d = 10011001100110011001100110011001100110010*
f = b = 100000000010*
f &= c = 100000000010*
f |= d = 10110011001100110011001100110011001100110*
f -= e = 00000011000000110000001100000011000000110*
f ^= u = 11111100111111001111110011111100111111001*
h = d
:00110011001100110011001100110011001100110*
h.set(0):
10110011001100110011001100110011001100110*
h.set(65):
1011001100110011001100110011001100110011000000000000000000000000010*
h.clear(2):
1001001100110011001100110011001100110011000000000000000000000000010*
h.invert(11,20):
10010011001011001100
10110011001100110011000000000000000000000000010*
h.set(21,30):
1001001100101100110011111111111100110011000000000000000000000000010*
h.clear(31, 40):
1001001100101100110011111111111000000000000000000000000000000000010*
h.test(0,5) = 1
h.test(31,40) = 0
set bits in e:
0 1 2 3 8 9 10 11 16 17 18 19 24 25 26 27 32 33 34 35 
clear bits in g (reverse order):
35 34 33 32 27 26 25 24 19 18 17 16 11 10 9 8 3 2 1 0 

End of test.
tBitString
a      = 
b      = 1000000001
c      = 10101010101010101010
d      = 00110011001100110011
e      = 11110000111100001111
f = b  = 1000000001
g = ~e = 00001111000011110000
h = d  = 00110011001100110011
bits in e:
0 1 2 3 8 9 10 11 16 17 18 19 
clear bits in g (reverse order):
19 18 17 16 11 10 9 8 3 2 1 0 
~c     = 01010101010101010101
c & d  = 00100010001000100010
c | d  = 10111011101110111011
c - d  = 10001000100010001000
c ^ d  = 10011001100110011001
c + d  = 1010101010101010101000110011001100110011
c <<2  = 0010101010101010101010
c >>2  = 101010101010101010
f &= c = 1000000000
f |= d = 10110011001100110011
f -= e = 10000000000000000000
f ^= c = 00101010101010101010
f += b = 001010101010101010101000000001
f <<=5 = 00000001010101010101010101000000001
f >>=10= 0101010101010101000000001
l = 101010101010101010100011001100110011001110101010101010101010
BitPattern pat = 0011XXXX0011XXXX0011
pat.pattern    = 00110011001100110011
pat.mask       = 11110000111100001111
l.index(pat)   = 20
l.index(pat,-1)= 20
l.before(
pat)  = 10101010101010101010
l.at(pat)      = 00110011001100110011
l.after(pat)   = 10101010101010101010
b.set(0)       :1000000001
b.set(65):
100000000100000000000000000000000000000000000000000000000000000001
b.clear(2):
100000000100000000000000000000000000000000000000000000000000000001
b.invert(11,20):
100000000100111111111000000000000000000000000000000000000000000001
b.set(21,30):
100000000100111111111111111111100000000000000000000000000000000001
b.clear(31, 40):
100000000100111111111111111111100000000000000000000000000000000001
b.set(0)       :10110011001100110011
b.set(65):
101100110011001100110000000000000000000000000000000000000000000001
b.clear(2):
100100110011001100110000000000000000000000000000000000000000000001
b.invert(11,20):
100100110010110011001000000000000000000000000000000000000000000001
b.set(21,30):
100100110010110011001111111111100000000000000000000000000000000001
b.clear(31, 40):
100100110010110011001111111111100000000000000000000000000000000001
k = 0101
c.before(k) = 1
c.at(k)     = 0101

c.after(k)  = 010101010101010
c.after(k)=k :101010101
c.before(k)=k:010101010101
reverse(k)           = 1010
k.left_trim(0)       : 101
k.right_trim(1)      : 10
k = 0110
c.before(k) = 0
c.at(k)     = 0110
c.after(k)  = 011001100110011
c.after(k)=k :001100110
c.before(k)=k:011001100110
reverse(k)           = 0110
k.left_trim(0)       : 110
k.right_trim(1)      : 110

End of test.
tRandom
five random ACG integers:
1525072166 1954057046 3406008937 226879594 4107049426 
five random MLCG integers:
1341853672 83475514 936613571 888739672 2097844081 
Binomial r1( 100, 0.50, &gen1) ...
five samples:
57 46 52 61 56 
Statistics for 100 samples:
samples: 100 min: 40 max: 62
mean: 50.53 stdDev: 5.01 var: 25.1001 confidence(95): 0.994319
Erlang r2( 2.0, 0.5, &gen1) ...
five samples:
1.27721 1.70393 2.3407 1.15325 2.09453 
Statistics for 100 samples:
samples: 100 min: 0.771934 max: 3.80676
mean: 2.05519 stdDev: 0.650616 var: 0.423302 confidence(95): 0.129126
Geometric r3(&gen1, 0.5)...
five samples:
1 1 1 1 2 
Statistics for 100 samples:
samples: 100 min: 1 max: 7
mean: 2.07 stdDev: 1.63457 var: 2.67182 confidence(95): 0.324408
HyperGeometric r4( 10.0, 150.0, &gen1)...
five samples:
2.13048 0.104043 1.31297 6.57471 0.101734 
Statistics for 100 samples:
samples: 100 min: 0.101734 max: 62.1168
mean: 11.4967 stdDev: 13.067 var: 170.746 confidence(95): 2.59336
NegativeExpntl r5( 1.0, &gen1)...
five samples:
0
.602235 0.455596 0.384398 1.17291 1.02726 
Statistics for 100 samples:
samples: 100 min: 0.0197259 max: 3.73061
mean: 0.917305 stdDev: 0.861547 var: 0.742263 confidence(95): 0.170988
Normal r6( 0.0, 1.0, &gen1)...
five samples:
-1.07586 -0.118719 -0.87357 -0.418734 1.00821 
Statistics for 100 samples:
samples: 100 min: -2.60171 max: 2.12323
mean: -0.0300151 stdDev: 0.962241 var: 0.925907 confidence(95): 0.190973
LogNormal r7( 1.0, 1.0, &gen1)...
five samples:
1.6929 0.274591 0.650784 0.367421 0.707629 
Statistics for 100 samples:
samples: 100 min: 0.0809301 max: 4.92198
mean: 1.0507 stdDev: 0.931829 var: 0.868306 confidence(95): 0.184937
Poisson r8( 2.0, &gen1)...
five samples:
2 7 4 3 3 
Statistics for 100 samples:
samples: 100 min: 0 max: 8
mean: 2.06 stdDev: 1.68067 var: 2.82465 confidence(95): 0.333557
DiscreteUniform r9( 0.0, 1.0, &gen1)...
five samples:
0 1 1 1 1 
Statistics for 100 samples:
samples: 100 min: 0 max: 1
mean: 0.53 stdDev: 0.501614 var: 0.251616 confidence(95): 0.0995536
Uniform r10( 0.0, 
1.0, &gen1)...
five samples:
0.594603 0.891786 0.0816672 0.38546 0.787308 
Statistics for 100 samples:
samples: 100 min: 0.00230213 max: 0.990595
mean: 0.486712 stdDev: 0.311104 var: 0.0967857 confidence(95): 0.0617438
Weibull r11( 0.5, 1.0, &gen1)...
five samples:
0.808854 0.0040815 2.51041 0.10183 0.511513 
Statistics for 100 samples:
samples: 100 min: 3.03027e-07 max: 31.2816
mean: 2.38949 stdDev: 5.468 var: 29.899 confidence(95): 1.08522
SampleHistogram for 100 Normal samples
< -4 : 0
< -3.2 : 0
< -2.4 : 0
< -1.6 : 6
< -0.8 : 22
< -2.77556e-17 : 31
< 0.8 : 18
< 1.6 : 18
< 2.4 : 5
< 3.2 : 0
< 4 : 0
< max : 0

End of test
tFix
Fix: identities should be displayed
[X] displays the precision of a given value
[*] indicates that the full precision is not used for coding reasons
0 [16] =  0.00000 [16]
.5 [16] =  0.50000 [16]
-.5 [17] = -0.50000 [17]
.1 [33] =  0.10000 [33]
-.5 [17] = -0.50000 [17]
.3 [16] =  0.29999 [16]
.5 [16] =  0.50000 [16]
.1 [16] =  0.09998 [16]
.1 [33*] =  0.09998 [33]
-.2 [17] = -0.20001 [17]
-.5 [17] = -0.50000 [17]
.1 [16] == .1 [33*] = 1
.1 [16] == .1 [33] = 0
.1 [33] != .5 [16] = 1
.1 [33] > .5 [16] = 0
.1 [33] <= -.2 [17] = 0
1073741824 = 1.07374e+09
.5 = 0.5
.5 [17] =  0.50000 [17]
-.5 [17] = -0.50000 [17]
.1 [33] + .5 [16] =  0.60000 [33]
.1 [33] - .5 [16] = -0.40000 [33]
.1 [33] * .5 [16] =  0.05000 [49]
.1 [33] *  3 =  0.30000 [33]
.1 [33] * -3 = -0.30000 [33]
-.1 [33] *  3 = -0.30000 [33]
-.1 [33] * -3 =  0.30000 [33]
.5 [17] * -2 = -1.00000 [17]
.1 [33] % 25 =  0.10000 [58]
.1 [33] % -25 =  0.09375 [8]
.1 [33] / .5 [16] =  0.20001 [33]
.1 [33] << 1 =  0.20000 [33]
-.1 [33] >> 2 =  0.47500 [33]
abs(-.2)
 =  0.20001 [17]
abs(.2) =  0.20001 [17]
sgn(-.2) = -1
sgn(.2) = 1

show .1 [33]
len = 33
siz = 3
ref = 1
man =  ccccccc8000
val = 0.1

Fix: range errors warned
Fix: range error in 
declaration

1.1 [16] =  0.00000 [16]
Fix: range error in 
division

.5 [16] / .1 [33] =  0.00000 [16]
Fix: range error in 
division -- division by zero

.5 [16] / 0. [16] =  0.00000 [16]
Fix: range error in 
multiply by int -- int too large

.5 [17] * 32768 = -1.00000 [17]

Fix: overflows saturated
.95 [16] + .1 [33] =  1.00000 [33]
-.1 [33] - .95 [16] = -1.00000 [33]
.5 [17] * 2 =  0.99998 [17]

Fix: overflows generate warnings
Fix: overflow warning
.95 [16] + .1 [33] = -0.94999 [33]
Fix: overflow warning
-.1 [33] - .95 [16] =  0.94999 [33]
Fix: overflow warning
.5 [17] * 2 = -0.49994 [17]
tFix16
Fix16: identities should be displayed
0 = 0
.5 = 0.5
-.5 = -0.5
.1 = 0.100006
.5 = 0.5
.5 = 0.5
.25 = 0.25
8192 = 8192
.25 = 0.25
.25 = 0.25
.25 = 0.25
-.25 = -0.25
.1 + .5 = 0.600006
.1 - .5 = -0.399994
.1 * .5 = 0.0500031
.1 *  3 = 0.300018
.1 * -3 = -0.300018
.1 / .5 = 0.200012
.1 << 1 = 0.200012
-.5 >> 2 = -0.125
.1 == .5 = 0
.1 != .5 = 1
.1 > .5 = 0
.5 <= -.5 = 0
Fix16: range errors ignored and overflows saturated
1.1 = 0.999969
.7 + .5 = 0.999969
-.5 - .7 = -1
.5 / .1 = 0.999969
Fix32: identities should be displayed
0 = 0
.5 = 0.5
-.5 = -0.5
.1 = 0.1
.5 = 0.5
.5 = 0.5
.25 = 0.25
536870912 = 536870912
.25 = 0.25
.25 = 0.25
.25 = 0.25
-.25 = -0.25
.1 + .5 = 0.6
.1 - .5 = -0.4
.1 * .5 = 0.05
.1 *  3 = 0.3
.1 * -3 = -0.3
.1 / .5 = 0.2
.1 << 1 = 0.2
-.5 >> 2 = -0.125
.1 == .5 = 0
.1 != .5 = 1
.1 > .5 = 0
.5 <= -.5 = 0
Fix32: range errors reported and overflows reported
warning: Fix32 result out of range
1.1 = 1
warning: Fix32 result out of range
.7 + .5 = -0.8
warning: Fix32 result out of range
-.5 - .7 = 0.8
warning: Fix32 result out of range
.5 / .1 = 1
tFix24
Fix24: identities should be displayed
0 = 0
.5 = 0.5
-.5 = -0.5
.1 = 0.1
.5 = 0.5
.5 = 0.5
.25 = 0.25
536870912 = 536870912
.25 = 0.25
.25 = 0.25
.25 = 0.25
-.25 = -0.25
.1 + .5 = 0.6
.1 - .5 = -0.4
.1 * .5 = 0.05
.1 *  3 = 0.3
.1 * -3 = -0.3
.1 / .5 = 0.2
.1 << 1 = 0.2
-.5 >> 2 = -0.125
.1 == .5 = 0
.1 != .5 = 1
.1 > .5 = 0
.5 <= -.5 = 0
Fix24: range errors ignored and overflows saturated
1.1 = 1
.7 + .5 = 1
-.5 - .7 = -1
.5 / .1 = 1
Fix48: identities should be displayed
0 = 0
.5 = 0.5
-.5 = -0.5
.1 = 0.1
.5 = 0.5
.5 = 0.5
.25 = 0.25
536870912 = 536870912
0 = 0
.25 = 0.25
.25 = 0.25
.25 = 0.25
-.25 = -0.25
.1 + .5 = 0.6
.1 - .5 = -0.4
.1 *  3 = 0.3
.1 * -3 = -0.3
.1 << 1 = 0.2
-.5 >> 2 = -0.125
.1 == .5 = 0
.1 != .5 = 1
.1 > .5 = 0
.5 <= -.5 = 0
Fix48: range errors reported and overflows reported
warning: Fix48 result out of range
1.1 = 1
warning: Fix48 result out of range
.7 + .5 = -0.8
warning: Fix48 result out of range
-.5 - .7 = 0.8
tGetOpt
tList

intList a = sequence(1, 20);
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 

intList b = randseq(20);
22 14 21 22 31 29 36 49 9 34 19 10 44 41 19 45 7 28 12 32 

intList c = concat(a, b);
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 22 14 21 22 31 29 36 49 9 34 19 10 44 41 19 45 7 28 12 32 

intList d = map(inc, a);
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 

intList e = reverse(a);
20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 

intList f = select(is_odd, a);
1 3 5 7 9 11 13 15 17 19 

int  red = a.reduce(plus, 0);
210
int second = a[2];
3
intList g = combine(plus, a, b);
23 16 24 26 36 35 43 57 18 44 30 22 57 55 34 61 24 46 31 52 

g.del(is_odd);
16 24 26 36 18 44 30 22 34 24 46 52 

b.sort(int_compare);
7 9 10 12 14 19 19 21 22 22 28 29 31 32 34 36 41 44 45 49 

intList h = merge(a, b, int_compare);
1 2 3 4 5 6 7 7 8 9 9 10 10 11 12 12 13 14 14 15 16 17 18 19 19 19 20 21 22 22 28 29 31 32 34 36 41 44 45 49 

h via Pix:
1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 
14, 15, 16, 17, 18, 19, 19, 19, 20, 21, 22, 22, 28, 29, 31, 32, 34, 36, 41, 44, 45, 49, 

done
tPlex
FPtest
q:[-25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 ]
XPtest
p:[-25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 ]
MPtest
p:[-25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 ]
RPtest
p:[-25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 ]

end of tests
tLList
prepending...
a: 9 8 7 6 5 4 3 2 1 0 
appending...
a: 9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 
b = a: 
9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 
remove_front of first 10 elements:
b: 0 1 2 3 4 5 6 7 8 9 
inserting 100 after sixth element...
b: 0 1 2 3 4 5 100 6 7 8 9 
after a.join(b)
9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 100 6 7 8 9 
b: 

b: 
999 
bb: 
999 
prepending...
a: 
9 8 7 6 5 4 3 2 1 0 
appending...
a: 9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 
b = a: 9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 
remove_front of first 10 elements:
b: 0 1 2 3 4 5 6 7 8 9 
inserting 100 after sixth element...
b: 0 1 2 3 4 5 100 6 7 8 9 
after aa = a; aa.join(b)
9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 100 6 7 8 9 
b: 

b: 
999 
bb: 
999 
z = a: 9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 
remove_rear of last 10 elements:
z: 9 8 7 6 5 4 3 2 1 0 
inserting 100 before alternate elements...
z: 100 9 100 8 100 7 100 6 100 5 100 4 100 3 100 2 100 1 100 0 
inserting 200 after sixth element...
z: 100 9 100 8 100 7
 200 100 6 100 5 100 4 100 3 100 2 100 1 100 0 
deleting alternate elements of z...100 100 100 200 6 5 4 3 2 1 0 
z: 9 8 7 100 100 100 100 100 100 100 
z in reverse order:
100 100 100 100 100 100 100 7 8 9 

End of test
tVec
a: 72 14 71 72 81 29 86 49 59 84 69 10 94 41 69 95 57 78 62 82 
a.sort():10 14 29 41 49 57 59 62 69 69 71 72 72 78 81 82 84 86 94 95 
b = map(inc, a): 11 15 30 42 50 58 60 63 70 70 72 73 73 79 82 83 85 87 95 96 
c = merge(a, b): 10 11 14 15 29 30 41 42 49 50 57 58 59 60 62 63 69 69 70 70 71 72 72 72 73 73 78 79 81 82 82 83 84 85 86 87 94 95 95 96 
d = concat(a, b): 10 14 29 41 49 57 59 62 69 69 71 72 72 78 81 82 84 86 94 95 11 15 30 42 50 58 60 63 70 70 72 73 73 79 82 83 85 87 95 96 
d.resize(10): 10 14 29 41 49 57 59 62 69 69 
d.reverse(): 69 69 62 59 57 49 41 29 14 10 
d.fill(0, 4, 4): 69 69 62 59 0 0 0 0 14 10 
d.reduce(plus, 0) = 283
e = d.at(2, 5): 62 59 0 0 0 
x: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
y: 93 96 14 74 87 41 65 6 38 17 63 37 73 46 34 50 38 55 15 76 
x + y: 93 97 16 77 91 46 71 13 46 26 73 48 85 59 48 65 54 72 33 95 
x - y: -93 -95 -12 -71 -83 -36 -59 1 -30 -8 -53 -26 -61 -33 -20 -35 -22 -38 3 -57 
product(x, y): 0 96 28 222 348 205 390 42 304 153 630 407 876 598 476 750 608 935
 270 1444 
quotient(x, y): 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 
x * y: 8782
x + 2: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 
x - 2: -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
x * 2: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 
x / 2: 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 
z(20, 1): 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
z = -z: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
z += x: -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
z -= x: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
x.sum(): 190
x.sumsq(): 2470
x.min(): 0
x.max(): 19
x.min_index(): 0
x.max_index(): 19

End of test
tStack
XP stacks:
s1:[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
V stacks:
s1:[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
SL stacks:
s1:[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]

End of test
tQueue
XP queues:
q1:[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
V queues:
q1:[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
SL queues:
q1:[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]

End of test
tDeque
XP deques:
d1:[99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 ...]
DL deques:
d1:[99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 ...]

End of test
tPQ
Splaytest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
d: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
PHtest
a: [2 99 76 81 41 35 14 19 95 74 7 38 91 59 87 6 96 93 51 53 ...]
b: [129 5 191 71 147 17 139 193 1 47 199 33 121 103 37 167 145 67 51 43 ...]
c: [47 27 20 28 31 15 50 46 39 29 1 1 4 43 11 8 2 7 9 26 ...]
d: [2 99 76 81 41 35 14 19 95 74 7 38 91 59 87 6 96 93 51 53 ...]
XPtest
a: [1 3 2 7 4 5 18 29 12 6 10 8 17 21 26 34 36 15 16 19 ...]
b: [1 5 3 7 13 15 9 41 27 21 23 19 35 29 11 85 51 65 49 47 ...]
c: [1 2 1 3 5 2 8 4 5 6 14 3 9 11 10 7 15 12 6 28 ...]
d: [1 1 2 3 3 2 6 9 5 6 4 5 7 18 8 29 15 7 16 19 ...]
tSet
VHtest
a: [36 20 89 13 64 3 26 91 16 39 62 29 85 87 42 65 98 19 78 37 ...]
b: [53 167 185 13 123 3 135 193 69 39 181 85 151 183 131 173 101 19 197 87 ...]
c: [36 49 46 3 26 16 39 29 12 42 19 32 9 1 22 35 48 25 2 15 ...]
d: [89 13 93 3 55 39 29 85 21 65 19 23 91 9 71 81 41 35 63 17 ...]
VOHtest
a: [7 14 21 28 35 42 49 56 63 70 77 84 91 98 5 12 19 26 33 40 ...]
b: [7 163 21 133 35 49 63 129 77 159 91 181 105 137 119 5 185 19 197 33 ...]
c: [7 14 21 28 35 42 49 5 12 19 26 33 40 47 3 10 17 24 31 38 ...]
d: [7 21 35 49 63 77 91 5 19 33 47 61 75 89 3 17 31 45 59 73 ...]
CHtest
a: [72 36 85 49 13 3 98 62 26 16 75 39 29 88 52 42 6 65 55 19 ...]
b: [167 49 85 121 13 3 157 193 111 39 75 147 29 183 137 65 101 173 55 19 ...]
c: [36 13 49 3 26 16 39 29 6 42 19 32 45 9 22 35 12 48 25 38 ...]
d: [13 49 85 3 39 75 29 65 19 55 91 9 45 81 35 71 25 61 97 15 ...]
SLtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [3 197 151 161 81 69 27 37 189 147 13 75 181 117 173 11 191 185 101 105 ...]
c: [33 2 48 18 37 5 3
5 49 1 12 50 9 31 26 10 42 17 13 11 21 ...]
d: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
XPtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [3 197 151 161 81 69 27 37 189 147 13 75 181 117 173 11 191 185 101 105 ...]
c: [33 2 48 18 37 5 35 49 1 12 50 9 31 26 10 42 17 13 11 21 ...]
d: [51 13 53 27 55 7 57 29 59 15 61 31 63 1 65 33 67 17 69 35 ...]
OXPtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
d: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
OSLtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
d: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
BSTtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 3
9 ...]
c: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
d: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
AVLtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
d: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
Splaytest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
d: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
tBag
VHtest
a: [36 20 89 13 64 3 26 91 16 39 62 29 85 87 42 65 98 19 78 37 ...]
b: [53 167 185 13 123 3 135 193 69 39 181 85 151 183 131 173 101 19 197 87 ...]
c: [36 37 14 49 46 3 26 3 16 39 19 29 42 12 42 35 39 19 28 5 ...]
d: [72 46 77 13 31 3 26 62 16 39 11 29 52 42 42 65 78 55 78 93 ...]
CHtest
a: [72 36 85 49 13 3 98 62 26 16 75 39 29 88 52 42 6 65 55 19 ...]
b: [167 49 85 121 13 3 157 193 111 39 75 147 29 183 137 65 101 173 55 19 ...]
c: [36 36 49 13 13 49 3 3 26 26 16 16 39 39 29 29 6 42 6 42 ...]
d: [72 36 36 72 85 49 13 13 49 85 3 3 98 62 26 26 62 98 16 16 ...]
SLtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [3 197 151 161 81 69 27 37 189 147 13 75 181 117 173 11 191 185 101 105 ...]
c: [33 2 48 18 37 5 35 49 1 12 50 9 31 26 10 42 37 17 13 11 ...]
d: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
XPtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [3 197 151 161 81 69 27 37 189 147 13 75 181 117 173 11 191 185 101 105 ...]
c: [33 2 48 18 37 5 35 49 1 12 5
0 9 31 26 10 42 37 17 13 11 ...]
d: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
Splaytest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
d: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
OSLtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
d: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
OXPtest
a: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...]
b: [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...]
c: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
d: [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 ...]
tMap
Splaytest
a: [(1, 65) (2, 3) (3, 96) (4, 36) (5, 74) (6, 9) (7, 70) (8, 97) (9, 1) (10, 24) (11, 100) (12, 17) (13, 61) (14, 52) (15, 19) (16, 84) (17, 73) (18, 34) (19, 26) (20, 22) ...]
b: [(1, 9) (2, 31) (3, 2) (4, 32) (5, 62) (6, 30) (7, 87) (8, 98) (9, 6) (10, 49) (11, 44) (12, 47) (13, 50) (14, 76) (15, 56) (16, 57) (17, 12) (18, 54) (19, 15) (20, 83) ...]
c: [(1, 189) (2, 195) (3, 197) (4, 57) (5, 125) (6, 135) (7, 149) (8, 129) (9, 69) (10, 9) (11, 163) (12, 59) (13, 171) (14, 137) (15, 141) (16, 35) (17, 75) (18, 49) (19, 173) (20, 93) ...]
d: [(1, 1) (2, 2) (3, 3) (4, 4) (5, 5) (6, 6) (7, 7) (8, 8) (9, 9) (10, 10) (11, 11) (12, 12) (13, 13) (14, 14) (15, 15) (16, 16) (17, 17) (18, 18) (19, 19) (20, 20) ...]
VHtest
a: [(36, 25) (20, 22) (89, 56) (13, 61) (64, 49) (3, 96) (26, 63) (91, 55) (16, 84) (39, 54) (62, 5) (29, 50) (85, 92) (87, 7) (42, 94) (65, 47) (98, 8) (19, 26) (78, 91) (37, 33) ...]
b: [(36, 4) (20, 83) (34, 18) (85, 38) (68, 84) (3, 2) (26, 19) (14, 76) (16, 57) (39, 23) (62, 90) (29, 
53) (52, 14) (46, 34) (42, 21) (65, 1) (37, 73) (19, 15) (78, 95) (80, 86) ...]
c: [(36, 161) (20, 93) (34, 185) (85, 45) (68, 7) (3, 197) (26, 101) (14, 137) (16, 35) (39, 77) (62, 177) (29, 83) (52, 117) (46, 143) (42, 121) (65, 3) (37, 157) (19, 173) (78, 97) (80, 139) ...]
d: [(72, 72) (77, 77) (13, 13) (3, 3) (26, 26) (16, 16) (39, 39) (29, 29) (52, 52) (42, 42) (65, 65) (55, 55) (78, 78) (91, 91) (9, 9) (22, 22) (35, 35) (48, 48) (61, 61) (74, 74) ...]
CHtest
a: [(72, 66) (36, 25) (85, 92) (49, 10) (13, 61) (3, 96) (98, 8) (62, 5) (26, 63) (16, 84) (75, 51) (39, 54) (29, 50) (88, 81) (52, 32) (42, 94) (6, 9) (65, 47) (55, 45) (19, 26) ...]
b: [(72, 41) (36, 4) (49, 64) (13, 50) (85, 38) (3, 2) (62, 90) (98, 82) (26, 19) (16, 57) (75, 80) (39, 23) (29, 53) (88, 100) (52, 14) (6, 30) (42, 21) (65, 1) (55, 91) (19, 15) ...]
c: [(72, 53) (36, 161) (49, 67) (13, 171) (85, 45) (3, 197) (62, 177) (98, 95) (26, 101) (16, 35) (75, 25) (39, 77) (29, 83) (88, 47) (52, 117) (6, 135) (42, 121) (65, 3) (55, 89) (19, 
173) ...]
d: [(36, 36) (72, 72) (13, 13) (49, 49) (85, 85) (3, 3) (26, 26) (62, 62) (98, 98) (16, 16) (39, 39) (75, 75) (29, 29) (52, 52) (88, 88) (6, 6) (42, 42) (65, 65) (19, 19) (55, 55) ...]
AVLtest
a: [(1, 65) (2, 3) (3, 96) (4, 36) (5, 74) (6, 9) (7, 70) (8, 97) (9, 1) (10, 24) (11, 100) (12, 17) (13, 61) (14, 52) (15, 19) (16, 84) (17, 73) (18, 34) (19, 26) (20, 22) ...]
b: [(1, 9) (2, 31) (3, 2) (4, 32) (5, 62) (6, 30) (7, 87) (8, 98) (9, 6) (10, 49) (11, 44) (12, 47) (13, 50) (14, 76) (15, 56) (16, 57) (17, 12) (18, 54) (19, 15) (20, 83) ...]
c: [(1, 189) (2, 195) (3, 197) (4, 57) (5, 125) (6, 135) (7, 149) (8, 129) (9, 69) (10, 9) (11, 163) (12, 59) (13, 171) (14, 137) (15, 141) (16, 35) (17, 75) (18, 49) (19, 173) (20, 93) ...]
d: [(1, 1) (2, 2) (3, 3) (4, 4) (5, 5) (6, 6) (7, 7) (8, 8) (9, 9) (10, 10) (11, 11) (12, 12) (13, 13) (14, 14) (15, 15) (16, 16) (17, 17) (18, 18) (19, 19) (20, 20) ...]
RAVLtest
a: [(1, 65) (2, 3) (3, 96) (4, 36) (5, 74) (6, 9) (7, 70) (8, 97) (9, 1) (10, 24) (11, 100) (12
, 17) (13, 61) (14, 52) (15, 19) (16, 84) (17, 73) (18, 34) (19, 26) (20, 22) ...]
b: [(1, 9) (2, 31) (3, 2) (4, 32) (5, 62) (6, 30) (7, 87) (8, 98) (9, 6) (10, 49) (11, 44) (12, 47) (13, 50) (14, 76) (15, 56) (16, 57) (17, 12) (18, 54) (19, 15) (20, 83) ...]
c: [(1, 189) (2, 195) (3, 197) (4, 57) (5, 125) (6, 135) (7, 149) (8, 129) (9, 69) (10, 9) (11, 163) (12, 59) (13, 171) (14, 137) (15, 141) (16, 35) (17, 75) (18, 49) (19, 173) (20, 93) ...]
d: [(1, 1) (2, 2) (3, 3) (4, 4) (5, 5) (6, 6) (7, 7) (8, 8) (9, 9) (10, 10) (11, 11) (12, 12) (13, 13) (14, 14) (15, 15) (16, 16) (17, 17) (18, 18) (19, 19) (20, 20) ...]
