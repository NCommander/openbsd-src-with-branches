This is Info file readline.info, produced by Makeinfo version 1.68 from
the input file /usr/homes/chet/src/bash/readline-src/doc/rlman.texinfo.

INFO-DIR-SECTION Libraries
START-INFO-DIR-ENTRY
* Readline: (readline).       The GNU readline library API
END-INFO-DIR-ENTRY

   This document describes the GNU Readline Library, a utility which
aids in the consistency of user interface across discrete programs that
need to provide a command line interface.

   Copyright (C) 1988-1999 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice pare
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: readline.info,  Node: Top,  Next: Command Line Editing,  Up: (dir)

GNU Readline Library
********************

   This document describes the GNU Readline Library, a utility which
aids in the consistency of user interface across discrete programs that
need to provide a command line interface.

* Menu:

* Command Line Editing::	   GNU Readline User's Manual.
* Programming with GNU Readline::  GNU Readline Programmer's Manual.
* Concept Index::		   Index of concepts described in this manual.
* Function and Variable Index::	   Index of externally visible functions
				   and variables.


File: readline.info,  Node: Command Line Editing,  Next: Programming with GNU Readline,  Prev: Top,  Up: Top

Command Line Editing
********************

   This chapter describes the basic features of the GNU command line
editing interface.

* Menu:

* Introduction and Notation::	Notation used in this text.
* Readline Interaction::	The minimum set of commands for editing a line.
* Readline Init File::		Customizing Readline from a user's view.
* Bindable Readline Commands::	A description of most of the Readline commands
				available for binding
* Readline vi Mode::		A short description of how to make Readline
				behave like the vi editor.


File: readline.info,  Node: Introduction and Notation,  Next: Readline Interaction,  Up: Command Line Editing

Introduction to Line Editing
============================

   The following paragraphs describe the notation used to represent
keystrokes.

   The text <C-k> is read as `Control-K' and describes the character
produced when the <k> key is pressed while the Control key is depressed.

   The text <M-k> is read as `Meta-K' and describes the character
produced when the Meta key (if you have one) is depressed, and the <k>
key is pressed.  The Meta key is labeled <ALT> on many keyboards.  On
keyboards with two keys labeled <ALT> (usually to either side of the
space bar), the <ALT> on the left side is generally set to work as a
Meta key.  The <ALT> key on the right may also be configured to work as
a Meta key or may be configured as some other modifier, such as a
Compose key for typing accented characters.

   If you do not have a Meta or <ALT> key, or another key working as a
Meta key, the identical keystroke can be generated by typing <ESC>
first, and then typing <k>.  Either process is known as "metafying" the
<k> key.

   The text <M-C-k> is read as `Meta-Control-k' and describes the
character produced by "metafying" <C-k>.

   In addition, several keys have their own names.  Specifically,
<DEL>, <ESC>, <LFD>, <SPC>, <RET>, and <TAB> all stand for themselves
when seen in this text, or in an init file (*note Readline Init
File::.).  If your keyboard lacks a <LFD> key, typing <C-j> will
produce the desired character.  The <RET> key may be labeled <Return>
or <Enter> on some keyboards.


File: readline.info,  Node: Readline Interaction,  Next: Readline Init File,  Prev: Introduction and Notation,  Up: Command Line Editing

Readline Interaction
====================

   Often during an interactive session you type in a long line of text,
only to notice that the first word on the line is misspelled.  The
Readline library gives you a set of commands for manipulating the text
as you type it in, allowing you to just fix your typo, and not forcing
you to retype the majority of the line.  Using these editing commands,
you move the cursor to the place that needs correction, and delete or
insert the text of the corrections.  Then, when you are satisfied with
the line, you simply press <RETURN>.  You do not have to be at the end
of the line to press <RETURN>; the entire line is accepted regardless
of the location of the cursor within the line.

* Menu:

* Readline Bare Essentials::	The least you need to know about Readline.
* Readline Movement Commands::	Moving about the input line.
* Readline Killing Commands::	How to delete text, and how to get it back!
* Readline Arguments::		Giving numeric arguments to commands.
* Searching::			Searching through previous lines.


File: readline.info,  Node: Readline Bare Essentials,  Next: Readline Movement Commands,  Up: Readline Interaction

Readline Bare Essentials
------------------------

   In order to enter characters into the line, simply type them.  The
typed character appears where the cursor was, and then the cursor moves
one space to the right.  If you mistype a character, you can use your
erase character to back up and delete the mistyped character.

   Sometimes you may mistype a character, and not notice the error
until you have typed several other characters.  In that case, you can
type <C-b> to move the cursor to the left, and then correct your
mistake.  Afterwards, you can move the cursor to the right with <C-f>.

   When you add text in the middle of a line, you will notice that
characters to the right of the cursor are `pushed over' to make room
for the text that you have inserted.  Likewise, when you delete text
behind the cursor, characters to the right of the cursor are `pulled
back' to fill in the blank space created by the removal of the text.  A
list of the bare essentials for editing the text of an input line
follows.

<C-b>
     Move back one character.

<C-f>
     Move forward one character.

<DEL> or <Backspace>
     Delete the character to the left of the cursor.

<C-d>
     Delete the character underneath the cursor.

Printing characters
     Insert the character into the line at the cursor.

<C-_> or <C-x C-u>
     Undo the last editing command.  You can undo all the way back to an
     empty line.

(Depending on your configuration, the <Backspace> key be set to delete
the character to the left of the cursor and the <DEL> key set to delete
the character underneath the cursor, like <C-d>, rather than the
character to the left of the cursor.)


File: readline.info,  Node: Readline Movement Commands,  Next: Readline Killing Commands,  Prev: Readline Bare Essentials,  Up: Readline Interaction

Readline Movement Commands
--------------------------

   The above table describes the most basic keystrokes that you need in
order to do editing of the input line.  For your convenience, many
other commands have been added in addition to <C-b>, <C-f>, <C-d>, and
<DEL>.  Here are some commands for moving more rapidly about the line.

<C-a>
     Move to the start of the line.

<C-e>
     Move to the end of the line.

<M-f>
     Move forward a word, where a word is composed of letters and
     digits.

<M-b>
     Move backward a word.

<C-l>
     Clear the screen, reprinting the current line at the top.

   Notice how <C-f> moves forward a character, while <M-f> moves
forward a word.  It is a loose convention that control keystrokes
operate on characters while meta keystrokes operate on words.


File: readline.info,  Node: Readline Killing Commands,  Next: Readline Arguments,  Prev: Readline Movement Commands,  Up: Readline Interaction

Readline Killing Commands
-------------------------

   "Killing" text means to delete the text from the line, but to save
it away for later use, usually by "yanking" (re-inserting) it back into
the line.  (`Cut' and `paste' are more recent jargon for `kill' and
`yank'.)

   If the description for a command says that it `kills' text, then you
can be sure that you can get the text back in a different (or the same)
place later.

   When you use a kill command, the text is saved in a "kill-ring".
Any number of consecutive kills save all of the killed text together, so
that when you yank it back, you get it all.  The kill ring is not line
specific; the text that you killed on a previously typed line is
available to be yanked back later, when you are typing another line.

   Here is the list of commands for killing text.

<C-k>
     Kill the text from the current cursor position to the end of the
     line.

<M-d>
     Kill from the cursor to the end of the current word, or, if between
     words, to the end of the next word.  Word boundaries are the same
     as those used by <M-f>.

<M-DEL>
     Kill from the cursor the start of the previous word, or, if between
     words, to the start of the previous word.  Word boundaries are the
     same as those used by <M-b>.

<C-w>
     Kill from the cursor to the previous whitespace.  This is
     different than <M-DEL> because the word boundaries differ.

   Here is how to "yank" the text back into the line.  Yanking means to
copy the most-recently-killed text from the kill buffer.

<C-y>
     Yank the most recently killed text back into the buffer at the
     cursor.

<M-y>
     Rotate the kill-ring, and yank the new top.  You can only do this
     if the prior command is <C-y> or <M-y>.


File: readline.info,  Node: Readline Arguments,  Next: Searching,  Prev: Readline Killing Commands,  Up: Readline Interaction

Readline Arguments
------------------

   You can pass numeric arguments to Readline commands.  Sometimes the
argument acts as a repeat count, other times it is the sign of the
argument that is significant.  If you pass a negative argument to a
command which normally acts in a forward direction, that command will
act in a backward direction.  For example, to kill text back to the
start of the line, you might type `M-- C-k'.

   The general way to pass numeric arguments to a command is to type
meta digits before the command.  If the first `digit' typed is a minus
sign (`-'), then the sign of the argument will be negative.  Once you
have typed one meta digit to get the argument started, you can type the
remainder of the digits, and then the command.  For example, to give
the <C-d> command an argument of 10, you could type `M-1 0 C-d'.


File: readline.info,  Node: Searching,  Prev: Readline Arguments,  Up: Readline Interaction

Searching for Commands in the History
-------------------------------------

   Readline provides commands for searching through the command history
for lines containing a specified string.  There are two search modes:
INCREMENTAL and NON-INCREMENTAL.

   Incremental searches begin before the user has finished typing the
search string.  As each character of the search string is typed,
Readline displays the next entry from the history matching the string
typed so far.  An incremental search requires only as many characters
as needed to find the desired history entry.  To search backward in the
history for a particular string, type <C-r>.  Typing <C-s> searches
forward through the history.  The characters present in the value of
the `isearch-terminators' variable are used to terminate an incremental
search.  If that variable has not been assigned a value, the <ESC> and
<C-J> characters will terminate an incremental search.  <C-g> will
abort an incremental search and restore the original line.  When the
search is terminated, the history entry containing the search string
becomes the current line.

   To find other matching entries in the history list, type <C-r> or
<C-s> as appropriate.  This will search backward or forward in the
history for the next entry matching the search string typed so far.
Any other key sequence bound to a Readline command will terminate the
search and execute that command.  For instance, a <RET> will terminate
the search and accept the line, thereby executing the command from the
history list.

   Non-incremental searches read the entire search string before
starting to search for matching history lines.  The search string may be
typed by the user or be part of the contents of the current line.


File: readline.info,  Node: Readline Init File,  Next: Bindable Readline Commands,  Prev: Readline Interaction,  Up: Command Line Editing

Readline Init File
==================

   Although the Readline library comes with a set of Emacs-like
keybindings installed by default, it is possible to use a different set
of keybindings.  Any user can customize programs that use Readline by
putting commands in an "inputrc" file, conventionally in his home
directory.  The name of this file is taken from the value of the
environment variable `INPUTRC'.  If that variable is unset, the default
is `~/.inputrc'.

   When a program which uses the Readline library starts up, the init
file is read, and the key bindings are set.

   In addition, the `C-x C-r' command re-reads this init file, thus
incorporating any changes that you might have made to it.

* Menu:

* Readline Init File Syntax::	Syntax for the commands in the inputrc file.

* Conditional Init Constructs::	Conditional key bindings in the inputrc file.

* Sample Init File::		An example inputrc file.


File: readline.info,  Node: Readline Init File Syntax,  Next: Conditional Init Constructs,  Up: Readline Init File

Readline Init File Syntax
-------------------------

   There are only a few basic constructs allowed in the Readline init
file.  Blank lines are ignored.  Lines beginning with a `#' are
comments.  Lines beginning with a `$' indicate conditional constructs
(*note Conditional Init Constructs::.).  Other lines denote variable
settings and key bindings.

Variable Settings
     You can modify the run-time behavior of Readline by altering the
     values of variables in Readline using the `set' command within the
     init file.  Here is how to change from the default Emacs-like key
     binding to use `vi' line editing commands:

          set editing-mode vi

     A great deal of run-time behavior is changeable with the following
     variables.

    `bell-style'
          Controls what happens when Readline wants to ring the
          terminal bell.  If set to `none', Readline never rings the
          bell.  If set to `visible', Readline uses a visible bell if
          one is available.  If set to `audible' (the default),
          Readline attempts to ring the terminal's bell.

    `comment-begin'
          The string to insert at the beginning of the line when the
          `insert-comment' command is executed.  The default value is
          `"#"'.

    `completion-ignore-case'
          If set to `on', Readline performs filename matching and
          completion in a case-insensitive fashion.  The default value
          is `off'.

    `completion-query-items'
          The number of possible completions that determines when the
          user is asked whether he wants to see the list of
          possibilities.  If the number of possible completions is
          greater than this value, Readline will ask the user whether
          or not he wishes to view them; otherwise, they are simply
          listed.  The default limit is `100'.

    `convert-meta'
          If set to `on', Readline will convert characters with the
          eighth bit set to an ASCII key sequence by stripping the
          eighth bit and prefixing an <ESC> character, converting them
          to a meta-prefixed key sequence.  The default value is `on'.

    `disable-completion'
          If set to `On', Readline will inhibit word completion.
          Completion  characters will be inserted into the line as if
          they had been mapped to `self-insert'.  The default is `off'.

    `editing-mode'
          The `editing-mode' variable controls which default set of key
          bindings is used.  By default, Readline starts up in Emacs
          editing mode, where the keystrokes are most similar to Emacs.
          This variable can be set to either `emacs' or `vi'.

    `enable-keypad'
          When set to `on', Readline will try to enable the application
          keypad when it is called.  Some systems need this to enable
          the arrow keys.  The default is `off'.

    `expand-tilde'
          If set to `on', tilde expansion is performed when Readline
          attempts word completion.  The default is `off'.

    `horizontal-scroll-mode'
          This variable can be set to either `on' or `off'.  Setting it
          to `on' means that the text of the lines being edited will
          scroll horizontally on a single screen line when they are
          longer than the width of the screen, instead of wrapping onto
          a new screen line.  By default, this variable is set to `off'.

    `input-meta'
          If set to `on', Readline will enable eight-bit input (it will
          not strip the eighth bit from the characters it reads),
          regardless of what the terminal claims it can support.  The
          default value is `off'.  The name `meta-flag' is a synonym
          for this variable.

    `isearch-terminators'
          The string of characters that should terminate an incremental
          search without subsequently executing the character as a
          command (*note Searching::.).  If this variable has not been
          given a value, the characters <ESC> and <C-J> will terminate
          an incremental search.

    `keymap'
          Sets Readline's idea of the current keymap for key binding
          commands.  Acceptable `keymap' names are `emacs',
          `emacs-standard', `emacs-meta', `emacs-ctlx', `vi',
          `vi-command', and `vi-insert'.  `vi' is equivalent to
          `vi-command'; `emacs' is equivalent to `emacs-standard'.  The
          default value is `emacs'.  The value of the `editing-mode'
          variable also affects the default keymap.

    `mark-directories'
          If set to `on', completed directory names have a slash
          appended.  The default is `on'.

    `mark-modified-lines'
          This variable, when set to `on', causes Readline to display an
          asterisk (`*') at the start of history lines which have been
          modified.  This variable is `off' by default.

    `output-meta'
          If set to `on', Readline will display characters with the
          eighth bit set directly rather than as a meta-prefixed escape
          sequence.  The default is `off'.

    `print-completions-horizontally'
          If set to `on', Readline will display completions with matches
          sorted horizontally in alphabetical order, rather than down
          the screen.  The default is `off'.

    `show-all-if-ambiguous'
          This alters the default behavior of the completion functions.
          If set to `on', words which have more than one possible
          completion cause the matches to be listed immediately instead
          of ringing the bell.  The default value is `off'.

    `visible-stats'
          If set to `on', a character denoting a file's type is
          appended to the filename when listing possible completions.
          The default is `off'.

Key Bindings
     The syntax for controlling key bindings in the init file is
     simple.  First you need to find the name of the command that you
     want to change.  The following sections contain tables of the
     command name, the default keybinding, if any, and a short
     description of what the command does.

     Once you know the name of the command, simply place the name of
     the key you wish to bind the command to, a colon, and then the
     name of the command on a line in the init file.  The name of the
     key can be expressed in different ways, depending on which is most
     comfortable for you.

    KEYNAME: FUNCTION-NAME or MACRO
          KEYNAME is the name of a key spelled out in English.  For
          example:
               Control-u: universal-argument
               Meta-Rubout: backward-kill-word
               Control-o: "> output"

          In the above example, <C-u> is bound to the function
          `universal-argument', and <C-o> is bound to run the macro
          expressed on the right hand side (that is, to insert the text
          `> output' into the line).

    "KEYSEQ": FUNCTION-NAME or MACRO
          KEYSEQ differs from KEYNAME above in that strings denoting an
          entire key sequence can be specified, by placing the key
          sequence in double quotes.  Some GNU Emacs style key escapes
          can be used, as in the following example, but the special
          character names are not recognized.

               "\C-u": universal-argument
               "\C-x\C-r": re-read-init-file
               "\e[11~": "Function Key 1"

          In the above example, <C-u> is bound to the function
          `universal-argument' (just as it was in the first example),
          `<C-x> <C-r>' is bound to the function `re-read-init-file',
          and `<ESC> <[> <1> <1> <~>' is bound to insert the text
          `Function Key 1'.

     The following GNU Emacs style escape sequences are available when
     specifying key sequences:

    `\C-'
          control prefix

    `\M-'
          meta prefix

    `\e'
          an escape character

    `\\'
          backslash

    `\"'
          <">, a double quotation mark

    `\''
          <'>, a single quote or apostrophe

     In addition to the GNU Emacs style escape sequences, a second set
     of backslash escapes is available:

    `\a'
          alert (bell)

    `\b'
          backspace

    `\d'
          delete

    `\f'
          form feed

    `\n'
          newline

    `\r'
          carriage return

    `\t'
          horizontal tab

    `\v'
          vertical tab

    `\NNN'
          the character whose `ASCII' code is the octal value NNN (one
          to three digits)

    `\xNNN'
          the character whose `ASCII' code is the hexadecimal value NNN
          (one to three digits)

     When entering the text of a macro, single or double quotes must be
     used to indicate a macro definition.  Unquoted text is assumed to
     be a function name.  In the macro body, the backslash escapes
     described above are expanded.  Backslash will quote any other
     character in the macro text, including `"' and `''.  For example,
     the following binding will make `C-x \' insert a single `\' into
     the line:
          "\C-x\\": "\\"


File: readline.info,  Node: Conditional Init Constructs,  Next: Sample Init File,  Prev: Readline Init File Syntax,  Up: Readline Init File

Conditional Init Constructs
---------------------------

   Readline implements a facility similar in spirit to the conditional
compilation features of the C preprocessor which allows key bindings
and variable settings to be performed as the result of tests.  There
are four parser directives used.

`$if'
     The `$if' construct allows bindings to be made based on the
     editing mode, the terminal being used, or the application using
     Readline.  The text of the test extends to the end of the line; no
     characters are required to isolate it.

    `mode'
          The `mode=' form of the `$if' directive is used to test
          whether Readline is in `emacs' or `vi' mode.  This may be
          used in conjunction with the `set keymap' command, for
          instance, to set bindings in the `emacs-standard' and
          `emacs-ctlx' keymaps only if Readline is starting out in
          `emacs' mode.

    `term'
          The `term=' form may be used to include terminal-specific key
          bindings, perhaps to bind the key sequences output by the
          terminal's function keys.  The word on the right side of the
          `=' is tested against both the full name of the terminal and
          the portion of the terminal name before the first `-'.  This
          allows `sun' to match both `sun' and `sun-cmd', for instance.

    `application'
          The APPLICATION construct is used to include
          application-specific settings.  Each program using the
          Readline library sets the APPLICATION NAME, and you can test
          for it.  This could be used to bind key sequences to
          functions useful for a specific program.  For instance, the
          following command adds a key sequence that quotes the current
          or previous word in Bash:
               $if Bash
               # Quote the current or previous word
               "\C-xq": "\eb\"\ef\""
               $endif

`$endif'
     This command, as seen in the previous example, terminates an `$if'
     command.

`$else'
     Commands in this branch of the `$if' directive are executed if the
     test fails.

`$include'
     This directive takes a single filename as an argument and reads
     commands and bindings from that file.
          $include /etc/inputrc


File: readline.info,  Node: Sample Init File,  Prev: Conditional Init Constructs,  Up: Readline Init File

Sample Init File
----------------

   Here is an example of an inputrc file.  This illustrates key
binding, variable assignment, and conditional syntax.


     # This file controls the behaviour of line input editing for
     # programs that use the Gnu Readline library.  Existing programs
     # include FTP, Bash, and Gdb.
     #
     # You can re-read the inputrc file with C-x C-r.
     # Lines beginning with '#' are comments.
     #
     # First, include any systemwide bindings and variable assignments from
     # /etc/Inputrc
     $include /etc/Inputrc
     
     #
     # Set various bindings for emacs mode.
     
     set editing-mode emacs
     
     $if mode=emacs
     
     Meta-Control-h:	backward-kill-word	Text after the function name is ignored
     
     #
     # Arrow keys in keypad mode
     #
     #"\M-OD":        backward-char
     #"\M-OC":        forward-char
     #"\M-OA":        previous-history
     #"\M-OB":        next-history
     #
     # Arrow keys in ANSI mode
     #
     "\M-[D":        backward-char
     "\M-[C":        forward-char
     "\M-[A":        previous-history
     "\M-[B":        next-history
     #
     # Arrow keys in 8 bit keypad mode
     #
     #"\M-\C-OD":       backward-char
     #"\M-\C-OC":       forward-char
     #"\M-\C-OA":       previous-history
     #"\M-\C-OB":       next-history
     #
     # Arrow keys in 8 bit ANSI mode
     #
     #"\M-\C-[D":       backward-char
     #"\M-\C-[C":       forward-char
     #"\M-\C-[A":       previous-history
     #"\M-\C-[B":       next-history
     
     C-q: quoted-insert
     
     $endif
     
     # An old-style binding.  This happens to be the default.
     TAB: complete
     
     # Macros that are convenient for shell interaction
     $if Bash
     # edit the path
     "\C-xp": "PATH=${PATH}\e\C-e\C-a\ef\C-f"
     # prepare to type a quoted word -- insert open and close double quotes
     # and move to just after the open quote
     "\C-x\"": "\"\"\C-b"
     # insert a backslash (testing backslash escapes in sequences and macros)
     "\C-x\\": "\\"
     # Quote the current or previous word
     "\C-xq": "\eb\"\ef\""
     # Add a binding to refresh the line, which is unbound
     "\C-xr": redraw-current-line
     # Edit variable on current line.
     "\M-\C-v": "\C-a\C-k$\C-y\M-\C-e\C-a\C-y="
     $endif
     
     # use a visible bell if one is available
     set bell-style visible
     
     # don't strip characters to 7 bits when reading
     set input-meta on
     
     # allow iso-latin1 characters to be inserted rather than converted to
     # prefix-meta sequences
     set convert-meta off
     
     # display characters with the eighth bit set directly rather than
     # as meta-prefixed characters
     set output-meta on
     
     # if there are more than 150 possible completions for a word, ask the
     # user if he wants to see all of them
     set completion-query-items 150
     
     # For FTP
     $if Ftp
     "\C-xg": "get \M-?"
     "\C-xt": "put \M-?"
     "\M-.": yank-last-arg
     $endif


File: readline.info,  Node: Bindable Readline Commands,  Next: Readline vi Mode,  Prev: Readline Init File,  Up: Command Line Editing

Bindable Readline Commands
==========================

* Menu:

* Commands For Moving::		Moving about the line.
* Commands For History::	Getting at previous lines.
* Commands For Text::		Commands for changing text.
* Commands For Killing::	Commands for killing and yanking.
* Numeric Arguments::		Specifying numeric arguments, repeat counts.
* Commands For Completion::	Getting Readline to do the typing for you.
* Keyboard Macros::		Saving and re-executing typed characters
* Miscellaneous Commands::	Other miscellaneous commands.

   This section describes Readline commands that may be bound to key
sequences.

   Command names without an accompanying key sequence are unbound by
default.  In the following descriptions, POINT refers to the current
cursor position, and MARK refers to a cursor position saved by the
`set-mark' command.  The text between the point and mark is referred to
as the REGION.


File: readline.info,  Node: Commands For Moving,  Next: Commands For History,  Up: Bindable Readline Commands

Commands For Moving
-------------------

`beginning-of-line (C-a)'
     Move to the start of the current line.

`end-of-line (C-e)'
     Move to the end of the line.

`forward-char (C-f)'
     Move forward a character.

`backward-char (C-b)'
     Move back a character.

`forward-word (M-f)'
     Move forward to the end of the next word.  Words are composed of
     letters and digits.

`backward-word (M-b)'
     Move back to the start of the current or previous word.  Words are
     composed of letters and digits.

`clear-screen (C-l)'
     Clear the screen and redraw the current line, leaving the current
     line at the top of the screen.

`redraw-current-line ()'
     Refresh the current line.  By default, this is unbound.


File: readline.info,  Node: Commands For History,  Next: Commands For Text,  Prev: Commands For Moving,  Up: Bindable Readline Commands

Commands For Manipulating The History
-------------------------------------

`accept-line (Newline, Return)'
     Accept the line regardless of where the cursor is.  If this line is
     non-empty, add it to the history list.  If this line was a history
     line, then restore the history line to its original state.

`previous-history (C-p)'
     Move `up' through the history list.

`next-history (C-n)'
     Move `down' through the history list.

`beginning-of-history (M-<)'
     Move to the first line in the history.

`end-of-history (M->)'
     Move to the end of the input history, i.e., the line currently
     being entered.

`reverse-search-history (C-r)'
     Search backward starting at the current line and moving `up'
     through the history as necessary.  This is an incremental search.

`forward-search-history (C-s)'
     Search forward starting at the current line and moving `down'
     through the the history as necessary.  This is an incremental
     search.

`non-incremental-reverse-search-history (M-p)'
     Search backward starting at the current line and moving `up'
     through the history as necessary using a non-incremental search
     for a string supplied by the user.

`non-incremental-forward-search-history (M-n)'
     Search forward starting at the current line and moving `down'
     through the the history as necessary using a non-incremental search
     for a string supplied by the user.

`history-search-forward ()'
     Search forward through the history for the string of characters
     between the start of the current line and the point.  This is a
     non-incremental search.  By default, this command is unbound.

`history-search-backward ()'
     Search backward through the history for the string of characters
     between the start of the current line and the point.  This is a
     non-incremental search.  By default, this command is unbound.

`yank-nth-arg (M-C-y)'
     Insert the first argument to the previous command (usually the
     second word on the previous line).  With an argument N, insert the
     Nth word from the previous command (the words in the previous
     command begin with word 0).  A negative argument inserts the Nth
     word from the end of the previous command.

`yank-last-arg (M-., M-_)'
     Insert last argument to the previous command (the last word of the
     previous history entry).  With an argument, behave exactly like
     `yank-nth-arg'.  Successive calls to `yank-last-arg' move back
     through the history list, inserting the last argument of each line
     in turn.


File: readline.info,  Node: Commands For Text,  Next: Commands For Killing,  Prev: Commands For History,  Up: Bindable Readline Commands

Commands For Changing Text
--------------------------

`delete-char (C-d)'
     Delete the character under the cursor.  If the cursor is at the
     beginning of the line, there are no characters in the line, and
     the last character typed was not bound to `delete-char', then
     return `EOF'.

`backward-delete-char (Rubout)'
     Delete the character behind the cursor.  A numeric argument means
     to kill the characters instead of deleting them.

`forward-backward-delete-char ()'
     Delete the character under the cursor, unless the cursor is at the
     end of the line, in which case the character behind the cursor is
     deleted.  By default, this is not bound to a key.

`quoted-insert (C-q, C-v)'
     Add the next character typed to the line verbatim.  This is how to
     insert key sequences like <C-q>, for example.

`tab-insert (M-TAB)'
     Insert a tab character.

`self-insert (a, b, A, 1, !, ...)'
     Insert yourself.

`transpose-chars (C-t)'
     Drag the character before the cursor forward over the character at
     the cursor, moving the cursor forward as well.  If the insertion
     point is at the end of the line, then this transposes the last two
     characters of the line.  Negative arguments have no effect.

`transpose-words (M-t)'
     Drag the word before point past the word after point, moving point
     past that word as well.

`upcase-word (M-u)'
     Uppercase the current (or following) word.  With a negative
     argument, uppercase the previous word, but do not move the cursor.

`downcase-word (M-l)'
     Lowercase the current (or following) word.  With a negative
     argument, lowercase the previous word, but do not move the cursor.

`capitalize-word (M-c)'
     Capitalize the current (or following) word.  With a negative
     argument, capitalize the previous word, but do not move the cursor.


File: readline.info,  Node: Commands For Killing,  Next: Numeric Arguments,  Prev: Commands For Text,  Up: Bindable Readline Commands

Killing And Yanking
-------------------

`kill-line (C-k)'
     Kill the text from point to the end of the line.

`backward-kill-line (C-x Rubout)'
     Kill backward to the beginning of the line.

`unix-line-discard (C-u)'
     Kill backward from the cursor to the beginning of the current line.

`kill-whole-line ()'
     Kill all characters on the current line, no matter point is.  By
     default, this is unbound.

`kill-word (M-d)'
     Kill from point to the end of the current word, or if between
     words, to the end of the next word.  Word boundaries are the same
     as `forward-word'.

`backward-kill-word (M-DEL)'
     Kill the word behind point.  Word boundaries are the same as
     `backward-word'.

`unix-word-rubout (C-w)'
     Kill the word behind point, using white space as a word boundary.
     The killed text is saved on the kill-ring.

`delete-horizontal-space ()'
     Delete all spaces and tabs around point.  By default, this is
     unbound.

`kill-region ()'
     Kill the text in the current region.  By default, this command is
     unbound.

`copy-region-as-kill ()'
     Copy the text in the region to the kill buffer, so it can be yanked
     right away.  By default, this command is unbound.

`copy-backward-word ()'
     Copy the word before point to the kill buffer.  The word
     boundaries are the same as `backward-word'.  By default, this
     command is unbound.

`copy-forward-word ()'
     Copy the word following point to the kill buffer.  The word
     boundaries are the same as `forward-word'.  By default, this
     command is unbound.

`yank (C-y)'
     Yank the top of the kill ring into the buffer at the current
     cursor position.

`yank-pop (M-y)'
     Rotate the kill-ring, and yank the new top.  You can only do this
     if the prior command is yank or yank-pop.


File: readline.info,  Node: Numeric Arguments,  Next: Commands For Completion,  Prev: Commands For Killing,  Up: Bindable Readline Commands

Specifying Numeric Arguments
----------------------------

`digit-argument (M-0, M-1, ... M--)'
     Add this digit to the argument already accumulating, or start a new
     argument.  <M-> starts a negative argument.

`universal-argument ()'
     This is another way to specify an argument.  If this command is
     followed by one or more digits, optionally with a leading minus
     sign, those digits define the argument.  If the command is
     followed by digits, executing `universal-argument' again ends the
     numeric argument, but is otherwise ignored.  As a special case, if
     this command is immediately followed by a character that is
     neither a digit or minus sign, the argument count for the next
     command is multiplied by four.  The argument count is initially
     one, so executing this function the first time makes the argument
     count four, a second time makes the argument count sixteen, and so
     on.  By default, this is not bound to a key.


File: readline.info,  Node: Commands For Completion,  Next: Keyboard Macros,  Prev: Numeric Arguments,  Up: Bindable Readline Commands

Letting Readline Type For You
-----------------------------

`complete (TAB)'
     Attempt to do completion on the text before the cursor.  This is
     application-specific.  Generally, if you are typing a filename
     argument, you can do filename completion; if you are typing a
     command, you can do command completion; if you are typing in a
     symbol to GDB, you can do symbol name completion; if you are
     typing in a variable to Bash, you can do variable name completion,
     and so on.

`possible-completions (M-?)'
     List the possible completions of the text before the cursor.

`insert-completions (M-*)'
     Insert all completions of the text before point that would have
     been generated by `possible-completions'.

`menu-complete ()'
     Similar to `complete', but replaces the word to be completed with
     a single match from the list of possible completions.  Repeated
     execution of `menu-complete' steps through the list of possible
     completions, inserting each match in turn.  At the end of the list
     of completions, the bell is rung and the original text is restored.
     An argument of N moves N positions forward in the list of matches;
     a negative argument may be used to move backward through the list.
     This command is intended to be bound to `TAB', but is unbound by
     default.

`delete-char-or-list ()'
     Deletes the character under the cursor if not at the beginning or
     end of the line (like `delete-char').  If at the end of the line,
     behaves identically to `possible-completions'.  This command is
     unbound by default.


File: readline.info,  Node: Keyboard Macros,  Next: Miscellaneous Commands,  Prev: Commands For Completion,  Up: Bindable Readline Commands

Keyboard Macros
---------------

`start-kbd-macro (C-x ()'
     Begin saving the characters typed into the current keyboard macro.

`end-kbd-macro (C-x ))'
     Stop saving the characters typed into the current keyboard macro
     and save the definition.

`call-last-kbd-macro (C-x e)'
     Re-execute the last keyboard macro defined, by making the
     characters in the macro appear as if typed at the keyboard.


File: readline.info,  Node: Miscellaneous Commands,  Prev: Keyboard Macros,  Up: Bindable Readline Commands

Some Miscellaneous Commands
---------------------------

`re-read-init-file (C-x C-r)'
     Read in the contents of the INPUTRC file, and incorporate any
     bindings or variable assignments found there.

`abort (C-g)'
     Abort the current editing command and ring the terminal's bell
     (subject to the setting of `bell-style').

`do-uppercase-version (M-a, M-b, M-X, ...)'
     If the metafied character X is lowercase, run the command that is
     bound to the corresponding uppercase character.

`prefix-meta (ESC)'
     Make the next character typed be metafied.  This is for keyboards
     without a meta key.  Typing `ESC f' is equivalent to typing `M-f'.

`undo (C-_, C-x C-u)'
     Incremental undo, separately remembered for each line.

`revert-line (M-r)'
     Undo all changes made to this line.  This is like executing the
     `undo' command enough times to get back to the beginning.

`tilde-expand (M-~)'
     Perform tilde expansion on the current word.

`set-mark (C-@)'
     Set the mark to the current point.  If a numeric argument is
     supplied, the mark is set to that position.

`exchange-point-and-mark (C-x C-x)'
     Swap the point with the mark.  The current cursor position is set
     to the saved position, and the old cursor position is saved as the
     mark.

`character-search (C-])'
     A character is read and point is moved to the next occurrence of
     that character.  A negative count searches for previous
     occurrences.

`character-search-backward (M-C-])'
     A character is read and point is moved to the previous occurrence
     of that character.  A negative count searches for subsequent
     occurrences.

`insert-comment (M-#)'
     The value of the `comment-begin' variable is inserted at the
     beginning of the current line, and the line is accepted as if a
     newline had been typed.

`dump-functions ()'
     Print all of the functions and their key bindings to the Readline
     output stream.  If a numeric argument is supplied, the output is
     formatted in such a way that it can be made part of an INPUTRC
     file.  This command is unbound by default.

`dump-variables ()'
     Print all of the settable variables and their values to the
     Readline output stream.  If a numeric argument is supplied, the
     output is formatted in such a way that it can be made part of an
     INPUTRC file.  This command is unbound by default.

`dump-macros ()'
     Print all of the Readline key sequences bound to macros and the
     strings they ouput.  If a numeric argument is supplied, the output
     is formatted in such a way that it can be made part of an INPUTRC
     file.  This command is unbound by default.


File: readline.info,  Node: Readline vi Mode,  Prev: Bindable Readline Commands,  Up: Command Line Editing

Readline vi Mode
================

   While the Readline library does not have a full set of `vi' editing
functions, it does contain enough to allow simple editing of the line.
The Readline `vi' mode behaves as specified in the POSIX 1003.2
standard.

   In order to switch interactively between `emacs' and `vi' editing
modes, use the command M-C-j (toggle-editing-mode).  The Readline
default is `emacs' mode.

   When you enter a line in `vi' mode, you are already placed in
`insertion' mode, as if you had typed an `i'.  Pressing <ESC> switches
you into `command' mode, where you can edit the text of the line with
the standard `vi' movement keys, move to previous history lines with
`k' and subsequent lines with `j', and so forth.

   This document describes the GNU Readline Library, a utility for
aiding in the consitency of user interface across discrete programs
that need to provide a command line interface.

   Copyright (C) 1988, 1994, 1996, 1998, 1999 Free Software Foundation,
Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice pare
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: readline.info,  Node: Programming with GNU Readline,  Next: Concept Index,  Prev: Command Line Editing,  Up: Top

Programming with GNU Readline
*****************************

   This chapter describes the interface between the GNU Readline
Library and other programs.  If you are a programmer, and you wish to
include the features found in GNU Readline such as completion, line
editing, and interactive history manipulation in your own programs,
this section is for you.

* Menu:

* Basic Behavior::	Using the default behavior of Readline.
* Custom Functions::	Adding your own functions to Readline.
* Readline Variables::			Variables accessible to custom
					functions.
* Readline Convenience Functions::	Functions which Readline supplies to
					aid in writing your own custom
					functions.
* Readline Signal Handling::	How Readline behaves when it receives signals.
* Custom Completers::	Supplanting or supplementing Readline's
			completion functions.


File: readline.info,  Node: Basic Behavior,  Next: Custom Functions,  Up: Programming with GNU Readline

Basic Behavior
==============

   Many programs provide a command line interface, such as `mail',
`ftp', and `sh'.  For such programs, the default behaviour of Readline
is sufficient.  This section describes how to use Readline in the
simplest way possible, perhaps to replace calls in your code to
`gets()' or `fgets ()'.

   The function `readline ()' prints a prompt and then reads and returns
a single line of text from the user.  The line `readline' returns is
allocated with `malloc ()'; you should `free ()' the line when you are
done with it.  The declaration for `readline' in ANSI C is

     `char *readline (char *PROMPT);'

So, one might say
     `char *line = readline ("Enter a line: ");'

in order to read a line of text from the user.  The line returned has
the final newline removed, so only the text remains.

   If `readline' encounters an `EOF' while reading the line, and the
line is empty at that point, then `(char *)NULL' is returned.
Otherwise, the line is ended just as if a newline had been typed.

   If you want the user to be able to get at the line later, (with
<C-p> for example), you must call `add_history ()' to save the line
away in a "history" list of such lines.

     `add_history (line)';

For full details on the GNU History Library, see the associated manual.

   It is preferable to avoid saving empty lines on the history list,
since users rarely have a burning need to reuse a blank line.  Here is
a function which usefully replaces the standard `gets ()' library
function, and has the advantage of no static buffer to overflow:

     /* A static variable for holding the line. */
     static char *line_read = (char *)NULL;
     
     /* Read a string, and return a pointer to it.  Returns NULL on EOF. */
     char *
     rl_gets ()
     {
       /* If the buffer has already been allocated, return the memory
          to the free pool. */
       if (line_read)
         {
           free (line_read);
           line_read = (char *)NULL;
         }
     
       /* Get a line from the user. */
       line_read = readline ("");
     
       /* If the line has any text in it, save it on the history. */
       if (line_read && *line_read)
         add_history (line_read);
     
       return (line_read);
     }

   This function gives the user the default behaviour of <TAB>
completion: completion on file names.  If you do not want Readline to
complete on filenames, you can change the binding of the <TAB> key with
`rl_bind_key ()'.

     `int rl_bind_key (int KEY, int (*FUNCTION)());'

   `rl_bind_key ()' takes two arguments: KEY is the character that you
want to bind, and FUNCTION is the address of the function to call when
KEY is pressed.  Binding <TAB> to `rl_insert ()' makes <TAB> insert
itself.  `rl_bind_key ()' returns non-zero if KEY is not a valid ASCII
character code (between 0 and 255).

   Thus, to disable the default <TAB> behavior, the following suffices:
     `rl_bind_key ('\t', rl_insert);'

   This code should be executed once at the start of your program; you
might write a function called `initialize_readline ()' which performs
this and other desired initializations, such as installing custom
completers (*note Custom Completers::.).


File: readline.info,  Node: Custom Functions,  Next: Readline Variables,  Prev: Basic Behavior,  Up: Programming with GNU Readline

Custom Functions
================

   Readline provides many functions for manipulating the text of the
line, but it isn't possible to anticipate the needs of all programs.
This section describes the various functions and variables defined
within the Readline library which allow a user program to add
customized functionality to Readline.

   Before declaring any functions that customize Readline's behavior, or
using any functionality Readline provides in other code, an application
writer should include the file `<readline/readline.h>' in any file that
uses Readline's features.  Since some of the definitions in
`readline.h' use the `stdio' library, the file `<stdio.h>' should be
included before `readline.h'.

* Menu:

* The Function Type::	C declarations to make code readable.
* Function Writing::	Variables and calling conventions.


File: readline.info,  Node: The Function Type,  Next: Function Writing,  Up: Custom Functions

The Function Type
-----------------

   For readabilty, we declare a new type of object, called "Function".
A `Function' is a C function which returns an `int'.  The type
declaration for `Function' is:

`typedef int Function ();'

   The reason for declaring this new type is to make it easier to write
code describing pointers to C functions.  Let us say we had a variable
called FUNC which was a pointer to a function.  Instead of the classic
C declaration

   `int (*)()func;'

we may write

   `Function *func;'

Similarly, there are

     typedef void VFunction ();
     typedef char *CPFunction (); and
     typedef char **CPPFunction ();

for functions returning no value, `pointer to char', and `pointer to
pointer to char', respectively.


File: readline.info,  Node: Function Writing,  Prev: The Function Type,  Up: Custom Functions

Writing a New Function
----------------------

   In order to write new functions for Readline, you need to know the
calling conventions for keyboard-invoked functions, and the names of the
variables that describe the current state of the line read so far.

   The calling sequence for a command `foo' looks like

     `foo (int count, int key)'

where COUNT is the numeric argument (or 1 if defaulted) and KEY is the
key that invoked this function.

   It is completely up to the function as to what should be done with
the numeric argument.  Some functions use it as a repeat count, some as
a flag, and others to choose alternate behavior (refreshing the current
line as opposed to refreshing the screen, for example).  Some choose to
ignore it.  In general, if a function uses the numeric argument as a
repeat count, it should be able to do something useful with both
negative and positive arguments.  At the very least, it should be aware
that it can be passed a negative argument.


File: readline.info,  Node: Readline Variables,  Next: Readline Convenience Functions,  Prev: Custom Functions,  Up: Programming with GNU Readline

Readline Variables
==================

   These variables are available to function writers.

 - Variable: char * rl_line_buffer
     This is the line gathered so far.  You are welcome to modify the
     contents of the line, but see *Note Allowing Undoing::.  The
     function `rl_extend_line_buffer' is available to increase the
     memory allocated to `rl_line_buffer'.

 - Variable: int rl_point
     The offset of the current cursor position in `rl_line_buffer' (the
     *point*).

 - Variable: int rl_end
     The number of characters present in `rl_line_buffer'.  When
     `rl_point' is at the end of the line, `rl_point' and `rl_end' are
     equal.

 - Variable: int rl_mark
     The mark (saved position) in the current line.  If set, the mark
     and point define a *region*.

 - Variable: int rl_done
     Setting this to a non-zero value causes Readline to return the
     current line immediately.

 - Variable: int rl_pending_input
     Setting this to a value makes it the next keystroke read.  This is
     a way to stuff a single character into the input stream.

 - Variable: int rl_erase_empty_line
     Setting this to a non-zero value causes Readline to completely
     erase the current line, including any prompt, any time a newline
     is typed as the only character on an otherwise-empty line.  The
     cursor is moved to the beginning of the newly-blank line.

 - Variable: char * rl_prompt
     The prompt Readline uses.  This is set from the argument to
     `readline ()', and should not be assigned to directly.

 - Variable: int rl_already_prompted
     If an application wishes to display the prompt itself, rather than
     have Readline do it the first time `readline()' is called, it
     should set this variable to a non-zero value after displaying the
     prompt.  The prompt must also be passed as the argument to
     `readline()' so the redisplay functions can update the display
     properly.  The calling application is responsible for managing the
     value; Readline never sets it.

 - Variable: char * rl_library_version
     The version number of this revision of the library.

 - Variable: char * rl_terminal_name
     The terminal type, used for initialization.

 - Variable: char * rl_readline_name
     This variable is set to a unique name by each application using
     Readline.  The value allows conditional parsing of the inputrc file
     (*note Conditional Init Constructs::.).

 - Variable: FILE * rl_instream
     The stdio stream from which Readline reads input.

 - Variable: FILE * rl_outstream
     The stdio stream to which Readline performs output.

 - Variable: Function * rl_startup_hook
     If non-zero, this is the address of a function to call just before
     `readline' prints the first prompt.

 - Variable: Function * rl_pre_input_hook
     If non-zero, this is the address of a function to call after the
     first prompt has been printed and just before `readline' starts
     reading input characters.

 - Variable: Function * rl_event_hook
     If non-zero, this is the address of a function to call periodically
     when readline is waiting for terminal input.

 - Variable: Function * rl_getc_function
     If non-zero, `readline' will call indirectly through this pointer
     to get a character from the input stream.  By default, it is set to
     `rl_getc', the default `readline' character input function (*note
     Utility Functions::.).

 - Variable: VFunction * rl_redisplay_function
     If non-zero, `readline' will call indirectly through this pointer
     to update the display with the current contents of the editing
     buffer.  By default, it is set to `rl_redisplay', the default
     `readline' redisplay function (*note Redisplay::.).

 - Variable: Keymap rl_executing_keymap
     This variable is set to the keymap (*note Keymaps::.) in which the
     currently executing readline function was found.

 - Variable: Keymap rl_binding_keymap
     This variable is set to the keymap (*note Keymaps::.) in which the
     last key binding occurred.


File: readline.info,  Node: Readline Convenience Functions,  Next: Readline Signal Handling,  Prev: Readline Variables,  Up: Programming with GNU Readline

Readline Convenience Functions
==============================

* Menu:

* Function Naming::	How to give a function you write a name.
* Keymaps::		Making keymaps.
* Binding Keys::	Changing Keymaps.
* Associating Function Names and Bindings::	Translate function names to
						key sequences.
* Allowing Undoing::	How to make your functions undoable.
* Redisplay::		Functions to control line display.
* Modifying Text::	Functions to modify `rl_line_buffer'.
* Utility Functions::	Generally useful functions and hooks.
* Alternate Interface::	Using Readline in a `callback' fashion.


File: readline.info,  Node: Function Naming,  Next: Keymaps,  Up: Readline Convenience Functions

Naming a Function
-----------------

   The user can dynamically change the bindings of keys while using
Readline.  This is done by representing the function with a descriptive
name.  The user is able to type the descriptive name when referring to
the function.  Thus, in an init file, one might find

     Meta-Rubout:	backward-kill-word

   This binds the keystroke <Meta-Rubout> to the function
*descriptively* named `backward-kill-word'.  You, as the programmer,
should bind the functions you write to descriptive names as well.
Readline provides a function for doing that:

 - Function: int rl_add_defun (char *name, Function *function, int key)
     Add NAME to the list of named functions.  Make FUNCTION be the
     function that gets called.  If KEY is not -1, then bind it to
     FUNCTION using `rl_bind_key ()'.

   Using this function alone is sufficient for most applications.  It is
the recommended way to add a few functions to the default functions that
Readline has built in.  If you need to do something other than adding a
function to Readline, you may need to use the underlying functions
described below.


File: readline.info,  Node: Keymaps,  Next: Binding Keys,  Prev: Function Naming,  Up: Readline Convenience Functions

Selecting a Keymap
------------------

   Key bindings take place on a "keymap".  The keymap is the
association between the keys that the user types and the functions that
get run.  You can make your own keymaps, copy existing keymaps, and tell
Readline which keymap to use.

 - Function: Keymap rl_make_bare_keymap ()
     Returns a new, empty keymap.  The space for the keymap is
     allocated with `malloc ()'; you should `free ()' it when you are
     done.

 - Function: Keymap rl_copy_keymap (Keymap map)
     Return a new keymap which is a copy of MAP.

 - Function: Keymap rl_make_keymap ()
     Return a new keymap with the printing characters bound to
     rl_insert, the lowercase Meta characters bound to run their
     equivalents, and the Meta digits bound to produce numeric
     arguments.

 - Function: void rl_discard_keymap (Keymap keymap)
     Free the storage associated with KEYMAP.

   Readline has several internal keymaps.  These functions allow you to
change which keymap is active.

 - Function: Keymap rl_get_keymap ()
     Returns the currently active keymap.

 - Function: void rl_set_keymap (Keymap keymap)
     Makes KEYMAP the currently active keymap.

 - Function: Keymap rl_get_keymap_by_name (char *name)
     Return the keymap matching NAME.  NAME is one which would be
     supplied in a `set keymap' inputrc line (*note Readline Init
     File::.).

 - Function: char * rl_get_keymap_name (Keymap keymap)
     Return the name matching KEYMAP.  NAME is one which would be
     supplied in a `set keymap' inputrc line (*note Readline Init
     File::.).


File: readline.info,  Node: Binding Keys,  Next: Associating Function Names and Bindings,  Prev: Keymaps,  Up: Readline Convenience Functions

Binding Keys
------------

   You associate keys with functions through the keymap.  Readline has
several internal keymaps: `emacs_standard_keymap', `emacs_meta_keymap',
`emacs_ctlx_keymap', `vi_movement_keymap', and `vi_insertion_keymap'.
`emacs_standard_keymap' is the default, and the examples in this manual
assume that.

   Since `readline' installs a set of default key bindings the first
time it is called, there is always the danger that a custom binding
installed before the first call to `readline' will be overridden.  An
alternate mechanism is to install custom key bindings in an
initialization function assigned to the `rl_startup_hook' variable
(*note Readline Variables::.).

   These functions manage key bindings.

 - Function: int rl_bind_key (int key, Function *function)
     Binds KEY to FUNCTION in the currently active keymap.  Returns
     non-zero in the case of an invalid KEY.

 - Function: int rl_bind_key_in_map (int key, Function *function,
          Keymap map)
     Bind KEY to FUNCTION in MAP.  Returns non-zero in the case of an
     invalid KEY.

 - Function: int rl_unbind_key (int key)
     Bind KEY to the null function in the currently active keymap.
     Returns non-zero in case of error.

 - Function: int rl_unbind_key_in_map (int key, Keymap map)
     Bind KEY to the null function in MAP.  Returns non-zero in case of
     error.

 - Function: int rl_unbind_function_in_map (Function *function, Keymap
          map)
     Unbind all keys that execute FUNCTION in MAP.

 - Function: int rl_unbind_command_in_map (char *command, Keymap map)
     Unbind all keys that are bound to COMMAND in MAP.

 - Function: int rl_generic_bind (int type, char *keyseq, char *data,
          Keymap map)
     Bind the key sequence represented by the string KEYSEQ to the
     arbitrary pointer DATA.  TYPE says what kind of data is pointed to
     by DATA; this can be a function (`ISFUNC'), a macro (`ISMACR'), or
     a keymap (`ISKMAP').  This makes new keymaps as necessary.  The
     initial keymap in which to do bindings is MAP.

 - Function: int rl_parse_and_bind (char *line)
     Parse LINE as if it had been read from the `inputrc' file and
     perform any key bindings and variable assignments found (*note
     Readline Init File::.).

 - Function: int rl_read_init_file (char *filename)
     Read keybindings and variable assignments from FILENAME (*note
     Readline Init File::.).


File: readline.info,  Node: Associating Function Names and Bindings,  Next: Allowing Undoing,  Prev: Binding Keys,  Up: Readline Convenience Functions

Associating Function Names and Bindings
---------------------------------------

   These functions allow you to find out what keys invoke named
functions and the functions invoked by a particular key sequence.

 - Function: Function * rl_named_function (char *name)
     Return the function with name NAME.

 - Function: Function * rl_function_of_keyseq (char *keyseq, Keymap
          map, int *type)
     Return the function invoked by KEYSEQ in keymap MAP.  If MAP is
     NULL, the current keymap is used.  If TYPE is not NULL, the type
     of the object is returned in it (one of `ISFUNC', `ISKMAP', or
     `ISMACR').

 - Function: char ** rl_invoking_keyseqs (Function *function)
     Return an array of strings representing the key sequences used to
     invoke FUNCTION in the current keymap.

 - Function: char ** rl_invoking_keyseqs_in_map (Function *function,
          Keymap map)
     Return an array of strings representing the key sequences used to
     invoke FUNCTION in the keymap MAP.

 - Function: void rl_function_dumper (int readable)
     Print the readline function names and the key sequences currently
     bound to them to `rl_outstream'.  If READABLE is non-zero, the
     list is formatted in such a way that it can be made part of an
     `inputrc' file and re-read.

 - Function: void rl_list_funmap_names ()
     Print the names of all bindable Readline functions to
     `rl_outstream'.

 - Function: char ** rl_funmap_names ()
     Return a NULL terminated array of known function names.  The array
     is sorted.  The array itself is allocated, but not the strings
     inside.  You should free () the array when you done, but not the
     pointrs.


File: readline.info,  Node: Allowing Undoing,  Next: Redisplay,  Prev: Associating Function Names and Bindings,  Up: Readline Convenience Functions

Allowing Undoing
----------------

   Supporting the undo command is a painless thing, and makes your
functions much more useful.  It is certainly easy to try something if
you know you can undo it.  I could use an undo function for the stock
market.

   If your function simply inserts text once, or deletes text once, and
uses `rl_insert_text ()' or `rl_delete_text ()' to do it, then undoing
is already done for you automatically.

   If you do multiple insertions or multiple deletions, or any
combination of these operations, you should group them together into
one operation.  This is done with `rl_begin_undo_group ()' and
`rl_end_undo_group ()'.

   The types of events that can be undone are:

     enum undo_code { UNDO_DELETE, UNDO_INSERT, UNDO_BEGIN, UNDO_END };

   Notice that `UNDO_DELETE' means to insert some text, and
`UNDO_INSERT' means to delete some text.  That is, the undo code tells
undo what to undo, not how to undo it.  `UNDO_BEGIN' and `UNDO_END' are
tags added by `rl_begin_undo_group ()' and `rl_end_undo_group ()'.

 - Function: int rl_begin_undo_group ()
     Begins saving undo information in a group construct.  The undo
     information usually comes from calls to `rl_insert_text ()' and
     `rl_delete_text ()', but could be the result of calls to
     `rl_add_undo ()'.

 - Function: int rl_end_undo_group ()
     Closes the current undo group started with `rl_begin_undo_group
     ()'.  There should be one call to `rl_end_undo_group ()' for each
     call to `rl_begin_undo_group ()'.

 - Function: void rl_add_undo (enum undo_code what, int start, int end,
          char *text)
     Remember how to undo an event (according to WHAT).  The affected
     text runs from START to END, and encompasses TEXT.

 - Function: void free_undo_list ()
     Free the existing undo list.

 - Function: int rl_do_undo ()
     Undo the first thing on the undo list.  Returns `0' if there was
     nothing to undo, non-zero if something was undone.

   Finally, if you neither insert nor delete text, but directly modify
the existing text (e.g., change its case), call `rl_modifying ()' once,
just before you modify the text.  You must supply the indices of the
text range that you are going to modify.

 - Function: int rl_modifying (int start, int end)
     Tell Readline to save the text between START and END as a single
     undo unit.  It is assumed that you will subsequently modify that
     text.


File: readline.info,  Node: Redisplay,  Next: Modifying Text,  Prev: Allowing Undoing,  Up: Readline Convenience Functions

Redisplay
---------

 - Function: void rl_redisplay ()
     Change what's displayed on the screen to reflect the current
     contents of `rl_line_buffer'.

 - Function: int rl_forced_update_display ()
     Force the line to be updated and redisplayed, whether or not
     Readline thinks the screen display is correct.

 - Function: int rl_on_new_line ()
     Tell the update functions that we have moved onto a new (empty)
     line, usually after ouputting a newline.

 - Function: int rl_on_new_line_with_prompt ()
     Tell the update functions that we have moved onto a new line, with
     RL_PROMPT already displayed.  This could be used by applications
     that want to output the prompt string themselves, but still need
     Readline to know the prompt string length for redisplay.  It
     should be used after setting RL_ALREADY_PROMPTED.

 - Function: int rl_reset_line_state ()
     Reset the display state to a clean state and redisplay the current
     line starting on a new line.

 - Function: int rl_message (va_alist)
     The arguments are a string as would be supplied to `printf'.  The
     resulting string is displayed in the "echo area".  The echo area
     is also used to display numeric arguments and search strings.

 - Function: int rl_clear_message ()
     Clear the message in the echo area.

 - Function: void rl_save_prompt ()
     Save the local Readline prompt display state in preparation for
     displaying a new message in the message area with `rl_message'.

 - Function: void rl_restore_prompt ()
     Restore the local Readline prompt display state saved by the most
     recent call to `rl_save_prompt'.


File: readline.info,  Node: Modifying Text,  Next: Utility Functions,  Prev: Redisplay,  Up: Readline Convenience Functions

Modifying Text
--------------

 - Function: int rl_insert_text (char *text)
     Insert TEXT into the line at the current cursor position.

 - Function: int rl_delete_text (int start, int end)
     Delete the text between START and END in the current line.

 - Function: char * rl_copy_text (int start, int end)
     Return a copy of the text between START and END in the current
     line.

 - Function: int rl_kill_text (int start, int end)
     Copy the text between START and END in the current line to the
     kill ring, appending or prepending to the last kill if the last
     command was a kill command.  The text is deleted.  If START is
     less than END, the text is appended, otherwise prepended.  If the
     last command was not a kill, a new kill ring slot is used.


File: readline.info,  Node: Utility Functions,  Next: Alternate Interface,  Prev: Modifying Text,  Up: Readline Convenience Functions

Utility Functions
-----------------

 - Function: int rl_read_key ()
     Return the next character available.  This handles input inserted
     into the input stream via PENDING INPUT (*note Readline
     Variables::.)  and `rl_stuff_char ()', macros, and characters read
     from the keyboard.

 - Function: int rl_getc (FILE *)
     Return the next character available from the keyboard.

 - Function: int rl_stuff_char (int c)
     Insert C into the Readline input stream.  It will be "read" before
     Readline attempts to read characters from the terminal with
     `rl_read_key ()'.

 - Function: int rl_extend_line_buffer (int len)
     Ensure that `rl_line_buffer' has enough space to hold LEN
     characters, possibly reallocating it if necessary.

 - Function: int rl_initialize ()
     Initialize or re-initialize Readline's internal state.

 - Function: int rl_reset_terminal (char *terminal_name)
     Reinitialize Readline's idea of the terminal settings using
     TERMINAL_NAME as the terminal type (e.g., `vt100').  If
     TERMINAL_NAME is NULL, the value of the `TERM' environment
     variable is used.

 - Function: int alphabetic (int c)
     Return 1 if C is an alphabetic character.

 - Function: int numeric (int c)
     Return 1 if C is a numeric character.

 - Function: int ding ()
     Ring the terminal bell, obeying the setting of `bell-style'.

 - Function: void rl_display_match_list (char **matches, int len, int
          max)
     A convenience function for displaying a list of strings in
     columnar format on Readline's output stream.  `matches' is the list
     of strings, in argv format, such as a list of completion matches.
     `len' is the number of strings in `matches', and `max' is the
     length of the longest string in `matches'.  This function uses the
     setting of `print-completions-horizontally' to select how the
     matches are displayed (*note Readline Init File Syntax::.).

   The following are implemented as macros, defined in `chartypes.h'.

 - Function: int uppercase_p (int c)
     Return 1 if C is an uppercase alphabetic character.

 - Function: int lowercase_p (int c)
     Return 1 if C is a lowercase alphabetic character.

 - Function: int digit_p (int c)
     Return 1 if C is a numeric character.

 - Function: int to_upper (int c)
     If C is a lowercase alphabetic character, return the corresponding
     uppercase character.

 - Function: int to_lower (int c)
     If C is an uppercase alphabetic character, return the corresponding
     lowercase character.

 - Function: int digit_value (int c)
     If C is a number, return the value it represents.


File: readline.info,  Node: Alternate Interface,  Prev: Utility Functions,  Up: Readline Convenience Functions

Alternate Interface
-------------------

   An alternate interface is available to plain `readline()'.  Some
applications need to interleave keyboard I/O with file, device, or
window system I/O, typically by using a main loop to `select()' on
various file descriptors.  To accomodate this need, readline can also
be invoked as a `callback' function from an event loop.  There are
functions available to make this easy.

 - Function: void rl_callback_handler_install (char *prompt, Vfunction
          *lhandler)
     Set up the terminal for readline I/O and display the initial
     expanded value of PROMPT.  Save the value of LHANDLER to use as a
     callback when a complete line of input has been entered.

 - Function: void rl_callback_read_char ()
     Whenever an application determines that keyboard input is
     available, it should call `rl_callback_read_char()', which will
     read the next character from the current input source.  If that
     character completes the line, `rl_callback_read_char' will invoke
     the LHANDLER function saved by `rl_callback_handler_install' to
     process the line.  `EOF' is  indicated by calling LHANDLER with a
     `NULL' line.

 - Function: void rl_callback_handler_remove ()
     Restore the terminal to its initial state and remove the line
     handler.  This may be called from within a callback as well as
     independently.

An Example
----------

   Here is a function which changes lowercase characters to their
uppercase equivalents, and uppercase characters to lowercase.  If this
function was bound to `M-c', then typing `M-c' would change the case of
the character under point.  Typing `M-1 0 M-c' would change the case of
the following 10 characters, leaving the cursor on the last character
changed.

     /* Invert the case of the COUNT following characters. */
     int
     invert_case_line (count, key)
          int count, key;
     {
       register int start, end, i;
     
       start = rl_point;
     
       if (rl_point >= rl_end)
         return (0);
     
       if (count < 0)
         {
           direction = -1;
           count = -count;
         }
       else
         direction = 1;
     
       /* Find the end of the range to modify. */
       end = start + (count * direction);
     
       /* Force it to be within range. */
       if (end > rl_end)
         end = rl_end;
       else if (end < 0)
         end = 0;
     
       if (start == end)
         return (0);
     
       if (start > end)
         {
           int temp = start;
           start = end;
           end = temp;
         }
     
       /* Tell readline that we are modifying the line, so it will save
          the undo information. */
       rl_modifying (start, end);
     
       for (i = start; i != end; i++)
         {
           if (uppercase_p (rl_line_buffer[i]))
             rl_line_buffer[i] = to_lower (rl_line_buffer[i]);
           else if (lowercase_p (rl_line_buffer[i]))
             rl_line_buffer[i] = to_upper (rl_line_buffer[i]);
         }
       /* Move point to on top of the last character changed. */
       rl_point = (direction == 1) ? end - 1 : start;
       return (0);
     }


File: readline.info,  Node: Readline Signal Handling,  Next: Custom Completers,  Prev: Readline Convenience Functions,  Up: Programming with GNU Readline

Readline Signal Handling
========================

   Signals are asynchronous events sent to a process by the Unix kernel,
sometimes on behalf of another process.  They are intended to indicate
exceptional events, like a user pressing the interrupt key on his
terminal, or a network connection being broken.  There is a class of
signals that can be sent to the process currently reading input from
the keyboard.  Since Readline changes the terminal attributes when it
is called, it needs to perform special processing when a signal is
received to restore the terminal to a sane state, or provide application
writers with functions to do so manually.

   Readline contains an internal signal handler that is installed for a
number of signals (`SIGINT', `SIGQUIT', `SIGTERM', `SIGALRM',
`SIGTSTP', `SIGTTIN', and `SIGTTOU').  When one of these signals is
received, the signal handler will reset the terminal attributes to
those that were in effect before `readline ()' was called, reset the
signal handling to what it was before `readline ()' was called, and
resend the signal to the calling application.  If and when the calling
application's signal handler returns, Readline will reinitialize the
terminal and continue to accept input.  When a `SIGINT' is received,
the Readline signal handler performs some additional work, which will
cause any partially-entered line to be aborted (see the description of
`rl_free_line_state ()').

   There is an additional Readline signal handler, for `SIGWINCH', which
the kernel sends to a process whenever the terminal's size changes (for
example, if a user resizes an `xterm').  The Readline `SIGWINCH'
handler updates Readline's internal screen size state, and then calls
any `SIGWINCH' signal handler the calling application has installed.
Readline calls the application's `SIGWINCH' signal handler without
resetting the terminal to its original state.  If the application's
signal handler does more than update its idea of the terminal size and
return (for example, a `longjmp' back to a main processing loop), it
*must* call `rl_cleanup_after_signal ()' (described below), to restore
the terminal state.

   Readline provides two variables that allow application writers to
control whether or not it will catch certain signals and act on them
when they are received.  It is important that applications change the
values of these variables only when calling `readline ()', not in a
signal handler, so Readline's internal signal state is not corrupted.

 - Variable: int rl_catch_signals
     If this variable is non-zero, Readline will install signal
     handlers for `SIGINT', `SIGQUIT', `SIGTERM', `SIGALRM', `SIGTSTP',
     `SIGTTIN', and `SIGTTOU'.

     The default value of `rl_catch_signals' is 1.

 - Variable: int rl_catch_sigwinch
     If this variable is non-zero, Readline will install a signal
     handler for `SIGWINCH'.

     The default value of `rl_catch_sigwinch' is 1.

   If an application does not wish to have Readline catch any signals,
or to handle signals other than those Readline catches (`SIGHUP', for
example), Readline provides convenience functions to do the necessary
terminal and internal state cleanup upon receipt of a signal.

 - Function: void rl_cleanup_after_signal (void)
     This function will reset the state of the terminal to what it was
     before `readline ()' was called, and remove the Readline signal
     handlers for all signals, depending on the values of
     `rl_catch_signals' and `rl_catch_sigwinch'.

 - Function: void rl_free_line_state (void)
     This will free any partial state associated with the current input
     line (undo information, any partial history entry, any
     partially-entered keyboard macro, and any partially-entered
     numeric argument).  This should be called before
     `rl_cleanup_after_signal ()'.  The Readline signal handler for
     `SIGINT' calls this to abort the current input line.

 - Function: void rl_reset_after_signal (void)
     This will reinitialize the terminal and reinstall any Readline
     signal handlers, depending on the values of `rl_catch_signals' and
     `rl_catch_sigwinch'.

   If an application does not wish Readline to catch `SIGWINCH', it may
call `rl_resize_terminal ()' to force Readline to update its idea of
the terminal size when a `SIGWINCH' is received.

 - Function: void rl_resize_terminal (void)
     Update Readline's internal screen size.

   The following functions install and remove Readline's signal
handlers.

 - Function: int rl_set_signals (void)
     Install Readline's signal handler for `SIGINT', `SIGQUIT',
     `SIGTERM', `SIGALRM', `SIGTSTP', `SIGTTIN', `SIGTTOU', and
     `SIGWINCH', depending on the values of `rl_catch_signals' and
     `rl_catch_sigwinch'.

 - Function: int rl_clear_signals (void)
     Remove all of the Readline signal handlers installed by
     `rl_set_signals ()'.


File: readline.info,  Node: Custom Completers,  Prev: Readline Signal Handling,  Up: Programming with GNU Readline

Custom Completers
=================

   Typically, a program that reads commands from the user has a way of
disambiguating commands and data.  If your program is one of these, then
it can provide completion for commands, data, or both.  The following
sections describe how your program and Readline cooperate to provide
this service.

* Menu:

* How Completing Works::	The logic used to do completion.
* Completion Functions::	Functions provided by Readline.
* Completion Variables::	Variables which control completion.
* A Short Completion Example::	An example of writing completer subroutines.


File: readline.info,  Node: How Completing Works,  Next: Completion Functions,  Up: Custom Completers

How Completing Works
--------------------

   In order to complete some text, the full list of possible completions
must be available.  That is, it is not possible to accurately expand a
partial word without knowing all of the possible words which make sense
in that context.  The Readline library provides the user interface to
completion, and two of the most common completion functions:  filename
and username.  For completing other types of text, you must write your
own completion function.  This section describes exactly what such
functions must do, and provides an example.

   There are three major functions used to perform completion:

  1. The user-interface function `rl_complete ()'.  This function is
     called with the same arguments as other Readline functions
     intended for interactive use:  COUNT and INVOKING_KEY.  It
     isolates the word to be completed and calls `completion_matches
     ()' to generate a list of possible completions.  It then either
     lists the possible completions, inserts the possible completions,
     or actually performs the completion, depending on which behavior
     is desired.

  2. The internal function `completion_matches ()' uses your
     "generator" function to generate the list of possible matches, and
     then returns the array of these matches.  You should place the
     address of your generator function in
     `rl_completion_entry_function'.

  3. The generator function is called repeatedly from
     `completion_matches ()', returning a string each time.  The
     arguments to the generator function are TEXT and STATE.  TEXT is
     the partial word to be completed.  STATE is zero the first time
     the function is called, allowing the generator to perform any
     necessary initialization, and a positive non-zero integer for each
     subsequent call.  When the generator function returns `(char
     *)NULL' this signals `completion_matches ()' that there are no
     more possibilities left.  Usually the generator function computes
     the list of possible completions when STATE is zero, and returns
     them one at a time on subsequent calls.  Each string the generator
     function returns as a match must be allocated with `malloc()';
     Readline frees the strings when it has finished with them.


 - Function: int rl_complete (int ignore, int invoking_key)
     Complete the word at or before point.  You have supplied the
     function that does the initial simple matching selection algorithm
     (see `completion_matches ()').  The default is to do filename
     completion.

 - Variable: Function * rl_completion_entry_function
     This is a pointer to the generator function for `completion_matches
     ()'.  If the value of `rl_completion_entry_function' is `(Function
     *)NULL' then the default filename generator function,
     `filename_completion_function ()', is used.


File: readline.info,  Node: Completion Functions,  Next: Completion Variables,  Prev: How Completing Works,  Up: Custom Completers

Completion Functions
--------------------

   Here is the complete list of callable completion functions present in
Readline.

 - Function: int rl_complete_internal (int what_to_do)
     Complete the word at or before point.  WHAT_TO_DO says what to do
     with the completion.  A value of `?' means list the possible
     completions.  `TAB' means do standard completion.  `*' means
     insert all of the possible completions.  `!' means to display all
     of the possible completions, if there is more than one, as well as
     performing partial completion.

 - Function: int rl_complete (int ignore, int invoking_key)
     Complete the word at or before point.  You have supplied the
     function that does the initial simple matching selection algorithm
     (see `completion_matches ()' and `rl_completion_entry_function').
     The default is to do filename completion.  This calls
     `rl_complete_internal ()' with an argument depending on
     INVOKING_KEY.

 - Function: int rl_possible_completions (int count, int invoking_key))
     List the possible completions.  See description of `rl_complete
     ()'.  This calls `rl_complete_internal ()' with an argument of `?'.

 - Function: int rl_insert_completions (int count, int invoking_key))
     Insert the list of possible completions into the line, deleting the
     partially-completed word.  See description of `rl_complete ()'.
     This calls `rl_complete_internal ()' with an argument of `*'.

 - Function: char ** completion_matches (char *text, CPFunction
          *entry_func)
     Returns an array of `(char *)' which is a list of completions for
     TEXT.  If there are no completions, returns `(char **)NULL'.  The
     first entry in the returned array is the substitution for TEXT.
     The remaining entries are the possible completions.  The array is
     terminated with a `NULL' pointer.

     ENTRY_FUNC is a function of two args, and returns a `(char *)'.
     The first argument is TEXT.  The second is a state argument; it is
     zero on the first call, and non-zero on subsequent calls.
     ENTRY_FUNC returns a `NULL'  pointer to the caller when there are
     no more matches.

 - Function: char * filename_completion_function (char *text, int state)
     A generator function for filename completion in the general case.
     Note that completion in Bash is a little different because of all
     the pathnames that must be followed when looking up completions
     for a command.  The Bash source is a useful reference for writing
     custom completion functions.

 - Function: char * username_completion_function (char *text, int state)
     A completion generator for usernames.  TEXT contains a partial
     username preceded by a random character (usually `~').  As with all
     completion generators, STATE is zero on the first call and non-zero
     for subsequent calls.


File: readline.info,  Node: Completion Variables,  Next: A Short Completion Example,  Prev: Completion Functions,  Up: Custom Completers

Completion Variables
--------------------

 - Variable: Function * rl_completion_entry_function
     A pointer to the generator function for `completion_matches ()'.
     `NULL' means to use `filename_completion_function ()', the default
     filename completer.

 - Variable: CPPFunction * rl_attempted_completion_function
     A pointer to an alternative function to create matches.  The
     function is called with TEXT, START, and END.  START and END are
     indices in `rl_line_buffer' saying what the boundaries of TEXT
     are.  If this function exists and returns `NULL', or if this
     variable is set to `NULL', then `rl_complete ()' will call the
     value of `rl_completion_entry_function' to generate matches,
     otherwise the array of strings returned will be used.

 - Variable: CPFunction * rl_filename_quoting_function
     A pointer to a function that will quote a filename in an
     application- specific fashion.  This is called if filename
     completion is being attempted and one of the characters in
     `rl_filename_quote_characters' appears in a completed filename.
     The function is called with TEXT, MATCH_TYPE, and QUOTE_POINTER.
     The TEXT is the filename to be quoted.  The MATCH_TYPE is either
     `SINGLE_MATCH', if there is only one completion match, or
     `MULT_MATCH'.  Some functions use this to decide whether or not to
     insert a closing quote character.  The QUOTE_POINTER is a pointer
     to any opening quote character the user typed.  Some functions
     choose to reset this character.

 - Variable: CPFunction * rl_filename_dequoting_function
     A pointer to a function that will remove application-specific
     quoting characters from a filename before completion is attempted,
     so those characters do not interfere with matching the text
     against names in the filesystem.  It is called with TEXT, the text
     of the word to be dequoted, and QUOTE_CHAR, which is the quoting
     character that delimits the filename (usually `'' or `"').  If
     QUOTE_CHAR is zero, the filename was not in an embedded string.

 - Variable: Function * rl_char_is_quoted_p
     A pointer to a function to call that determines whether or not a
     specific character in the line buffer is quoted, according to
     whatever quoting mechanism the program calling readline uses.  The
     function is called with two arguments: TEXT, the text of the line,
     and INDEX, the index of the character in the line.  It is used to
     decide whether a character found in
     `rl_completer_word_break_characters' should be used to break words
     for the completer.

 - Variable: int rl_completion_query_items
     Up to this many items will be displayed in response to a
     possible-completions call.  After that, we ask the user if she is
     sure she wants to see them all.  The default value is 100.

 - Variable: char * rl_basic_word_break_characters
     The basic list of characters that signal a break between words for
     the completer routine.  The default value of this variable is the
     characters which break words for completion in Bash, i.e., `"
     \t\n\"\\'`@$><=;|&{("'.

 - Variable: char * rl_basic_quote_characters
     List of quote characters which can cause a word break.

 - Variable: char * rl_completer_word_break_characters
     The list of characters that signal a break between words for
     `rl_complete_internal ()'.  The default list is the value of
     `rl_basic_word_break_characters'.

 - Variable: char * rl_completer_quote_characters
     List of characters which can be used to quote a substring of the
     line.  Completion occurs on the entire substring, and within the
     substring `rl_completer_word_break_characters' are treated as any
     other character, unless they also appear within this list.

 - Variable: char * rl_filename_quote_characters
     A list of characters that cause a filename to be quoted by the
     completer when they appear in a completed filename.  The default
     is the null string.

 - Variable: char * rl_special_prefixes
     The list of characters that are word break characters, but should
     be left in TEXT when it is passed to the completion function.
     Programs can use this to help determine what kind of completing to
     do.  For instance, Bash sets this variable to "$@" so that it can
     complete shell variables and hostnames.

 - Variable: int rl_completion_append_character
     When a single completion alternative matches at the end of the
     command line, this character is appended to the inserted
     completion text.  The default is a space character (` ').  Setting
     this to the null character (`\0') prevents anything being appended
     automatically.  This can be changed in custom completion functions
     to provide the "most sensible word separator character" according
     to an application-specific command line syntax specification.

 - Variable: int rl_ignore_completion_duplicates
     If non-zero, then disallow duplicates in the matches.  Default is
     1.

 - Variable: int rl_filename_completion_desired
     Non-zero means that the results of the matches are to be treated as
     filenames.  This is *always* zero on entry, and can only be changed
     within a completion entry generator function.  If it is set to a
     non-zero value, directory names have a slash appended and Readline
     attempts to quote completed filenames if they contain any embedded
     word break characters.

 - Variable: int rl_filename_quoting_desired
     Non-zero means that the results of the matches are to be quoted
     using double quotes (or an application-specific quoting mechanism)
     if the completed filename contains any characters in
     `rl_filename_quote_chars'.  This is *always* non-zero on entry,
     and can only be changed within a completion entry generator
     function.  The quoting is effected via a call to the function
     pointed to by `rl_filename_quoting_function'.

 - Variable: int rl_inhibit_completion
     If this variable is non-zero, completion is inhibit<ed.  The
     completion character will be inserted as any other bound to
     `self-insert'.

 - Variable: Function * rl_ignore_some_completions_function
     This function, if defined, is called by the completer when real
     filename completion is done, after all the matching names have
     been generated.  It is passed a `NULL' terminated array of matches.
     The first element (`matches[0]') is the maximal substring common
     to all matches. This function can re-arrange the list of matches
     as required, but each element deleted from the array must be freed.

 - Variable: Function * rl_directory_completion_hook
     This function, if defined, is allowed to modify the directory
     portion of filenames Readline completes.  It is called with the
     address of a string (the current directory name) as an argument.
     It could be used to expand symbolic links or shell variables in
     pathnames.

 - Variable: VFunction * rl_completion_display_matches_hook
     If non-zero, then this is the address of a function to call when
     completing a word would normally display the list of possible
     matches.  This function is called in lieu of Readline displaying
     the list.  It takes three arguments: (`char **'MATCHES, `int'
     NUM_MATCHES, `int' MAX_LENGTH) where MATCHES is the array of
     matching strings, NUM_MATCHES is the number of strings in that
     array, and MAX_LENGTH is the length of the longest string in that
     array.  Readline provides a convenience function,
     `rl_display_match_list', that takes care of doing the display to
     Readline's output stream.  That function may be called from this
     hook.


File: readline.info,  Node: A Short Completion Example,  Prev: Completion Variables,  Up: Custom Completers

A Short Completion Example
--------------------------

   Here is a small application demonstrating the use of the GNU Readline
library.  It is called `fileman', and the source code resides in
`examples/fileman.c'.  This sample application provides completion of
command names, line editing features, and access to the history list.

     /* fileman.c -- A tiny application which demonstrates how to use the
        GNU Readline library.  This application interactively allows users
        to manipulate files and their modes. */
     
     #include <stdio.h>
     #include <sys/types.h>
     #include <sys/file.h>
     #include <sys/stat.h>
     #include <sys/errno.h>
     
     #include <readline/readline.h>
     #include <readline/history.h>
     
     extern char *getwd ();
     extern char *xmalloc ();
     
     /* The names of functions that actually do the manipulation. */
     int com_list (), com_view (), com_rename (), com_stat (), com_pwd ();
     int com_delete (), com_help (), com_cd (), com_quit ();
     
     /* A structure which contains information on the commands this program
        can understand. */
     
     typedef struct {
       char *name;			/* User printable name of the function. */
       Function *func;		/* Function to call to do the job. */
       char *doc;			/* Documentation for this function.  */
     } COMMAND;
     
     COMMAND commands[] = {
       { "cd", com_cd, "Change to directory DIR" },
       { "delete", com_delete, "Delete FILE" },
       { "help", com_help, "Display this text" },
       { "?", com_help, "Synonym for `help'" },
       { "list", com_list, "List files in DIR" },
       { "ls", com_list, "Synonym for `list'" },
       { "pwd", com_pwd, "Print the current working directory" },
       { "quit", com_quit, "Quit using Fileman" },
       { "rename", com_rename, "Rename FILE to NEWNAME" },
       { "stat", com_stat, "Print out statistics on FILE" },
       { "view", com_view, "View the contents of FILE" },
       { (char *)NULL, (Function *)NULL, (char *)NULL }
     };
     
     /* Forward declarations. */
     char *stripwhite ();
     COMMAND *find_command ();
     
     /* The name of this program, as taken from argv[0]. */
     char *progname;
     
     /* When non-zero, this global means the user is done using this program. */
     int done;
     
     char *
     dupstr (s)
          int s;
     {
       char *r;
     
       r = xmalloc (strlen (s) + 1);
       strcpy (r, s);
       return (r);
     }
     
     main (argc, argv)
          int argc;
          char **argv;
     {
       char *line, *s;
     
       progname = argv[0];
     
       initialize_readline ();	/* Bind our completer. */
     
       /* Loop reading and executing lines until the user quits. */
       for ( ; done == 0; )
         {
           line = readline ("FileMan: ");
     
           if (!line)
             break;
     
           /* Remove leading and trailing whitespace from the line.
              Then, if there is anything left, add it to the history list
              and execute it. */
           s = stripwhite (line);
     
           if (*s)
             {
               add_history (s);
               execute_line (s);
             }
     
           free (line);
         }
       exit (0);
     }
     
     /* Execute a command line. */
     int
     execute_line (line)
          char *line;
     {
       register int i;
       COMMAND *command;
       char *word;
     
       /* Isolate the command word. */
       i = 0;
       while (line[i] && whitespace (line[i]))
         i++;
       word = line + i;
     
       while (line[i] && !whitespace (line[i]))
         i++;
     
       if (line[i])
         line[i++] = '\0';
     
       command = find_command (word);
     
       if (!command)
         {
           fprintf (stderr, "%s: No such command for FileMan.\n", word);
           return (-1);
         }
     
       /* Get argument to command, if any. */
       while (whitespace (line[i]))
         i++;
     
       word = line + i;
     
       /* Call the function. */
       return ((*(command->func)) (word));
     }
     
     /* Look up NAME as the name of a command, and return a pointer to that
        command.  Return a NULL pointer if NAME isn't a command name. */
     COMMAND *
     find_command (name)
          char *name;
     {
       register int i;
     
       for (i = 0; commands[i].name; i++)
         if (strcmp (name, commands[i].name) == 0)
           return (&commands[i]);
     
       return ((COMMAND *)NULL);
     }
     
     /* Strip whitespace from the start and end of STRING.  Return a pointer
        into STRING. */
     char *
     stripwhite (string)
          char *string;
     {
       register char *s, *t;
     
       for (s = string; whitespace (*s); s++)
         ;
     
       if (*s == 0)
         return (s);
     
       t = s + strlen (s) - 1;
       while (t > s && whitespace (*t))
         t--;
       *++t = '\0';
     
       return s;
     }
     
     /* **************************************************************** */
     /*                                                                  */
     /*                  Interface to Readline Completion                */
     /*                                                                  */
     /* **************************************************************** */
     
     char *command_generator ();
     char **fileman_completion ();
     
     /* Tell the GNU Readline library how to complete.  We want to try to complete
        on command names if this is the first word in the line, or on filenames
        if not. */
     initialize_readline ()
     {
       /* Allow conditional parsing of the ~/.inputrc file. */
       rl_readline_name = "FileMan";
     
       /* Tell the completer that we want a crack first. */
       rl_attempted_completion_function = (CPPFunction *)fileman_completion;
     }
     
     /* Attempt to complete on the contents of TEXT.  START and END bound the
        region of rl_line_buffer that contains the word to complete.  TEXT is
        the word to complete.  We can use the entire contents of rl_line_buffer
        in case we want to do some simple parsing.  Return the array of matches,
        or NULL if there aren't any. */
     char **
     fileman_completion (text, start, end)
          char *text;
          int start, end;
     {
       char **matches;
     
       matches = (char **)NULL;
     
       /* If this word is at the start of the line, then it is a command
          to complete.  Otherwise it is the name of a file in the current
          directory. */
       if (start == 0)
         matches = completion_matches (text, command_generator);
     
       return (matches);
     }
     
     /* Generator function for command completion.  STATE lets us know whether
        to start from scratch; without any state (i.e. STATE == 0), then we
        start at the top of the list. */
     char *
     command_generator (text, state)
          char *text;
          int state;
     {
       static int list_index, len;
       char *name;
     
       /* If this is a new word to complete, initialize now.  This includes
          saving the length of TEXT for efficiency, and initializing the index
          variable to 0. */
       if (!state)
         {
           list_index = 0;
           len = strlen (text);
         }
     
       /* Return the next name which partially matches from the command list. */
       while (name = commands[list_index].name)
         {
           list_index++;
     
           if (strncmp (name, text, len) == 0)
             return (dupstr(name));
         }
     
       /* If no names matched, then return NULL. */
       return ((char *)NULL);
     }
     
     /* **************************************************************** */
     /*                                                                  */
     /*                       FileMan Commands                           */
     /*                                                                  */
     /* **************************************************************** */
     
     /* String to pass to system ().  This is for the LIST, VIEW and RENAME
        commands. */
     static char syscom[1024];
     
     /* List the file(s) named in arg. */
     com_list (arg)
          char *arg;
     {
       if (!arg)
         arg = "";
     
       sprintf (syscom, "ls -FClg %s", arg);
       return (system (syscom));
     }
     
     com_view (arg)
          char *arg;
     {
       if (!valid_argument ("view", arg))
         return 1;
     
       sprintf (syscom, "more %s", arg);
       return (system (syscom));
     }
     
     com_rename (arg)
          char *arg;
     {
       too_dangerous ("rename");
       return (1);
     }
     
     com_stat (arg)
          char *arg;
     {
       struct stat finfo;
     
       if (!valid_argument ("stat", arg))
         return (1);
     
       if (stat (arg, &finfo) == -1)
         {
           perror (arg);
           return (1);
         }
     
       printf ("Statistics for `%s':\n", arg);
     
       printf ("%s has %d link%s, and is %d byte%s in length.\n", arg,
               finfo.st_nlink,
               (finfo.st_nlink == 1) ? "" : "s",
               finfo.st_size,
               (finfo.st_size == 1) ? "" : "s");
       printf ("Inode Last Change at: %s", ctime (&finfo.st_ctime));
       printf ("      Last access at: %s", ctime (&finfo.st_atime));
       printf ("    Last modified at: %s", ctime (&finfo.st_mtime));
       return (0);
     }
     
     com_delete (arg)
          char *arg;
     {
       too_dangerous ("delete");
       return (1);
     }
     
     /* Print out help for ARG, or for all of the commands if ARG is
        not present. */
     com_help (arg)
          char *arg;
     {
       register int i;
       int printed = 0;
     
       for (i = 0; commands[i].name; i++)
         {
           if (!*arg || (strcmp (arg, commands[i].name) == 0))
             {
               printf ("%s\t\t%s.\n", commands[i].name, commands[i].doc);
               printed++;
             }
         }
     
       if (!printed)
         {
           printf ("No commands match `%s'.  Possibilties are:\n", arg);
     
           for (i = 0; commands[i].name; i++)
             {
               /* Print in six columns. */
               if (printed == 6)
                 {
                   printed = 0;
                   printf ("\n");
                 }
     
               printf ("%s\t", commands[i].name);
               printed++;
             }
     
           if (printed)
             printf ("\n");
         }
       return (0);
     }
     
     /* Change to the directory ARG. */
     com_cd (arg)
          char *arg;
     {
       if (chdir (arg) == -1)
         {
           perror (arg);
           return 1;
         }
     
       com_pwd ("");
       return (0);
     }
     
     /* Print out the current working directory. */
     com_pwd (ignore)
          char *ignore;
     {
       char dir[1024], *s;
     
       s = getwd (dir);
       if (s == 0)
         {
           printf ("Error getting pwd: %s\n", dir);
           return 1;
         }
     
       printf ("Current directory is %s\n", dir);
       return 0;
     }
     
     /* The user wishes to quit using this program.  Just set DONE non-zero. */
     com_quit (arg)
          char *arg;
     {
       done = 1;
       return (0);
     }
     
     /* Function which tells you that you can't do this. */
     too_dangerous (caller)
          char *caller;
     {
       fprintf (stderr,
                "%s: Too dangerous for me to distribute.  Write it yourself.\n",
                caller);
     }
     
     /* Return non-zero if ARG is a valid argument for CALLER, else print
        an error message and return zero. */
     int
     valid_argument (caller, arg)
          char *caller, *arg;
     {
       if (!arg || !*arg)
         {
           fprintf (stderr, "%s: Argument required.\n", caller);
           return (0);
         }
     
       return (1);
     }


File: readline.info,  Node: Concept Index,  Next: Function and Variable Index,  Prev: Programming with GNU Readline,  Up: Top

Concept Index
*************

* Menu:

* command editing:                       Readline Bare Essentials.
* editing command lines:                 Readline Bare Essentials.
* initialization file, readline:         Readline Init File.
* interaction, readline:                 Readline Interaction.
* kill ring:                             Readline Killing Commands.
* killing text:                          Readline Killing Commands.
* notation, readline:                    Readline Bare Essentials.
* readline, function:                    Basic Behavior.
* yanking text:                          Readline Killing Commands.


File: readline.info,  Node: Function and Variable Index,  Prev: Concept Index,  Up: Top

Function and Variable Index
***************************

* Menu:

* abort (C-g):                           Miscellaneous Commands.
* accept-line (Newline, Return):         Commands For History.
* alphabetic:                            Utility Functions.
* backward-char (C-b):                   Commands For Moving.
* backward-delete-char (Rubout):         Commands For Text.
* backward-kill-line (C-x Rubout):       Commands For Killing.
* backward-kill-word (M-DEL):            Commands For Killing.
* backward-word (M-b):                   Commands For Moving.
* beginning-of-history (M-<):            Commands For History.
* beginning-of-line (C-a):               Commands For Moving.
* bell-style:                            Readline Init File Syntax.
* call-last-kbd-macro (C-x e):           Keyboard Macros.
* capitalize-word (M-c):                 Commands For Text.
* character-search (C-]):                Miscellaneous Commands.
* character-search-backward (M-C-]):     Miscellaneous Commands.
* clear-screen (C-l):                    Commands For Moving.
* comment-begin:                         Readline Init File Syntax.
* complete (TAB):                        Commands For Completion.
* completion-query-items:                Readline Init File Syntax.
* completion_matches:                    Completion Functions.
* convert-meta:                          Readline Init File Syntax.
* copy-backward-word ():                 Commands For Killing.
* copy-forward-word ():                  Commands For Killing.
* copy-region-as-kill ():                Commands For Killing.
* delete-char (C-d):                     Commands For Text.
* delete-char-or-list ():                Commands For Completion.
* delete-horizontal-space ():            Commands For Killing.
* digit-argument (M-0, M-1, ... M--):    Numeric Arguments.
* digit_p:                               Utility Functions.
* digit_value:                           Utility Functions.
* ding:                                  Utility Functions.
* disable-completion:                    Readline Init File Syntax.
* do-uppercase-version (M-a, M-b, M-X, ...): Miscellaneous Commands.
* downcase-word (M-l):                   Commands For Text.
* dump-functions ():                     Miscellaneous Commands.
* dump-macros ():                        Miscellaneous Commands.
* dump-variables ():                     Miscellaneous Commands.
* editing-mode:                          Readline Init File Syntax.
* enable-keypad:                         Readline Init File Syntax.
* end-kbd-macro (C-x )):                 Keyboard Macros.
* end-of-history (M->):                  Commands For History.
* end-of-line (C-e):                     Commands For Moving.
* exchange-point-and-mark (C-x C-x):     Miscellaneous Commands.
* expand-tilde:                          Readline Init File Syntax.
* filename_completion_function:          Completion Functions.
* forward-backward-delete-char ():       Commands For Text.
* forward-char (C-f):                    Commands For Moving.
* forward-search-history (C-s):          Commands For History.
* forward-word (M-f):                    Commands For Moving.
* free_undo_list:                        Allowing Undoing.
* history-search-backward ():            Commands For History.
* history-search-forward ():             Commands For History.
* horizontal-scroll-mode:                Readline Init File Syntax.
* input-meta:                            Readline Init File Syntax.
* insert-comment (M-#):                  Miscellaneous Commands.
* insert-completions (M-*):              Commands For Completion.
* isearch-terminators:                   Readline Init File Syntax.
* keymap:                                Readline Init File Syntax.
* kill-line (C-k):                       Commands For Killing.
* kill-region ():                        Commands For Killing.
* kill-whole-line ():                    Commands For Killing.
* kill-word (M-d):                       Commands For Killing.
* lowercase_p:                           Utility Functions.
* mark-modified-lines:                   Readline Init File Syntax.
* menu-complete ():                      Commands For Completion.
* meta-flag:                             Readline Init File Syntax.
* next-history (C-n):                    Commands For History.
* non-incremental-forward-search-history (M-n): Commands For History.
* non-incremental-reverse-search-history (M-p): Commands For History.
* numeric:                               Utility Functions.
* output-meta:                           Readline Init File Syntax.
* possible-completions (M-?):            Commands For Completion.
* prefix-meta (ESC):                     Miscellaneous Commands.
* previous-history (C-p):                Commands For History.
* quoted-insert (C-q, C-v):              Commands For Text.
* re-read-init-file (C-x C-r):           Miscellaneous Commands.
* readline:                              Basic Behavior.
* redraw-current-line ():                Commands For Moving.
* reverse-search-history (C-r):          Commands For History.
* revert-line (M-r):                     Miscellaneous Commands.
* rl_add_defun:                          Function Naming.
* rl_add_undo:                           Allowing Undoing.
* rl_already_prompted:                   Readline Variables.
* rl_attempted_completion_function:      Completion Variables.
* rl_basic_quote_characters:             Completion Variables.
* rl_basic_word_break_characters:        Completion Variables.
* rl_begin_undo_group:                   Allowing Undoing.
* rl_bind_key:                           Binding Keys.
* rl_bind_key_in_map:                    Binding Keys.
* rl_binding_keymap:                     Readline Variables.
* rl_callback_handler_install:           Alternate Interface.
* rl_callback_handler_remove:            Alternate Interface.
* rl_callback_read_char:                 Alternate Interface.
* rl_catch_signals:                      Readline Signal Handling.
* rl_catch_sigwinch:                     Readline Signal Handling.
* rl_char_is_quoted_p:                   Completion Variables.
* rl_cleanup_after_signal:               Readline Signal Handling.
* rl_clear_message:                      Redisplay.
* rl_clear_signals:                      Readline Signal Handling.
* rl_complete <1>:                       Completion Functions.
* rl_complete:                           How Completing Works.
* rl_complete_internal:                  Completion Functions.
* rl_completer_quote_characters:         Completion Variables.
* rl_completer_word_break_characters:    Completion Variables.
* rl_completion_append_character:        Completion Variables.
* rl_completion_display_matches_hook:    Completion Variables.
* rl_completion_entry_function <1>:      Completion Variables.
* rl_completion_entry_function:          How Completing Works.
* rl_completion_query_items:             Completion Variables.
* rl_copy_keymap:                        Keymaps.
* rl_copy_text:                          Modifying Text.
* rl_delete_text:                        Modifying Text.
* rl_directory_completion_hook:          Completion Variables.
* rl_discard_keymap:                     Keymaps.
* rl_display_match_list:                 Utility Functions.
* rl_do_undo:                            Allowing Undoing.
* rl_done:                               Readline Variables.
* rl_end:                                Readline Variables.
* rl_end_undo_group:                     Allowing Undoing.
* rl_erase_empty_line:                   Readline Variables.
* rl_event_hook:                         Readline Variables.
* rl_executing_keymap:                   Readline Variables.
* rl_extend_line_buffer:                 Utility Functions.
* rl_filename_completion_desired:        Completion Variables.
* rl_filename_dequoting_function:        Completion Variables.
* rl_filename_quote_characters:          Completion Variables.
* rl_filename_quoting_desired:           Completion Variables.
* rl_filename_quoting_function:          Completion Variables.
* rl_forced_update_display:              Redisplay.
* rl_free_line_state:                    Readline Signal Handling.
* rl_function_dumper:                    Associating Function Names and Bindings.
* rl_function_of_keyseq:                 Associating Function Names and Bindings.
* rl_funmap_names:                       Associating Function Names and Bindings.
* rl_generic_bind:                       Binding Keys.
* rl_get_keymap:                         Keymaps.
* rl_get_keymap_by_name:                 Keymaps.
* rl_get_keymap_name:                    Keymaps.
* rl_getc:                               Utility Functions.
* rl_getc_function:                      Readline Variables.
* rl_ignore_completion_duplicates:       Completion Variables.
* rl_ignore_some_completions_function:   Completion Variables.
* rl_inhibit_completion:                 Completion Variables.
* rl_initialize:                         Utility Functions.
* rl_insert_completions:                 Completion Functions.
* rl_insert_text:                        Modifying Text.
* rl_instream:                           Readline Variables.
* rl_invoking_keyseqs:                   Associating Function Names and Bindings.
* rl_invoking_keyseqs_in_map:            Associating Function Names and Bindings.
* rl_kill_text:                          Modifying Text.
* rl_library_version:                    Readline Variables.
* rl_line_buffer:                        Readline Variables.
* rl_list_funmap_names:                  Associating Function Names and Bindings.
* rl_make_bare_keymap:                   Keymaps.
* rl_make_keymap:                        Keymaps.
* rl_mark:                               Readline Variables.
* rl_message:                            Redisplay.
* rl_modifying:                          Allowing Undoing.
* rl_named_function:                     Associating Function Names and Bindings.
* rl_on_new_line:                        Redisplay.
* rl_on_new_line_with_prompt:            Redisplay.
* rl_outstream:                          Readline Variables.
* rl_parse_and_bind:                     Binding Keys.
* rl_pending_input:                      Readline Variables.
* rl_point:                              Readline Variables.
* rl_possible_completions:               Completion Functions.
* rl_pre_input_hook:                     Readline Variables.
* rl_prompt:                             Readline Variables.
* rl_read_init_file:                     Binding Keys.
* rl_read_key:                           Utility Functions.
* rl_readline_name:                      Readline Variables.
* rl_redisplay:                          Redisplay.
* rl_redisplay_function:                 Readline Variables.
* rl_reset_after_signal:                 Readline Signal Handling.
* rl_reset_line_state:                   Redisplay.
* rl_reset_terminal:                     Utility Functions.
* rl_resize_terminal:                    Readline Signal Handling.
* rl_restore_prompt:                     Redisplay.
* rl_save_prompt:                        Redisplay.
* rl_set_keymap:                         Keymaps.
* rl_set_signals:                        Readline Signal Handling.
* rl_special_prefixes:                   Completion Variables.
* rl_startup_hook:                       Readline Variables.
* rl_stuff_char:                         Utility Functions.
* rl_terminal_name:                      Readline Variables.
* rl_unbind_command_in_map:              Binding Keys.
* rl_unbind_function_in_map:             Binding Keys.
* rl_unbind_key:                         Binding Keys.
* rl_unbind_key_in_map:                  Binding Keys.
* self-insert (a, b, A, 1, !, ...):      Commands For Text.
* set-mark (C-@):                        Miscellaneous Commands.
* show-all-if-ambiguous:                 Readline Init File Syntax.
* start-kbd-macro (C-x ():               Keyboard Macros.
* to_lower:                              Utility Functions.
* to_upper:                              Utility Functions.
* transpose-chars (C-t):                 Commands For Text.
* transpose-words (M-t):                 Commands For Text.
* undo (C-_, C-x C-u):                   Miscellaneous Commands.
* universal-argument ():                 Numeric Arguments.
* unix-line-discard (C-u):               Commands For Killing.
* unix-word-rubout (C-w):                Commands For Killing.
* upcase-word (M-u):                     Commands For Text.
* uppercase_p:                           Utility Functions.
* username_completion_function:          Completion Functions.
* visible-stats:                         Readline Init File Syntax.
* yank (C-y):                            Commands For Killing.
* yank-last-arg (M-., M-_):              Commands For History.
* yank-nth-arg (M-C-y):                  Commands For History.
* yank-pop (M-y):                        Commands For Killing.



Tag Table:
Node: Top1190
Node: Command Line Editing1789
Node: Introduction and Notation2440
Node: Readline Interaction4058
Node: Readline Bare Essentials5251
Node: Readline Movement Commands7032
Node: Readline Killing Commands7989
Node: Readline Arguments9895
Node: Searching10870
Node: Readline Init File12713
Node: Readline Init File Syntax13774
Node: Conditional Init Constructs23039
Node: Sample Init File25478
Node: Bindable Readline Commands28648
Node: Commands For Moving29692
Node: Commands For History30541
Node: Commands For Text33258
Node: Commands For Killing35261
Node: Numeric Arguments37228
Node: Commands For Completion38355
Node: Keyboard Macros40103
Node: Miscellaneous Commands40662
Node: Readline vi Mode43466
Node: Programming with GNU Readline45236
Node: Basic Behavior46204
Node: Custom Functions49530
Node: The Function Type50508
Node: Function Writing51353
Node: Readline Variables52437
Node: Readline Convenience Functions56649
Node: Function Naming57387
Node: Keymaps58615
Node: Binding Keys60329
Node: Associating Function Names and Bindings62903
Node: Allowing Undoing64746
Node: Redisplay67331
Node: Modifying Text69108
Node: Utility Functions70019
Node: Alternate Interface72799
Node: Readline Signal Handling76093
Node: Custom Completers81139
Node: How Completing Works81854
Node: Completion Functions84850
Node: Completion Variables87865
Node: A Short Completion Example95768
Node: Concept Index108074
Node: Function and Variable Index108828

End Tag Table
