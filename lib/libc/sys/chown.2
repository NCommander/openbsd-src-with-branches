.\"	$OpenBSD: chown.2,v 1.20 2013/03/31 05:07:55 guenther Exp $
.\"	$NetBSD: chown.2,v 1.10 1995/10/12 15:40:47 jtc Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)chown.2	8.4 (Berkeley) 4/19/94
.\"
.Dd $Mdocdate: March 31 2013 $
.Dt CHOWN 2
.Os
.Sh NAME
.Nm chown ,
.Nm lchown ,
.Nm fchownat ,
.Nm fchown
.Nd change owner and group of a file or link
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft int
.Fn chown "const char *path" "uid_t owner" "gid_t group"
.Ft int
.Fn lchown "const char *path" "uid_t owner" "gid_t group"
.Ft int
.Fn fchown "int fd" "uid_t owner" "gid_t group"
.Fd #include <fcntl.h>
.Fd #include <unistd.h>
.Ft int
.Fn fchownat "int fd" "const char *path" "uid_t owner" "gid_t group" "int flag"
.Sh DESCRIPTION
The owner ID and group ID of the file (or link) named by
.Fa path
or referenced by
.Fa fd
is changed as specified by the arguments
.Fa owner
and
.Fa group .
The owner of a file may change the
.Fa group
to a group of which he or she is a member, but the change
.Fa owner
capability is restricted to the superuser.
.Pp
By default,
.Fn chown
clears the set-user-ID and set-group-ID bits on the file
to prevent accidental or mischievous creation of
set-user-ID and set-group-ID programs.
This behaviour can be overridden by setting the
.Xr sysctl 8
variable
.Va fs.posix.setuid
to zero.
.Pp
.Fn lchown
operates similarly to how
.Fn chown
operated on older systems, and does not follow symbolic links.
It allows the owner and group of a symbolic link to be set.
.Pp
The
.Fn fchownat
function is equivalent to either the
.Fn chown
or
.Fn lchown
function depending on the value of
.Fa flag
(see below), except that where
.Fa path
specifies a relative path,
the file whose ownership is changed is determined relative to
the directory associated with file descriptor
.Fa fd
instead of the current working directory.
.Pp
If
.Fn fchownat
is passed the special value
.Dv AT_FDCWD
(defined in
.In fcntl.h )
in the
.Fa fd
parameter, the current working directory is used
and the behavior is identical to a call to
.Fn chown
or
.Fn lchown ,
depending on whether or not the
.Dv AT_SYMLINK_NOFOLLOW
bit is set in
.Fa flag .
.Pp
Values for
.Fa flag
are constructed by bitwise-inclusive
.Tn OR Ns ing
flags from the following list defined in
.In fcntl.h :
.Pp
.Bl -tag -width AT_SYMLINK_NOFOLLOW -offset indent -compact
.It Dv AT_SYMLINK_NOFOLLOW
If
.Fa path
names a symbolic link, then the ownership of the symbolic link is changed.
.El
.Pp
.Fn fchown
is particularly useful when used in conjunction
with the file locking primitives (see
.Xr flock 2 ) .
.Pp
One of the owner or group IDs
may be left unchanged by specifying it as \-1.
.Sh RETURN VALUES
Zero is returned if the operation was successful;
\-1 is returned if an error occurs, with a more specific
error code being placed in the global variable
.Va errno .
.Sh ERRORS
.Fn chown ,
.Fn lchown ,
and
.Fn fchownat
will fail and the file or link will be unchanged if:
.Bl -tag -width Er
.It Bq Er ENOTDIR
A component of the path prefix is not a directory.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded
.Dv {NAME_MAX}
characters, or an entire path name exceeded
.Dv {PATH_MAX}
characters.
.It Bq Er ENOENT
The named file does not exist.
.It Bq Er EACCES
Search permission is denied for a component of the path prefix.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er EPERM
The effective user ID is not the superuser.
.It Bq Er EROFS
The named file resides on a read-only file system.
.It Bq Er EFAULT
.Fa path
points outside the process's allocated address space.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.El
.Pp
Additionally,
.Fn fchownat
will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa flag
argument was neither zero nor
.Dv AT_SYMLINK_NOFOLLOW .
.It Bq Er EBADF
The
.Fa path
argument specifies a relative path and the
.Fa fd
argument is neither
.Dv AT_FDCWD
nor a valid file descriptor.
.It Bq Er ENOTDIR
The
.Fa path
argument specifies a relative path and the
.Fa fd
argument is a valid file descriptor but it does not reference a directory.
.It Bq Er EACCES
The
.Fa path
argument specifies a relative path but search permission is denied
for the directory which the
.Fa fd
file descriptor references.
.El
.Pp
.Fn fchown
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa fd
does not refer to a valid descriptor.
.It Bq Er EINVAL
.Fa fd
refers to a socket, not a file.
.It Bq Er EPERM
The effective user ID is not the superuser.
.It Bq Er EROFS
The named file resides on a read-only file system.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.El
.Sh SEE ALSO
.Xr chgrp 1 ,
.Xr chmod 2 ,
.Xr flock 2 ,
.Xr chown 8
.Sh STANDARDS
The
.Fn chown ,
.Fn fchown ,
.Fn fchownat ,
and
.Fn lchown
functions are expected to conform to
.St -p1003.1-2008 .
.Sh HISTORY
A
.Fn chown
system call first appeared in
.At v1 .
Since
.At v6
it supports changing the group as well,
and in
.At v7
.Fa group
was made a separate argument.
.Pp
The
.Fn fchown
system call first appeared in
.Bx 4.2 .
.Pp
The
.Fn chown
and
.Fn fchown
functions were changed to follow symbolic links in
.Bx 4.4 ;
therefore, and for compatibility with
.At V.4 ,
the
.Fn lchown
function was added to
.Ox 2.1 .
.Pp
The
.Fn fchownat
function appeared in
.Ox 5.0 .
