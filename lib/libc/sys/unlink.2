.\"	$OpenBSD: unlink.2,v 1.17 2011/07/18 23:04:40 matthew Exp $
.\"	$NetBSD: unlink.2,v 1.7 1995/02/27 12:39:13 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)unlink.2	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: July 18 2011 $
.Dt UNLINK 2
.Os
.Sh NAME
.Nm unlink ,
.Nm unlinkat
.Nd remove directory entry
.Sh SYNOPSIS
.Fd #include <fcntl.h>
.Fd #include <unistd.h>
.Ft int
.Fn unlink "const char *path"
.Ft int
.Fn unlinkat "int fd" "const char *path" "int flag"
.Sh DESCRIPTION
The
.Fn unlink
function removes the link named by
.Fa path
from its directory and decrements the link count of the
file which was referenced by the link.
If that decrement reduces the link count of the file
to zero,
and no process has the file open, then
all resources associated with the file are reclaimed.
If one or more processes have the file open when the last link is removed,
the link is removed, but the removal of the file is delayed until
all references to it have been closed.
.Pp
The
.Fn unlinkat
function is equivalent to either the
.Fn unlink
or
.Xr rmdir 2
function depending on the value of
.Fa flag
(see below), except that where
.Fa path
specifies a relative path,
the directory entry to be removed is determined relative to
the directory associated with file descriptor
.Fa fd
instead of the current working directory.
.Pp
If
.Fn unlinkat
is passed the special value
.Dv AT_FDCWD
(defined in
.In fcntl.h )
in the
.Fa fd
parameter, the current working directory is used
and the behavior is identical to a call to
.Fn unlink
or
.Fn rmdir ,
depending on whether or not the
.Dv AT_REMOVEDIR
bit is set in
.Fa flag .
.Pp
Values for
.Fa flag
are constructed by bitwise-inclusive
.Tn OR Ns ing
flags from the following list defined in
.In fcntl.h :
.Pp
.Bl -tag -width AT_REMOVEDIR -offset indent -compact
.It Dv AT_REMOVEDIR
Remove the directory entry specified by
.Fa path
as a directory, not a normal file.
.El
.Sh RETURN VALUES
Upon successful completion, a value of 0 is returned.
Otherwise, a value of \-1 is returned and
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn unlink
and
.Fn unlinkat
functions will fail if:
.Bl -tag -width Er
.It Bq Er ENOTDIR
A component of the path prefix is not a directory.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded
.Dv {NAME_MAX}
characters, or an entire path name exceeded
.Dv {PATH_MAX}
characters.
.It Bq Er ENOENT
The named file does not exist.
.It Bq Er EACCES
Search permission is denied for a component of the path prefix.
.It Bq Er EACCES
Write permission is denied on the directory containing the link
to be removed.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er EPERM
The named file is a directory and the effective user ID
of the process is not the superuser, or the file system
containing the file does not permit the use of
.Fn unlink
on a directory.
.It Bq Er EPERM
The directory containing the file is marked sticky,
and neither the containing directory nor the file to be removed
are owned by the effective user ID.
.It Bq Er EPERM
The named file has its immutable or append-only flag set (see
.Xr chflags 2 ) .
.It Bq Er EBUSY
The entry to be unlinked is the mount point for a
mounted file system.
.It Bq Er EIO
An I/O error occurred while deleting the directory entry
or deallocating the inode.
.It Bq Er EROFS
The named file resides on a read-only file system.
.It Bq Er EFAULT
.Fa path
points outside the process's allocated address space.
.El
.Pp
Additionally,
.Fn unlinkat
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa path
argument does not specify an absolute path and the
.Fa fd
argument is neither
.Dv AT_FDCWD
nor a valid file descriptor open for reading.
.It Bq Er ENOTDIR
The
.Dv AT_REMOVEDIR
flag bit is set and
.Fa path
does not name a directory.
.It Bq Er ENOTEMPTY
The
.Dv AT_REMOVEDIR
flag bit is set and the named directory contains files other than
.Ql \&.
and
.Ql \&..
in it.
.El
.Sh SEE ALSO
.Xr rm 1 ,
.Xr close 2 ,
.Xr link 2 ,
.Xr rmdir 2 ,
.Xr symlink 7
.Sh STANDARDS
The
.Fn unlink
and
.Fn unlinkat
functions conform to
.St -p1003.1-2008 .
.Sh HISTORY
An
.Fn unlink
function call appeared in
.At v2 .
The
.Fn unlinkat
function appeared in
.Ox 5.0 .
