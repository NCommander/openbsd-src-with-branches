.\"	$OpenBSD: rfork.2,v 1.14 1999/07/02 17:04:16 aaron Exp $
.\"
.\" This manual page is taken directly from Plan9, and modified to
.\" describe the actual OpenBSD implementation.  Permission for
.\" use of this page comes from Rob Pike <rob@plan9.att.com>.
.\"
.Dd January 12, 1996
.Dt RFORK 2
.Os
.Sh NAME
.Nm rfork
.Nd manipulate process resources
.Sh SYNOPSIS
.Fd #include <sys/param.h>
.Fd #include <unistd.h>
.Ft int
.Fn rfork "int flags"
.Sh DESCRIPTION
Forking, vforking or rforking is the only way new processes are created.
The
.Fa flags
argument to
.Fn rfork
selects which resources of the
invoking process (parent) are shared
by the new process (child) or initialized to
their default values.
The resources include
the open file descriptor table (which, when shared, permits processes
to open and close files for other processes),
and open files.
.Fa flags
is the logical
.Tn OR
of some subset of
.Bl -tag -width "RFCNAMEG" -compact -offset indent
.It Dv RFPROC
If set a new process is created; otherwise changes affect the
current process.
The current implementation requires this flag to always be set.
.It Dv RFNOWAIT
If set, the child process will be dissociated from the parent.
Upon exit the child will not leave a status for the parent to collect.
See
.Xr wait 2 .
.It Xo Dv RFNAMEG , Dv RFCNAMEG ,
.Dv RFENVG , Dv RFCENVG , Dv RFNOTEG
.Xc
These are Plan 9 specific flags, and not implemented.
.It Dv RFFDG
If set, the invoker's file descriptor table (see
.Xr intro 2 )
is copied; otherwise the two processes share a
single table.
.It Dv RFCFDG
If set, the new process starts with a clean file descriptor table.
Is mutually exclusive with
.Dv RFFDG .
.It Dv RFMEM
If set, the kernel will force sharing of the entire address space.
The child
will then inherit all the shared segments the parent process owns.
Other segment types will be unaffected.
Subsequent forks by the parent will then propagate the shared
data and bss between children.
The stack segment is always split.
May be set only with
.Dv RFPROC .
.El
.Pp
File descriptors in a shared file descriptor table are kept
open until either they are explicitly closed
or all processes sharing the table exit.
.Pp
If
.Dv RFPROC
is set, the
value returned in the parent process
is the process ID
of the child process; the value returned in the child is zero.
Without
.Dv RFPROC ,
the return value is zero.
Process ids range from 1 to the maximum integer
.Li int
value.
.Fn rfork
will sleep, if necessary, until required process resources are available.
.Pp
.Fn fork
can be implemented as a call to
.Xr rfork 2
using "RFFDG|RFPROC"
but isn't for backwards compatibility.
If a process has file descriptor table sharing active, setuid or setgid
programs will not
.Xr execve 2
with extra privileges.
.Sh ERRORS
.Fn rfork
will fail and no child process will be created if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The system-imposed limit on the total
number of processes under execution would be exceeded.
This limit is configuration-dependent.
.It Bq Er EAGAIN
The system-imposed limit
.Dv MAXUPRC
.Pq Aq Pa sys/param.h
on the total number of
processes under execution by a single user would be exceeded.
.It Bq Er ENOMEM
There is insufficient swap space for the new process.
.El
.Sh SEE ALSO
.Xr fork 2 ,
.Xr intro 2 ,
.Xr minherit 2 ,
.Xr vfork 2
.Sh HISTORY
The
.Fn rfork
function first appeared in Plan9.
