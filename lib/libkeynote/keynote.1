.\" $OpenBSD$
.\"
.\" The author of this code is Angelos D. Keromytis (angelos@dsl.cis.upenn.edu)
.\"
.\" This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
.\" in April-May 1998
.\"
.\" Copyright (C) 1998, 1999 by Angelos D. Keromytis.
.\"      
.\" Permission to use, copy, and modify this software without fee
.\" is hereby granted, provided that this entire notice is included in
.\" all copies of any software which is or includes a copy or
.\" modification of this software.
.\" You may use this code under the GNU public license if you so wish. Please
.\" contribute changes back to the author.
.\"
.\" THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
.\" REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
.\" MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
.\" PURPOSE.
.\"
.Dd April 29, 1999
.Dt keynote 1
.\" .TH keynote 1 local
.Os
.Sh NAME
.Nm keynote
.Nd command line tool for
.Xr KeyNote 3
operations
.Sh SYNOPSIS
.Nm keynote keygen
.Ar AlgorithmName
.Ar KeySize
.Ar PublicKeyFile
.Ar PrivateKeyFile
.Op print-offset
.Op print-length

.Nm keynote sign
.Op Fl v
.Ar AlgorithmName
.Ar AssertionFile
.Ar PrivateKeyFile
.Op print-offset
.Op print-length

.Nm keynote sigver
.Op AssertionFile

.Nm keynote verify
.Op Fl h
.Op Fl e Ar file
.Fl l Ar file
.Fl r Ar retlist
.Op Fl k Ar file
.Op Fl l Ar file
.Op Ar file ...
.Sh DESCRIPTION
For more details on
.Nm KeyNote ,
see RFC 2704.
.Pp
.Sh KEY GENERATION
"keynote keygen" creates a public/private key of size
.Fa KeySize ,
(in bits) for the algorithm specified by
.Fa AlgorithmName .
Typical keysizes are 512, 1024, or 2048 (bits). The minimum key size
for DSA keys is 512 (bits). Supported
.Fa AlgorithmName
identifiers are:
.Bl -tag -width indent
.It ``dsa-hex:''
.It ``dsa-base64:''
.It ``rsa-hex:''
.It ``rsa-base64:''
.It ``x509-hex:''
.It ``x509-base64:''
.El
.Pp
Notice that the trailing colon is required. The resulting public key is
stored in file
.Fa PublicKeyFile .
Similarly, the resulting private key is stored in file
.Fa PrivateKeyFile .
Either of the filenames can be specified to be ``-'', in which
case the corresponding key(s) will be printed in standard output.
.Pp
The optional parameters
.Fa print-offset
and
.Fa print-length
specify the offset from the beginning of the line where the key
will be printed, and the number of characters of the key that will
be printed per line.
.Fa print-length
includes
.Fa AlgorithmName
for the first line and has to be longer (by at least 2) than
.Fa AlgorithmName .
.Fa print-length
also accounts for the line-continuation character (backslash) at
the end of each line, and the doublequotes at the beginning and end
of the key encoding.  Default values are 12 and 50 respectively.
.Pp
.Sh ASSERTION SIGNING
"keynote sign" reads the assertion contained in
.Fa AssertionFile
and generates a signature specified by
.Fa AlgorithmName
using the private key stored in
.Fa PrivateKeyFile .
The private key is expected to be of the form output by
"keynote keygen".  The private key algorithm and the
.Fa AlgorithmName
specified as an argument are expected to match. There is no requirement
for the internal or ASCII encodings to match.  Valid
.Fa AlgorithmName
identifiers are:
.Bl -tag -width indent
.It ``sig-dsa-sha1-hex:''
.It ``sig-dsa-sha1-base64:''
.It ``sig-rsa-sha1-hex:''
.It ``sig-rsa-sha1-base64:''
.It ``sig-rsa-md5-hex:''
.It ``sig-rsa-md5-base64:''
.It ``sig-x509-sha1-hex:''
.It ``sig-x509-sha1-base64:''
.El
.Pp
Notice that the trailing colon is required.
The resulting signature is printed in standard output. This can then
be added (via cut-and-paste or some script) at the end of the
assertion, in the
.Fa Signature
field.
.Pp
The public key corresponding to the private key in
.Fa PrivateKeyFile
is expected to already be included in the
.Fa Authorizer
field of the assertion, either directly or indirectly (i.e., through
use of a
.Fa Local-Constants
attribute). Furthermore, the assertion must have a
.Fa Signature
field (even if it is empty), as the signature is computed on
everything between the
.Fa KeyNote-Version
and
.Fa Signature
keywords (inclusive), and the
.Fa AlgorithmName
string.
.Pp
If the
.Fl v
flag is provided, "keynote sign" will also verify the newly-created
signature using the
.Fa Authorizer
field key.
.Pp
The optional parameters
.Fa print-offset
and
.Fa print-length
specify the offset from the beginning of the line where the signature
will be printed, and the number of characters of the signature that will
be printed per line.
.Fa print-length
includes
.Fa AlgorithmName
for the first line and has to be longer (by at least 2) than
.Fa AlgorithmName .
.Fa print-length
also accounts for the line-continuation character (backslash) at
the end of each line, and the doublequotes at the beginning and end
of the signature encoding.  Default values are 12 and 50 respectively.
.Pp
.Sh SIGNATURE VERIFICATION
"keynote sigver" reads the assertion contained in
.Fa AssertionFile
and verifies the public-key signature on it.
.Pp
.Sh QUERY TOOL
For each operand that names a
.A file ,
"keynote verify" reads the file and parses the assertions contained
therein (one assertion per file).
.Pp
Files given with the
.Fl l
flag are assumed to contain trusted assertions (no signature
verification is performed, and the
.Fa Authorizer
field can contain non-key principals.
There should be at least one assertion with the
.Fa POLICY
keyword in the
.Fa Authorizer
field.
.Pp
The
.Fl r
flag is used to provide a comma-separated list of return values, in
increasing order of compliance from left to right.
.Pp
Files given with the
.Fl e
flag are assumed to contain environment variables and their values,
in the format:
.Bd -literal -offset indent
 varname = "value"
.Ed
.Pp
.Fa varname
can begin with any letter (upper or lower case) or number,
and can contain underscores.
.Fa value
is a quoted string, and can contain any character, and escape
(backslash) processing is performed, as specified in the KeyNote
RFC.
.Pp
The remaining options are:
.Bl -tag -width indent
.It Fl h
Print a usage message and exit.
.It Fl k Ar file
Add a key from
.Fa file
in the action authorizers.
.El
.Pp
Exactly one
.Fl r
and least one of each
.Fl e ,
.Fl l ,
and
.Fl k
flags should be given per invocation. If no flags are given,
"keynote verify" prints the usage message and exits with error code \-1.
.Pp
"keynote verify" exits with code \-1 if there was an error, and 0 on success.
.Pp
.Sh SEE ALSO
.Xr keynote 3 ,
.Xr keynote 4 ,
.Xr keynote 5
.Bl -tag -width "AAAAAAA"
.It ``The KeyNote Trust-Management System, Version 2'' 
M. Blaze, J. Feigenbaum, A. D. Keromytis,
Internet Drafts, RFC 2704.
.It ``Decentralized Trust Management'' 
M. Blaze, J. Feigenbaum, J. Lacy,
1996 IEEE Conference on Privacy and Security
.It ``Compliance-Checking in the PolicyMaker Trust Management System''
M. Blaze, J. Feigenbaum, M. Strauss,
1998 Financial Crypto Conference
.El
.Sh AUTHOR
Angelos D. Keromytis (angelos@dsl.cis.upenn.edu)
.Sh WEB PAGE
http://www.cis.upenn.edu/~keynote
.Sh BUGS
None that we know of.
If you find any, please report them at
.Bd -literal -offset indent -compact
keynote@research.att.com
.Ed
