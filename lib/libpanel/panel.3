.TH panel 3X ""
.ds n 5
.ds d @TERMINFO@
.SH NAME
panel - panel stack extension for curses
.SH SYNOPSIS
\fB#include <panel.h>\fR
.P
\fBcc [flags] sourcefiles -lpanel -lcurses -ltermlib\fR
.P
\fBPANEL *new_panel(WINDOW *win)\fR
.br
\fBint bottom_panel(PANEL *pan)\fR
.br
\fBint top_panel(PANEL *pan)\fR
.br
\fBint show_panel(PANEL *pan)\fR
.br
\fBvoid update_panels();\fR
.br
\fBint hide_panel(PANEL *pan)\fR
.br
\fBWINDOW *panel_window(PANEL *pan)\fR
.br
\fBint replace_panel(PANEL *pan, WINDOW *window)\fR
.br
\fBint move_panel(PANEL *pan, int starty, int startx)\fR
.br
\fBint panel_hidden(PANEL *pan)\fR
.br
\fBPANEL *panel_above(PANEL *pan)\fR
.br
\fBPANEL *panel_below(PANEL *pan)\fR
.br
\fBint set_panel_userptr(PANEL *pan, char *ptr)\fR
.br
\fBchar *panel_userptr(PANEL *pan)\fR
.br
\fBint del_panel(PANEL *pan)\fR
.br
.SH DESCRIPTION
Panels are curses(3X) windows with the added feature of
depth.  Panel functions allow the use of stacked windows and ensure
the proper portions of each window and the curses \fBstdscr\fR window are
hidden or displayed when panels are added, moved, modified or removed.
The set of currently visible panels is the stack of panels.  The
\fBstdscr\fR window is beneath all panels, and is not considered part
of the stack.
.P
A window is associated with every panel. The panel routines enable
you to create, move, hides, and show panels, as well as position a
panel at any desired location in the stack.
.P
Panel routines are a functional layer added to curses(3X), make only
high-level curses calls, and work anywhere terminfo curses does.
.SH FUNCTIONS
.TP
\fBnew_panel(win)\fR
allocates  a  \fBPANEL\fR structure, assovciates it with
\fBwin\fR, places the panel on the top of the stack  (causes  it
to  be  displayed above any other panel) and returns a
pointer to the new panel.
.TP
\fBvoid update_panels()\fR
refreshes the virtual screen to reflect the relations between the
panels in the stack, but does not call doupdate() to refresh the
physical screen.  Use this function and not wrefresh or wnoutrefresh.
update_panels() may be called more than once before a call to
doupdate(), but doupdate() is the function responsible for updating
the physical screen.
.TP
\fBdel_panel(pan)\fR
removes the given panel from the  stack and deallocates the
\fBPANEL\fR structure (but not its associated window).
.TP
\fBhide_panel(pan)\fR
removes the given panel from the panel stack and thus hides it from
view. The \fBPANEL\fR structure is not lost, merely removed from the stack.
.TP
\fBshow_panel(pan)\fR
makes a hidden panel visible by placing it on top of the panels in the
panel stack. See COMPATIBILITY below.
.TP
\fBtop_panel(pan)\fR
puts the given visible panel on top of all panels in the stack.  See
COMPATIBILITY below.
.TP
\fBbottom_panel(pan)\fR
puts panel at the bottom of all panels.
.TP
\fBmove_panel(pan,starty,startx)\fR
moves the given panel window so that its upper-left corner is at
\fBstarty\fR, \fBstartx\fR.  It does not change the position of the
panel in the stack.  Be sure to use this function, not \fBmvwin()\fR,
to move a panel window.
.TP
\fBreplace_panel(pan,window)\fR
replaces the current window of panel with \fBwindow\fR (useful, for
example if you want to resize a panel; if you're using \fBcurses\fR,
you can call \fBreplace_panel\fR on the output of \fBwresize\fR(3x)).
It does not change the position of the panel in the stack.
.TP
\fBpanel_above(pan)\fR
returns a pointer to the panel above pan.  If the panel argument is
\fB(PANEL *)0\fR, it returns a pointer to the bottom panel in the stack.
.TP
\fBpanel_below(pan)\fR
returns a pointer to the panel just below pan.  If the panel argument
is \fB(PANEL *)0\fR, it returns a pointer to the top panel in the stack.
.TP
\fBset_panel_userptr(pan,ptr)\fR
sets the panel's user pointer.
.TP
\fBpanel_userptr(pan)\fR
returns the user pointer for a given panel.
.TP
\fBpanel_window(pan)\fR
returns a pointer to the window of the given panel.
.SH DIAGNOSTICS
Each routine that returns a pointer returns \fBNULL\fR if an error
occurs. Each routine that returns an int value returns \fBOK\fR if it
executes successfully and \fBERR\fR if not.
.SH COMPATIBILITY
Reasonable care has been taken to  ensure  compatibility
with  the  native  panel facility introduced in SVr3.2 (inspection of
the SVr4 manual pages suggests the programming interface is unchanged).
The \fBPANEL\fR data structures are merely  similar. The  programmer
is cautioned not to directly use \fBPANEL\fR fields.
.P
The functions \fBshow_panel()\fR and \fBtop_panel()\fR are identical
in this implementation, and work equally well with displayed or hidden
panels.  In the native System V implementation, \fBshow_panel()\fR is
intended for making a hidden panel visible (at the top of the stack)
and \fBtop_panel()\fR is intended for making an already-visible panel
move to the top of the stack. You are cautioned to use the correct
function to ensure compatibility with native panel libraries.
.SH NOTE
In your library list, libpanel.a should be before libcurses.a; that is,
you want to say `-lpanel -lcurses -ltermlib', not the other way around (which would
give you a link error using GNU \fBld\fR(1) and some other linkers).
.SH FILES
.P
panel.h
interface for the panels library
.P
libpanel.a
the panels library itself
.SH SEE ALSO
curses(3X)
.SH AUTHOR
Originally written by Warren Tucker <wht@n4hgf.mt-park.ga.us>,
primarily to assist in porting u386mon to systems without a native
panels library.  Repackaged for ncurses by Zeyd ben-Halim.


