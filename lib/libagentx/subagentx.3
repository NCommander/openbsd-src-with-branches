.\" $OpenBSD: ober_get_string.3,v 1.2 2019/10/25 04:00:10 tb Exp $
.\"
.\" Copyright (c) 2020 Martijn van Duren <martijn@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: October 25 2019 $
.Dt SUBAGENTX 3
.Os
.Sh NAME
.Nm subagentx_log_fatal ,
.Nm subagentx_log_warn ,
.Nm subagentx_log_info ,
.Nm subagentx_log_debug ,
.Nm subagentx ,
.Nm subagentx_connect ,
.Nm subagentx_read ,
.Nm subagentx_write ,
.Nm subagentx_wantwrite ,
.Nm subagentx_free ,
.Nm subagentx_session ,
.Nm subagentx_session_free ,
.Nm subagentx_context ,
.Nm subagentx_context_object_find ,
.Nm subagentx_context_object_nfind ,
.Nm subagentx_context_uptime ,
.Nm subagentx_context_free ,
.Nm subagentx_region ,
.Nm subagentx_region_free ,
.Nm subagentx_agentcaps ,
.Nm subagentx_agentcaps_free ,
.Nm subagentx_index_integer_new ,
.Nm subagentx_index_integer_any ,
.Nm subagentx_index_integer_value ,
.Nm subagentx_index_integer_dynamic ,
.Nm subagentx_index_string_dynamic ,
.Nm subagentx_index_nstring_dynamic ,
.Nm subagentx_index_oid_dynamic ,
.Nm subagentx_index_noid_dynamic ,
.Nm subagentx_index_ipaddress_dynamic ,
.Nm subagentx_index_free ,
.Nm subagentx_object ,
.Nm subagentx_object_free ,
.Nm subagentx_varbind_integer ,
.Nm subagentx_varbind_string ,
.Nm subagentx_varbind_nstring ,
.Nm subagentx_varbind_printf ,
.Nm subagentx_varbind_null ,
.Nm subagentx_varbind_oid ,
.Nm subagentx_varbind_object ,
.Nm subagentx_varbind_index ,
.Nm subagentx_varbind_ipaddress ,
.Nm subagentx_varbind_counter32 ,
.Nm subagentx_varbind_gauge32 ,
.Nm subagentx_varbind_timeticks ,
.Nm subagentx_varbind_opaque ,
.Nm subagentx_varbind_counter64 ,
.Nm subagentx_varbind_notfound ,
.Nm subagentx_varbind_error ,
.Nm subagentx_varbind_request ,
.Nm subagentx_varbind_get_index_integer ,
.Nm subagentx_varbind_get_index_string ,
.Nm subagentx_varbind_get_index_oid ,
.Nm subagentx_varbind_get_index_ipaddress ,
.Nm subagentx_varbind_set_index_integer ,
.Nm subagentx_varbind_set_index_string ,
.Nm subagentx_varbind_set_index_nstring ,
.Nm subagentx_varbind_set_index_oid ,
.Nm subagentx_varbind_set_index_object ,
.Nm subagentx_varbind_set_index_ipaddress
.Nd manage an interface to an agentx master
.Sh SYNOPSIS
.In subagentx.h
.Ft extern void
.Fn (*subagentx_log_fatal) "const char *fmt" ...
.Ft extern void
.Fn (*subagentx_log_warn) "const char *fmt" ...
.Ft extern void
.Fn (*subagentx_log_info) "const char *fmt" ...
.Ft extern void
.Fn (*subagentx_log_debug) "const char *fmt" ...
.Ft struct subagentx *
.Fn subagentx "void (*nofd)(struct subagentx *, void *, int)" "void *cookie"
.Ft void
.Fn subagentx_connect "struct subagentx *sa" "int fd"
.Ft void
.Fn subagentx_read "struct subagentx *sa"
.Ft void
.Fn subagentx_write "struct subagentx *sa"
.Ft extern void
.Fn (*subagentx_wantwrite) "struct subagentx *sa" "int fd"
.Ft void
.Fn subagentx_free "struct subagentx *sa"
.Ft struct subagentx_session *
.Fo subagentx_session
.Fa "struct subagentx *sa" "uint8_t timeout" "uint32_t oid[]" "size_t oidlen"
.Fa "const char *descr"
.Fc
.Ft void
.Fn subagentx_session_free "struct subagentx_session *sas"
.Ft struct subagentx_context *
.Fn subagentx_context "struct subagentx_session *sas" "const char *name"
.Ft uint32_t
.Ft struct subagentx_object *
.Fo subagentx_context_object_find
.Fa "struct subagentx_context *sac" "const uint32_t oid[]" "size_t oidlen"
.Fa "int active" "int instance"
.Fc
.Ft struct subagentx_object *
.Fo subagentx_context_object_nfind
.Fa "struct subagentx_context *" "const uint32_t oid[]" "size_t oidlen"
.Fa "int active" "int inclusive"
.Fc
.Ft uint32_t
.Fn subagentx_context_uptime "struct subagentx_context *sac"
.Ft void
.Fn subagentx_context_free "struct subagentx_context *sac"
.Ft struct subagentx_agentcaps *
.Fo subagentx_agentcaps
.Fa "struct subagentx_context *sac" "uint32_t oid[]" "size_t oidlen"
.Fa "const char *descr"
.Fc
.Ft void
.Fn subagentx_agentcaps_free "struct subagentx_agentcaps *saa"
.Ft struct subagentx_region *
.Fo subagentx_region
.Fa "struct subagentx_context *sac" "uint8_t timeout" "uint32_t oid[]"
.Fa "size_t oidlen"
.Fc
.Ft void
.Fn subagentx_region_free "struct subagentx_region *sar"
.Ft struct subagentx_index *
.Fo subagentx_index_integer_new
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_integer_any
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_integer_value
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fa "uint32_t value"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_integer_dynamic
.Fa "struct subagentx_region *sar" "uint32_t oid[] "size_t oidlen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_string_dynamic
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_nstring_dynamic
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fa "size_t slen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_oid_dynamic
.Fa "struct subagentx_region *sar "uint32_t oid[]" "size_t oidlen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_noid_dynamic
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fa "size_t vlen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_ipaddress_dynamic
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fc
.Ft struct subagentx_index *
.Fo subagentx_index_dynamic
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fc
.Ft void
.Fn subagentx_index_free "struct subagentx_index *sai"
.Ft struct subagentx_object *
.Fo subagentx_object
.Fa "struct subagentx_region *sar" "uint32_t oid[]" "size_t oidlen"
.Fa "struct subagentx_index *index[]" "size_t indexlen" "int implied"
.Fa "void (*getcb)(struct subagentx_varbind *)"
.Fc
.Ft void
.Fn subagentx_object_free "struct subagentx_object *sao"
.Ft void
.Fn subagentx_varbind_integer "struct subagentx_varbind *sav" "uint32_t value"
.Ft void
.Fn subagentx_varbind_string "struct subagentx_varbind *sav" "const char *value"
.Ft void
.Fo subagentx_varbind_nstring
.Fa "struct subagentx_varbind *sav" "const char *value" "size_t slen"
.Fc
.Ft void
.Fo subagentx_varbind_printf
.Fa "struct subagentx_varbind *sav" "const char *fmt" ...
.Fc
.Ft void
.Fn subagentx_varbind_null "struct subagentx_varbind *sav"
.Ft void
.Fo subagentx_varbind_oid
.Fa "struct subagentx_varbind *sav" "const uint32_t oid[]" "size_t oidlen"
.Fc
.Ft void
.Fo subagentx_varbind_object
.Fa "struct subagentx_varbind *sav" "struct subagentx_object *sao"
.Fc
.Ft void
.Fo subagentx_varbind_index
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fc
.Ft void
.Fo subagentx_varbind_ipaddress
.Fa "struct subagentx_varbind *sav" "const struct in_addr *addr"
.Fc
.Ft void
.Fn subagentx_varbind_counter32 "struct subagentx_varbind *sav" "uint32_t value"
.Ft void
.Fn subagentx_varbind_gauge32 "struct subagentx_varbind *sav" "uint32_t value"
.Ft void
.Fo subagentx_varbind_timeticks
.Fa "struct subagentx_varbind *sav"  "uint32_t value"
.Fc
.Ft void
.Fo subagentx_varbind_opaque
.Fa "struct subagentx_varbind *sav" "const char *value" "size_t slen"
.Fc
.Ft void
.Fn subagentx_varbind_counter64 "struct subagentx_varbind *sav" "uint64_t value"
.Ft void
.Fn subagentx_varbind_notfound "struct subagentx_varbind *sav"
.Ft void
.Fn subagentx_varbind_error "struct subagentx_varbind *sav"
.Ft enum subagentx_request_type
.Fn subagentx_varbind_request "struct subagentx_varbind *sav"
.Ft uint32_t
.Fo subagentx_varbind_get_index_integer
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fc
.Ft const unsigned char *
.Fo subagentx_varbind_get_index_string
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai" "size_t *slen"
.Fa "int *implied"
.Fc
.Ft const uint32_t *
.Fo subagentx_varbind_get_index_oid
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fa "size_t *oidlen" "int *implied"
.Fc
.Ft const struct in_addr *
.Fo subagentx_varbind_get_index_ipaddress
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fc
.Ft void
.Fo subagentx_varbind_set_index_integer
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fa "uint32_t value"
.Fc
.Ft void
.Fo subagentx_varbind_set_index_string
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fa "const unsigned char *value"
.Fc
.Ft void
.Fo subagentx_varbind_set_index_nstring
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fa "const unsigned char *value" "size_t slen"
.Fc
.Ft void
.Fo subagentx_varbind_set_index_oid
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fa "const uint32_t *oid" "size_t oidlen"
.Fc
.Ft void
.Fo subagentx_varbind_set_index_object
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fa "struct subagentx_object *sao"
.Fc
.Ft void
.Fo subagentx_varbind_set_index_ipaddress
.Fa "struct subagentx_varbind *sav" "struct subagentx_index *sai"
.Fa "const struct in_addr *addr"
.Fc
.Bd -literal
enum subagentx_request_type {
        SUBAGENTX_REQUEST_TYPE_GET,
        SUBAGENTX_REQUEST_TYPE_GETNEXT,
        SUBAGENTX_REQUEST_TYPE_GETNEXTINCLUSIVE
};
.Ed
.Fd #define SUBAGENTX_AGENTX_MASTER "/var/agentx/master"
.Fd #define SUBAGENTX_OID_MAX_LEN 128
.Fd #define SUBAGENTX_OID_INDEX_MAX_LEN 10
.Fd #define SUBAGENTX_OID(...)
.Fd #define SUBAGENTX_MIB2 1, 3, 6, 1, 2, 1
.Fd #define SUBAGENTX_ENTERPRISES 1, 3, 6, 1, 4, 1
.Sh DESCRIPTION
The
.Nm subagentx
functions allow an application to describe their MIB layout and provide an
.Fa fd
based interface to control the internal agentx state.
.Nm subagentx
is not thread safe.
.Ss DESCRIBING THE MIB
.Nm subagentx
is a framework to abstract away the agentx protocol from the application.
For the framework to report information to the administrator, the
.Fn subagentx_log_fatal ,
.Fn subagentx_log_warn ,
.Fn subagentx_log_info
and
.Fn subagentx_log_debug
functions must be set.
.Pp
When
.Fa sa
is created by
.Fn subagentx
or when
.Fa sa
detects that there is no connection to the agentx master it calls out to
.Fa nofd
with itself,
.Fa cookie
and an integer
.Fa close
as arguments.
If
.Fa close
is not set
.Fn nofd
is expected to set up a new
.Fa fd
to the agentx master.
This one can usually be found at
.Dv SUBAGENTX_AGENTX_MASTER .
This
.Fa fd
can be returned to
.Fa sa
at any moment via
.Nm subagentx_connect ,
but must always be done as a result of a call to
.Fn nofd .
Once
.Nm subagentx_connect
has been called the application is responsible for retrieving data when available
on
.Fa fd
by calling
.Fn subagentx_read .
If nonblocking writes are desirable the
.Nm subagentx_wantwrite
pointer can be set to an application function and will be called as soon as
there's data available to be written out.
Once
.Fa fd
is ready for write the function
.Nm subagentx_write
should be called.
.Pp
.Fa sa
can be freed via
.Fn subagentx_free .
It will close all active sessions and free all derived objects.
Once freed no new objects can be derived from the freed objects.
Once all sessions are closed it will call out to
.Fn nofd
with
.Fa close
set, indicating that the application can clean up any context related to
.Fa sa .
.Pp
On top of the
.Fa sa
connection a
.Nm subagentx_session
must be set up.
Normally there's only a single session per
.Fa sa .
The
.Fa timeout
argument specifies the maximum time in seconds the master should wait for a
reply before determining we're gone.
If set to 0 the agentx master determines the timeout.
The
.Fa oid
and
.Fa oidlen
combination identifies the subagent and will be visible through the
agentxSessionObjectID object on the agentx master.
The
.Fa descr
is a short displaystring description of the agent and will be visiable through
the agentxSessionDescr object on the agentx master.
.Pp
The
.Nm subagentx_context
is the SNMPv3 context in which the objects operate and is built on top of
subagentx_session
.Fa sas .
If the default context is requested
.Fa name
must be NULL.
.Pp
.Fn subagentx_agentcaps
registers an entry in the agentx master's sysORTable.
The
.Fa oid ,
.Fa oidlen
combination should point to an AGENT-CAPABILITIES object which describes the
capabilities of the subagent.
.Fa descr
should be a textual description of the capabilities.
If no AGENT-CAPABILITIES object is defined this function can be omitted.
.Pp
A
.Nm subagentx_region
indicates a region inside the object-tree for which get- and set-requests will
be queried.
If the OID has already been claimed by another subagent it will try to claim it
on a lower priority.
The
.Fa timeout
parameter overrules its
.Nm subagentx_session
counterpart.
.Pp
For objects in a table one or more
.Ft subagentx_index
elements must be supplied.
.Nm subagentx_index_integer_new ,
.Nm subagentx_index_integer_any
and
.Nm subagentx_index_integer_value
register an integer index at the agentx master.
Of these
.Nm subagentx_index_integer_new
registers a new, previously unused, index;
.Nm subagentx_index_integer_any
registers the first available index;
and
.Nm subagentx_index_integer_value
tries to register a specific value.
If the registration of an index fails an error will be logged and all objects
using it will remain disabled.
The OID where the index should be registered is documented by the MIB.
These registered indices are usually used for tables where multiple subagents
are registered.
.Pp
For dynamic indices the subagentx_index_*_dynamic functions can be used, based
on the data type of the object.
The data type should match the data type in the MIB at the
.Fa oid
object.
Indices of data type string or oid with a fixed length should be created via
.Fn subagentx_index_nstring_dynamic
and
.Fn subagentx_index_noid_dynamic
respectively.
.Pp
.Nm subagentx_object
is an object as described in the MIB.
For scalar objects
.Pq without indices
the final zero must be omitted.
For table entries a list of 1 or more indices must be added via
.Fa index
and
.Fa indexlen .
The list of indices must match the INDEX list on the ENTRY object in the MIB.
The total length of the OID, including indices, can't be more than
.Dv SUBAGENTX_OID_MAX_LEN
and indexlen can't be more than
.Dv SUBAGENTX_OID_INDEX_MAX_LEN .
If
.Fa implied
is set the final index must be of type OID or string and will omit the leading
length indicator.
This value must only be set if specified in the MIB.
.Fn getcb
will be called for each varbind in a GET, GETNEXT or GETBULK request that
matches the object.
.Ss HANDLING GET REQUESTS
A call to
.Fn getcb
must eventually result in a call to one of the following functions:
.Bl -tag -width subagentx_varbind_counter32()
.It Fn subagentx_varbind_integer
Set the return value to an uint32_t value.
.It Fn subagentx_varbind_string
A C string wrapper around
.Fn subagentx_varbind_nstring .
.It Fn subagentx_varbind_nstring
Set the return value to an octetstring.
.It Fn subagentx_varbind_printf
A printf wrapper around
.Fn subagentx_varbind_nstring .
.It Fn subagentx_varbind_null
Set the return value to null.
.It Fn subagentx_varbind_oid
Set the return value to an OID value.
.It Fn subagentx_varbind_object
An subagentx_object wrapper around
.Fn subagentx_varbind_oid .
.It Fn subagentx_varbind_index
An subagentx_index wrapper around
.Fn subagentx_varbind_oid .
.It Fn subagentx_varbind_ipaddress
Set the return value to ipaddress.
.It Fn subagentx_varbind_counter32
Set the return value to an uint32_t of type counter32.
.It Fn subagentx_varbind_gauge32
Set the return value to an uint32_t of type gauge32.
.It Fn subagentx_varbind_timeticks
Set the return value to an uint32_t of type timeticks.
.It Fn subagentx_varbind_opaque
Set the return value to an opaque value.
.It Fn subagentx_varbind_counter64
Set the return value to an uint64_t of type counter64.
.It Fn subagentx_varbind_notfound
When the request is of type GET return an nosuchinstance error.
When the request is of type GETNEXT or GETBULK return an endofmibview error.
On endofmibview the next object is queried.
This function can only be called on objects that contain one or more *_dynamic
indices.
.It Fn subagentx_varbind_error
Returns a GENERR error to the client.
.El
.Pp
For objects containing *_dynamic indices the following support functions are to
be used:
.Bl -tag -width subagentx_varbind_get_index_ipaddress()
.It Fn subagentx_varbind_request
Returns whether the request is of type GET, GETNEXT or GETNEXTINCLUSIVE.
.It Fn subagentx_varbind_get_index_integer
Retrieve a single uint32_t index value.
.It Fn subagentx_varbind_get_index_string
Retrieve an octetstring index value.
.Fa slen
is the length of the string and
.Fa implied
indicates if the next value for this index should be length sorted before
alphabetically sorted.
.It Fn subagentx_varbind_get_index_oid
Retrieve an oid index value.
.Fa oidlen
is the length of the oid and
.Fa implied
indicates if the next value for this index should be length sorted before
alphabetically sorted.
.It Fn subagentx_varbind_get_index_ipaddress
Retrieve an ipaddress index value.
.It Fn subagentx_varbind_set_index_integer
Sets a single uint32_t index value.
.It Fn subagentx_varbind_set_index_string
A C string wrapper around
.Fn subagentx_varbind_set_index_nstring .
.It Fn subagentx_varbind_set_index_nstring
Set an octetstring index value.
.It Fn subagentx_varbind_set_index_oid
Set an oid index value.
.It Fn subagentx_varbind_set_index_object
A subagentx_object wrapper around
.Fn subagentx_varbind_set_index_oid .
.It Fn subagentx_varbind_set_index_ipaddress
Set an ipaddress index value.
.El
.Pp
For these functions
.Fa sai
must be part of the object the request is performed on.
The function type must also match the data type of
.Fa sai .
.Pp
Other functions that can retrieve information from the agentx context are:
.Bl -tag -width subagentx_context_object_nfind()
.It Fn subagentx_context_object_find
Find a subagentx_object created inside subagentx_context
.Fa sac
based on
.Fa oid
and
.Fa oidlen .
If
.Fa active
is set the object must be reachable from the agentx master, else NULL is
returned.
If
.Fa oid
can be an instance, find its parent object.
.It Fn subagentx_context_object_nfind
Find the next subagentx_object created inside subagentx_context
.Fa sac
based on
.Fa oid
and
.Fa oidlen .
If
.Fa active
is set the object must be reachable from the agentx master, else NULL is
returned.
If
.Fa inclusive
is set the object returned may also exactly match
.Fa oid .
.It Fn subagentx_context_uptime
Returns the sysuptime in seconds for
.Fa sac
in timeticks.
.El
.Sh SEE ALSO
.Xr snmp 1 ,
.Xr snmpd 8
.Sh STANDARDS
.Rs
.%A M. Daniele
.%A B. Wijnen
.%A M. Ellison, Ed.
.%A D. Francisco. Ed.
.%D January 2000
.%R RFC 2741
.%T Agent Extensibility (AgentX) Protocol Version 1
.Re
.Pp
.Rs
.%A L. Heintz
.%A S. Gudur
.%A M. Ellison, Ed.
.%D January 2000
.%R RFC 2742
.%T Definitions of Managed Objects for Extensible SNMP Agents
.Re
.Sh HISTORY
The
.Nm subagentx
API first appeared in
.Ox 6.8 .
.Sh AUTHORS
.An Martijn van Duren Aq Mt martijn@openbsd.org
