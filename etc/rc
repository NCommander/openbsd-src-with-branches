#	$OpenBSD: rc,v 1.55 1997/11/19 23:44:21 deraadt Exp $

# System startup script run by init on autoboot
# or after single-user.
# Output and error are redirected to console by init,
# and the console is the controlling terminal.

stty status '^T'

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user after fsck.
trap : 2
trap : 3	# shouldn't be needed

HOME=/; export HOME
PATH=/sbin:/bin:/usr/sbin:/usr/bin
export PATH

# Configure ccd devices.
if [ -f /etc/ccd.conf ]; then
	ccdconfig -C
fi

if [ -e /fastboot ]; then
	echo "Fast boot: skipping disk checks."
elif [ $1x = autobootx ]; then
	echo "Automatic boot in progress: starting file system checks."
	fsck -p
	case $? in
	0)
		;;
	2)
		exit 1
		;;
	4)
		echo "Rebooting..."
		reboot
		echo "Reboot failed; help!"
		exit 1
		;;
	8)
		echo "Automatic file system check failed; help!"
		exit 1
		;;
	12)
		echo "Boot interrupted."
		exit 1
		;;
	130)
		# interrupt before catcher installed
		exit 1
		;;
	*)
		echo "Unknown error; help!"
		exit 1
		;;
	esac
fi

trap "echo 'Boot interrupted.'; exit 1" 3

swapon -a

umount -a >/dev/null 2>&1
mount -a -t nonfs
rm -f /fastboot		# XXX (root now writeable)

# set flags on ttys.  (do early, in case they use tty for SLIP in netstart)
echo 'setting tty flags'
ttyflags -a

# set hostname, turn on network
echo 'starting network'
. /etc/netstart

mount /usr >/dev/null 2>&1
mount /var >/dev/null 2>&1

# clean up left-over files
rm -f /etc/nologin
rm -f /var/spool/lock/LCK.*
rm -f /var/spool/uucp/STST/*
(cd /var/run && { rm -rf -- *; install -c -m 664 -g utmp /dev/null utmp; })

# $named_flags is imported from /etc/rc.conf;
# if $named_flags != NO, named is run.
if [ "X${named_flags}" != X"NO" ]; then
	echo -n ' named';		named $named_flags
fi

# /etc/ifaliases, if it exists, contains the names of additional IP
# addresses for each interface. It is formatted as a series of lines
# that contain
#	interface address netmask
if [ -f /etc/ifaliases ]; then
(
	# delete comments and blank lines
	set -- `sed -e 's/#.*$//' /etc/ifaliases | grep -v '^$'`
	while [ $# -ge 3 ] ; do
		ifconfig $1 inet alias $2 netmask $3
		route add -host $2 localhost
		shift 3
	done
)
fi

if [ X"${ipfilter}" = X"YES" -a X"${ipmon_flags}" != X"NO" ]; then
	echo 'starting ipmon';		ipmon ${ipmon_flags}
fi

if [ X"${rfc1323}" = X"NO" ]; then
	echo 'disabling rfc1323'; 	sysctl -w net.inet.tcp.rfc1323=0
fi

# $photurisd_flags is imported from /etc/rc.conf;
# If $photurisd_flags == NO or /etc/photuris/photuris.conf doesn't exist, then
# photurisd isn't run.
if [ "X${photurisd_flags}" != X"NO" -a -e /etc/photuris/photuris.conf ]; then
	echo 'starting photurisd';	photurisd ${photurisd_flags}
fi

echo -n 'starting rpc daemons:'

# $portmap is imported from /etc/rc.conf;
# if $portmap == YES, the portmapper is started.
if [ X"${portmap}" = X"YES" ]; then
	echo -n ' portmap';		portmap
fi

if [ -d /var/yp/binding ]; then
	if [ -d /var/yp/`domainname` ]; then
		# yp server capabilities needed...
		echo -n ' ypserv';		ypserv ${ypserv_flags}
		#echo -n ' ypxfrd';		ypxfrd
	fi

	echo -n ' ypbind';		ypbind

	if [ -d /var/yp/`domainname` ]; then
		# if we are the master server, run rpc.yppasswdd
		_host1=`ypwhich -m passwd 2> /dev/null`
		_host2=`hostname`
		if [ `grep '^lookup' /etc/resolv.conf | grep yp | wc -c` -ne 0 ]; then
			_host1=`ypmatch $_host1 hosts | cut -d'	' -f2`
			_host2=`ypmatch $_host2 hosts | cut -d'	' -f2 | head -1`
		else
			_host1=`nslookup $_host1 | grep '^Name: ' | \
			    sed -e 's/^Name:    //'`
			_host2=`nslookup $_host2 | grep '^Name: ' | \
			    sed -e 's/^Name:    //'`
		fi
		if [ "$_host2" = "$_host1" ]; then
			echo -n ' rpc.yppasswdd'
			rpc.yppasswdd ${yppasswdd_flags}
		fi
	fi
fi

# $nfs_server is imported from /etc/rc.conf;
# if $nfs_server == YES, the machine is setup for being an nfs server
if [ X${nfs_server} = X"YES" -a -r /etc/exports -a \
    `cat /etc/exports | sed -e '/^#/d' | wc -l` -ne 0 ]; then
	rm -f /var/db/mountdtab	
	echo -n > /var/db/mountdtab
	echo -n ' mountd';		mountd
	echo -n ' nfsd';		nfsd ${nfsd_flags}
	if [ X${lockd} = X"YES" ]; then
		echo -n ' rpc.lockd';	rpc.lockd
	fi
fi

# $nfs_client is imported from /etc/rc.conf;
# if $nfs_client == YES, the machine is setup for being an nfs client
if [ X${nfs_client} = X"YES" ]; then
	echo -n ' nfsiod';		nfsiod -n 4
fi

if [ X${amd} = X"YES" -a -d ${amd_dir} -a -r ${amd_master} ]; then
	echo -n ' amd'
	amd -l syslog -x error,noinfo,nostats -p \
	    -a ${amd_dir} `cat ${amd_master}` > /var/run/amd.pid
fi

echo '.'
mount -a -t nfs

echo -n 'starting system logger'
rm -f /dev/log
syslogd

# $timed_flags is imported from /etc/rc.conf;
# if $timed_flags == NO, timed isn't run.
if [ "X${timed_flags}" != X"NO" ]; then
	echo -n ', time daemon'; timed $timed_flags
fi
echo '.'

# /var/crash should be a directory or a symbolic link
# to the crash directory if core dumps are to be saved.
if [ -d /var/crash ]; then
	echo checking for core dump...
	savecore /var/crash
fi

if [ "X${check_quotas}" = X"YES" ]; then
	echo -n 'checking quotas:'
	quotacheck -a
	echo ' done.'
	quotaon -a
fi

# build ps databases
echo 'building databases...'
kvm_mkdb /bsd
dev_mkdb

chmod 666 /dev/tty[pqrs]*

# check the password temp/lock file
if [ -f /etc/ptmp ]; then
	logger -s -p auth.err \
	'password file may be incorrect -- /etc/ptmp exists'
fi

echo clearing /tmp

# prune quickly with one rm, then use find to clean up /tmp/[lq]*
# (not needed with mfs /tmp, but doesn't hurt there...)
(cd /tmp && rm -rf [a-km-pr-zA-Z]* &&
    find . ! -name . ! -name lost+found ! -name quota.user \
	! -name quota.group -exec rm -rf -- {} \; -type d -prune)

test -f /etc/rc.securelevel && . /etc/rc.securelevel
if [ X${securelevel} != X"" ]; then
	echo -n 'setting kernel security level: '
	sysctl -w kern.securelevel=${securelevel}
fi

# patch /etc/motd
if [ ! -f /etc/motd ]; then
	install -c -o root -g wheel -m 664 /dev/null /etc/motd
fi
T=/tmp/_motd
rm -f $T
sysctl -n kern.version | sed 1q > $T
echo "" >> $T
sed '1,/^$/d' < /etc/motd >> $T
cmp -s $T /etc/motd || cp $T /etc/motd
rm -f $T

# nvi file recovery
if [ ! -d /var/tmp/vi.recover ]; then
	if [ -e /var/tmp/vi.recover ]; then
		echo "Warning!  /var/tmp/vi.recover is not a directory!"
	else
		mkdir /var/tmp/vi.recover
		chmod 1777 /var/tmp/vi.recover
	fi
fi
vibackup=/var/tmp/vi.recover/vi.*
if [ "$vibackup" != "/var/tmp/vi.recover/vi.*" ]; then
	for i in $vibackup; do
		# Unmodified nvi editor backup files either have the
		# execute bit set or are zero length.  Delete them.
		if test -x $i -o ! -s $i; then
			rm $i
		fi
	done
fi
virecovery=/var/tmp/vi.recover/recover.*
if [ "$virecovery" != "/var/tmp/vi.recover/recover.*" ]; then
	echo preserving editor files
	for i in $virecovery; do
		# Delete any recovery files that are zero length, corrupted,
		# or that have no corresponding backup file.  Else send mail
		# to the user.
		recfile=`awk '/^X-vi-recover-path:/{print $2}' < $i`
		if test -n "$recfile" -a -s "$recfile"; then
			sendmail -t < $i
		else
			rm $i
		fi
	done
fi

if [ -f /var/account/acct ]; then
	echo 'turning on accounting';	accton /var/account/acct
fi

echo -n standard daemons:
echo -n ' cron';		cron
echo '.'

echo -n starting network daemons:

# $gated and $routed_flags are imported from /etc/rc.conf.
# If $gated == YES, gated is used; otherwise routed.
# If $routed_flags == NO, routed isn't run.
if [ X${gated} = X"YES" -a -r /etc/gated.conf ]; then
	echo -n ' gated';		gated $gated_flags
elif [ "X${routed_flags}" != X"NO" ]; then
	echo -n ' routed';		routed $routed_flags
fi

# $mrouted_flags is imported from /etc/rc.conf;
# If $mrouted_flags == NO, then mrouted isn't run.
if [ "X${mrouted_flags}" != X"NO" ]; then
	echo -n ' mrouted';		mrouted $mrouted_flags
fi

# $rwhod is imported from /etc/rc.conf;
# if $rwhod == YES, rwhod is run.
if [ X${rwhod} = X"YES" ]; then
	echo -n ' rwhod';		rwhod
fi


if [ X${lpd} = X"YES" ]; then
	echo -n ' printer';		lpd
fi

# $sendmail_flags is imported from /etc/rc.conf;
# If $sendmail_flags == NO or /etc/sendmail.cf doesn't exist, then
# sendmail isn't run.  We call sendmail with a full path so that
# SIGHUP works.
if [ "X${sendmail_flags}" != X"NO" -a -r /etc/sendmail.cf ]; then
	echo -n ' sendmail';		/usr/sbin/sendmail ${sendmail_flags}
fi

if [ X${inetd} = X"YES" ]; then
	echo -n ' inetd';		inetd
fi

# $rarpd_flags is imported from /etc/rc.conf;
# If $rarpd_flags == NO or /etc/ethers doesn't exist, then
# rarpd isn't run.
if [ "X${rarpd_flags}" != X"NO" -a -r /etc/ethers ]; then
	echo -n ' rarpd';		rarpd ${rarpd_flags}
fi

# $bootparamd_flags is imported from /etc/rc.conf;
# If $bootparamd_flags == NO or /etc/bootparams doesn't exist, then
# bootparamd isn't run.
if [ "X${bootparamd_flags}" != X"NO" -a -r /etc/bootparams ]; then
	echo -n ' rpc.bootparamd';	rpc.bootparamd ${bootparamd_flags}
fi

# $rbootd_flags is imported from /etc/rc.conf;
# If $rbootd_flags == NO or /etc/rbootd.conf doesn't exist, then
# rbootd isn't run.
if [ "X${rbootd_flags}" != X"NO" -a -r /etc/rbootd.conf ]; then
	echo -n ' rbootd';		rbootd ${rbootd_flags}
fi

# $mopd_flags is imported from /etc/rc.conf;
# If $mopd_flags == NO or /tftpboot/mop doesn't exist, then
# mopd isn't run.
if [ "X${mopd_flags}" != X"NO" -a -d /tftpboot/mop ]; then
	echo -n ' mopd';		mopd ${mopd_flags}
fi

if [ -x /usr/sbin/screenblank ]; then
	echo -n ' screenblank';	/usr/sbin/screenblank
fi

echo '.'

if [ -f /sbin/kbd -a -f /etc/kbdtype ]; then
	kbd `cat /etc/kbdtype`
fi

if [ -f /sbin/ldconfig ]; then
	echo 'creating runtime link editor directory cache.'
	_LIBS=
	if [ -d /usr/local/lib ]; then
		_LIBS="$_LIBS /usr/local/lib"
	fi
	if [ -d /usr/X11R6/lib ]; then
		_LIBS="$_LIBS /usr/X11R6/lib"
	fi
	ldconfig $_LIBS
fi

# Kerberos runs ONLY on the Kerberos server machine
if [ X${kerberos_server} = X"YES" ]; then
	echo 'kerberos server'
	kerberos >> /var/log/kerberos.log &
	kadmind -n >> /var/log/kadmind.log &
fi

. /etc/rc.local

date
exit 0
