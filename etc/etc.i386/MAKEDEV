#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.40 1996/03/31 00:50:47 perry Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	floppy	devices to be put on install floppies
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	wt*	QIC-interfaced (e.g. not SCSI) 3M cartridge tape
#	st*	SCSI tapes
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4")
#	sd*	SCSI disks
#	cd*	SCSI CD-ROM
#	mcd*	Mitsumi CD-ROM
#	acd*	ATAPI CD-ROM
#	vnd*	"file" pseudo-disks
#	rd*	"ramdisk" pseudo-disks
#	ccd*	contatenated disk devices
#
# Console ports:
#	ttyv0	pccons or pcvt screen 0
#	ttyv*	pcvt
#
# Pointing devices:
#	mms*	Microsoft bus mouse
#	lms*	Logitech bus mouse
#	pms*	PS/2 mouse
#	mouse-*	"mouse link"				(XXX)
# 
# Terminal ports:
#	com*	standard PC COM ports			(XXX)
#	tty*	alias for PC COM ports, this is what the system really wants
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#
# Call units:
#
# Special purpose devices:
#	fd	file descriptors
#	bpf*	packet filter
#	speaker	pc speaker				(XXX - installed)
#	lkm	loadable kernel modules interface
#	audio	audio device
#	apm	power management device
#	tun*	network tunnel driver
#	joy*	joystick driver
#	pcmcia*	PCMCIA card drivers
#	*rnd	inkernel random number generator
#	uk*	"unknown SCSI" devices
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77
for i
do
case $i in

all)
	sh MAKEDEV std fd wt0 fd0 fd1 wd0 wd1 sd0 sd1 sd2 tty0 tty1 pty0 pty1
	sh MAKEDEV st0 st1 ch0 cd0 cd1 mcd0 acd0 vnd0 vnd1 lpa0 lpa1
	sh MAKEDEV ccd0 ccd1 ccd2 ccd3
	sh MAKEDEV lpt0 lpt1 lpt2 ttyv0 bpf0 bpf1 bpf2 bpf3 ipl tun0 tun1 tun2
	sh MAKEDEV speaker lkm mms0 lms0 pms0 audio joy0 joy1 apm pcmcia local
	sh MAKEDEV rnd uk0 uk1
# MISSING:
#	sh MAKEDEV mouse-?
	;;

floppy)
	sh MAKEDEV std wt0 fd0 fd1 wd0 wd1 sd0 sd1 sd2 tty0 tty1
	sh MAKEDEV st0 st1 cd0 cd1 mcd0 acd0 ttyv0
	;;

std)
	rm -f console drum mem kmem null zero io tty klog stdin stdout stderr
	mknod console		c 0 0
	mknod drum		c 4 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem	; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 12	; chmod 666 zero
	mknod io		c 2 14	; chmod 640 io ; chgrp kmem io
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 7 0	; chmod 600 klog
	mknod stdin		c 22 0	; chmod 666 stdin
	mknod stdout		c 22 1	; chmod 666 stdout
	mknod stderr		c 22 2	; chmod 666 stderr
	;;

ttyv*)
	unit=`expr $i : 'ttyv\(.*\)'`
	rm -f ttyv$unit
	mknod ttyv$unit c 12 $unit
	chown root.wheel ttyv$unit
	case $unit in
	0)
		rm -f vga
		ln -s ttyv0 vga
		;;
	esac
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	(cd fd && eval `echo "" | awk ' BEGIN { \
		for (i = 0; i < 64; i++) \
	 		printf("mknod %d c 22 %d;", i, i)}'`)
	chown -R bin.bin fd
	chmod 555 fd
	chmod 666 fd/*
	;;

wt*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	wt*) name=wt;  chr=10; blk=3;;
	esac
	rm -f $name$unit n$name$unit r$name$unit nr$name$unit
	mknod $name$unit	b $blk `expr $unit '*' 8 + 0`
	mknod n$name$unit	b $blk `expr $unit '*' 8 + 4`
	mknod r$name$unit	c $chr `expr $unit '*' 8 + 0`
	mknod nr$name$unit	c $chr `expr $unit '*' 8 + 4`
	chgrp operator $name$unit n$name$unit r$name$unit nr$name$unit
	chmod 640 $name$unit n$name$unit r$name$unit nr$name$unit
	umask 77
	;;

rd*)
	umask 2 ; unit=`expr $i : '.*d\(.*\)'`
	mknod rd${unit} b 17 $unit
#	mknod rrd${unit} c 9 $unit
	chgrp operator rd${unit} rrd${unit}
	chmod 640 rd${unit} rrd${unit}
	umask 77
	;;

ccd*|fd*|sd*|vnd*|wd*)
	umask 2 ; unit=`expr $i : '.*d\(.*\)'`
	case $i in
	ccd*) name=ccd; blk=16; chr=18;;
	fd*) name=fd; blk=2; chr=9;;
	sd*) name=sd; blk=4; chr=13;;
	vnd*) name=vnd; blk=14; chr=41;;
	wd*) name=wd; blk=0; chr=3;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
	mknod ${name}${unit}b	b $blk `expr $unit '*' 8 + 1`
	mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + 2`
	mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
	mknod ${name}${unit}e	b $blk `expr $unit '*' 8 + 4`
	mknod ${name}${unit}f	b $blk `expr $unit '*' 8 + 5`
	mknod ${name}${unit}g	b $blk `expr $unit '*' 8 + 6`
	mknod ${name}${unit}h	b $blk `expr $unit '*' 8 + 7`
	mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
	mknod r${name}${unit}b	c $chr `expr $unit '*' 8 + 1`
	mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + 2`
	mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
	mknod r${name}${unit}e	c $chr `expr $unit '*' 8 + 4`
	mknod r${name}${unit}f	c $chr `expr $unit '*' 8 + 5`
	mknod r${name}${unit}g	c $chr `expr $unit '*' 8 + 6`
	mknod r${name}${unit}h	c $chr `expr $unit '*' 8 + 7`
	chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
	chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
	umask 77
	;;

com*|tty*)					# (XXX -- com should die)
	unit=`expr $i : '...\(.*\)'`
	rm -f com$unit tty0$unit
	mknod tty0$unit c 8 $unit
	chown uucp.wheel tty0$unit
	;;

pty*)
	class=`expr $i : 'pty\(.*\)'`
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
	4) offset=64 name=t;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4)
		umask 0
		eval `echo $offset $name | awk ' { b=$1; n=$2 } END {
			for (i = 0; i < 16; i++)
				printf("rm -f tty%s%x; mknod tty%s%x c 5 %d; \
				    rm -f pty%s%x; mknod pty%s%x c 6 %d; ", \
				    n, i, n, i, b+i, n, i, n, i, b+i); }'`
		umask 77
		;;
	esac
	;;

st*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	st*) name=st;  chr=14; blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	mknod $name$unit	b $blk `expr $unit '*' 16 + 0`
	mknod n$name$unit	b $blk `expr $unit '*' 16 + 1`
	mknod e$name$unit	b $blk `expr $unit '*' 16 + 2`
	mknod en$name$unit	b $blk `expr $unit '*' 16 + 3`
	mknod r$name$unit	c $chr `expr $unit '*' 16 + 0`
	mknod nr$name$unit	c $chr `expr $unit '*' 16 + 1`
	mknod er$name$unit	c $chr `expr $unit '*' 16 + 2`
	mknod enr$name$unit	c $chr `expr $unit '*' 16 + 3`
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	chmod 640 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	umask 77
	;;

ch*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	ch*) name=ch;  chr=17;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr `expr $unit '*' 16 + 0`
	chgrp operator $name$unit
	chmod 640 $name$unit
	umask 77
	;;

cd*|mcd*|acd*)
	umask 2 ; unit=`expr $i : '.*cd\(.*\)'`
	case $i in
	cd*) name=cd; blk=6; chr=15;;
	mcd*) name=mcd; blk=7; chr=39;;
	acd*) name=acd; blk=18; chr=24;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
	mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
	mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
	mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
	chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
	chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
	umask 77
	;;

lpt*|lpa*)
	unit=`expr $i : '...\(.*\)'`
	case $i in
	lpt*) name=lpt; flags=0;;
	lpa*) name=lpa; flags=128;;
	esac
	rm -f $name$unit
	mknod $name$unit c 16 `expr $unit + $flags`
	chown root.wheel $name$unit
	;;

bpf*|tun*)
	unit=`expr $i : '...\(.*\)'`
	case $i in
	bpf*) name=bpf; chr=23;;
	tun*) name=tun; chr=40;;
	esac
	rm -f $name$unit
	mknod $name$unit c $chr $unit
	chown root.wheel $name$unit
	;;

ipl)
	rm -f ipl
	mknod ipl c 44 0
	chown root.wheel ipl
	;;

speaker)					# (XXX - installed)
	rm -f speaker
	mknod speaker c 27 0
	chown root.wheel speaker
	;;

lkm)
	rm -f lkm
	mknod lkm c 28 0
	chown root.kmem lkm
	chmod 640 lkm
	;;

mms*|lms*|pms*)
	unit=`expr $i : '.ms\(.*\)'`
	case $i in
	mms*) name=mms; chr=35;;
	lms*) name=lms; chr=36;;
	pms*) name=pms; chr=37;;
	esac
	rm -f $name$unit
	mknod $name$unit c $chr $unit
	chown root.wheel $name$unit
	;;

mouse*)						# (XXX)
	name=`expr $i : 'mouse-\(.*\)'`
	if [ ! -c $name ]; then
		$0 $name	# make the appropriate device
	fi
	rm -f mouse
	ln -s $name mouse
	;;

audio*)
	rm -f audio sound mixer
	mknod sound c 42 0
	mknod audio c 42 128
	mknod mixer c 42 16
	chown root.wheel audio sound mixer
	chmod 666 audio sound mixer
	;;

joy*)
	unit=`expr $i : 'joy\(.*\)'`
	rm -f joy$unit
	mknod joy$unit c 25 $unit
	chown root.wheel joy$unit
	chmod 666 joy$unit
	;;
	
pcmcia*)
	rm -rf pcmcia
	mkdir pcmcia
	mknod pcmcia/bus c 26 32
	mknod pcmcia/chip0 c 26 16
	mknod pcmcia/chip1 c 26 17
	mknod pcmcia/chip2 c 26 18
	mknod pcmcia/chip3 c 26 19
	mknod pcmcia/slot0 c 26 0
	mknod pcmcia/slot1 c 26 1
	mknod pcmcia/slot2 c 26 2
	mknod pcmcia/slot3 c 26 3
	mknod pcmcia/slot4 c 26 4
	mknod pcmcia/slot5 c 26 5
	mknod pcmcia/slot6 c 26 6
	mknod pcmcia/slot7 c 26 7
	chown -R root.wheel pcmcia
	chmod 700 pcmcia
	chmod 600 pcmcia/*
	;;
	
joy*)
	unit=`expr $i : 'joy\(.*\)'`
	rm -f joy$unit
	mknod joy$unit c 26 $unit
	chown root.wheel joy$unit
	chmod 666 joy$unit
	;;
	
apm*)
	rm -f apm apmctl
	mknod apm c 21 0
	mknod apmctl c 21 8
	chown root.wheel apm apmctl
	chmod 644 apm apmctl
	;;

rnd|srnd|urnd|prnd)
	rm -f rnd urnd srnd prnd
	mknod  rnd c 45 0
	mknod srnd c 45 1
	mknod urnd c 45 2
	mknod prnd c 45 3
	chown root.wheel rnd srnd urnd prnd
	chmod 644 rnd srnd urnd prnd
	;;

pcmcia*)
	rm -f pcmcia/bus? pcmcia/chip? pcmcia/slot*
	mkdir -p pcmcia
	mknod pcmcia/bus0 c 26 128
	mknod pcmcia/bus1 c 26 129
	mknod pcmcia/bus2 c 26 130
	mknod pcmcia/bus3 c 26 131
	mknod pcmcia/chip0 c 26 64
	mknod pcmcia/chip1 c 26 65
	mknod pcmcia/chip2 c 26 66
	mknod pcmcia/chip3 c 26 67
	mknod pcmcia/slot0 c 26 0
	mknod pcmcia/slot1 c 26 1
	mknod pcmcia/slot2 c 26 2
	mknod pcmcia/slot3 c 26 3
	mknod pcmcia/slot4 c 26 4
	mknod pcmcia/slot5 c 26 5
	mknod pcmcia/slot6 c 26 6
	mknod pcmcia/slot7 c 26 7
	mknod pcmcia/slot8 c 26 8
	mknod pcmcia/slot9 c 26 9
	mknod pcmcia/slot10 c 26 10
	mknod pcmcia/slot11 c 26 11
	mknod pcmcia/slot12 c 26 12
	mknod pcmcia/slot13 c 26 13
	mknod pcmcia/slot14 c 26 14
	mknod pcmcia/slot15 c 26 15
	chown -R root.wheel pcmcia
	chmod 700 pcmcia
	chmod 600 pcmcia/*
	;;

uk*)
	unit=`expr $i : 'uk\(.*\)'`
	rm -f uk$unit
	mknod uk$unit c 20 $unit
	chown root.wheel uk$unit
	chmod 600 uk$unit
	;;
	
local)
	umask 0
	sh MAKEDEV.local
	;;

esac
done
