#!/bin/sh -
#	$OpenBSD: MAKEDEV,v 1.51 2001/05/14 07:56:36 deraadt Exp $
#	$NetBSD: MAKEDEV,v 1.8.4.1 1996/06/18 00:41:56 cgd Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
#	wd*	ISA "winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	raid*	RAIDframe disk driver
#
# Terminal ports:
#	ttyB?	DEC 3000 ZS8530 ("scc") serial ports
#	tty0?	AlphaStation NS16550 ("com") serial ports
#	ttyC?	Workstation console ("wscons") tty emulators
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	ugen*	Generic device
#	utty*	Serial ports
#
# Special purpose devices:
#	ch*	SCSI media changer
#	bpf*	Berkeley Packet Filter
#	fd	makes fd/* for the fdescfs.
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	mmclock	memory mapped clock
#	kbd	keyboard (provides events, for X11)
#	mouse	mouse (provides events, for X11)
#	*random	inkernal random data source
#	uk*	SCSI Unknown device
#	ss*	SCSI scanners

PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77

# default shell support functions
add ()
{
	tmp=0
	while [ "$1" ]
	do
		tmp=$(( $1 + $tmp ))
		shift
	done
	echo $tmp
}
mult ()
{
	echo "$(( $1 * $2 ))"
}
hex ()
{
	case $1 in
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
	esac
}
trunc ()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	echo ${arg1#$arg2}
}
unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	tmp="${arg1#[a-z]*}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1#[a-z]*}"
	done
	tmp="${arg1%*[a-z]}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1%*[a-z]}"
	done
	echo $arg1
}

for i
do

unit=`unt $i`
[ "$unit" ] || unit=0

case $i in

all)
	sh $this std fd sd0 sd1 sd2 sd3 sd4 pty0 pty1
	sh $this st0 st1 ch0 cd0 cd1 vnd0 vnd1 vnd2 vnd3
	sh $this ccd0 ccd1 ccd2 ccd3 wd0 wd1 wd2 wd3
	sh $this raid0 raid1 raid2 raid3
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh $this tun0 tun1 tun2 tun3
	sh $this ttyB0 ttyB1 tty00 tty01 lkm
	sh $this mmclock lpa0 lpt0 random
	sh $this uk0 uk1 ss0 ss1
	sh $this ttyc0 ttyc1 ttyc2 ttyc3 ttyc4 ttyc5 ttyc6 ttyc7
	sh $this local xfs0
	sh $this usbs wscons ttyCcfg 
	;;

raminst)
	sh $this std random
	sh $this sd0 sd1 sd2 wd0 st0
	sh $this cd0
	sh $this rd0 bpf0
	sh $this ttyB0 ttyB1 tty00 tty01 ttyC0 ttyC1 pty0
	sh $this wsmouse0 wskbd0
	sh $this ttyCcfg
	;;

wscons)
	sh $this ttyC0 ttyC1 ttyC2 ttyC3 ttyC4 ttyC5 ttyC6 ttyC7
	sh $this wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $this wskbd0 wskbd1 wskbd2 wskbd3
	sh $this ttyCcfg wsmux
	;;

wsmux|wskbd|wsmouse)
        rm -f wsmouse wskbd
        mknod wsmouse c 56 0
        mknod wskbd c 56 1
        chown root.wheel wsmouse wskbd
        chmod 600 wsmouse wskbd
        ;;

usbs)
	sh $this usb usb0 usb1
	sh $this uhid0 uhid1 uhid2 uhid3
	sh $this ugen0 ugen1
	sh $this ulpt0 ulpt1
	sh $this utty0 utty1
	;;
std)
	rm -f console drum mem kmem null zero tty klog stdin stdout stderr ksyms
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chown root.kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chown root.kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chown root.kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 12	; chmod 666 zero
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 10 0	; chmod 666 stdin
	mknod stdout		c 10 1	; chmod 666 stdout
	mknod stderr		c 10 2	; chmod 666 stderr
	mknod ksyms		c 39 0  ; chmod 640 ksyms ; chown root.kmem ksyms
	;;

usb*)
	rm -f usb$unit
	mknod usb$unit c 45 $unit
	chown root.wheel usb$unit
	chmod 660 usb$unit
	;;

uhid*)
	rm -f uhid$unit
	mknod uhid$unit c 46 $unit
	chown root.wheel uhid$unit
	chmod 660 uhid$unit
	;;

ulpt*)
	rm -f ulpt$unit
	mknod ulpt$unit c 47 $unit
	chown root.wheel ulpt$unit
	chmod 660 ulpt$unit
	;;

ugen*)
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		rm -f ugen$unit.$j
		mknod ugen$unit.$j c 48 $(( $unit * 16 + $j ))
		chown root.wheel ugen$unit.$j
		chmod 660 ugen$unit.$j
	done
	;;

utty*)
	rm -f utty$unit
	mknod utty$unit c 49 $unit
	chown root.wheel utty$unit
	chmod 660 utty$unit
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	(cd fd && while [ $n -lt 64 ]; do mknod $n c 10 $n; n=`add $n 1`; done)
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
	;;

sd*|wd*|ccd*|rd*|raid*)
	umask 2 ; unit=${i##*d}
	case $i in
	rd*)	name=rd;	blk=6; chr=28;;
	sd*)	name=sd;	blk=8; chr=8;;
	ccd*)	name=ccd;	blk=7; chr=27;;
	wd*)	name=wd;	blk=0; chr=36;;
	raid*)	name=raid;	blk=16; chr=43;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk      $(mult $unit 16)
	mknod ${name}${unit}b	b $blk `add $(mult $unit 16) 1`
	mknod ${name}${unit}c	b $blk `add $(mult $unit 16) 2`
	mknod ${name}${unit}d	b $blk `add $(mult $unit 16) 3`
	mknod ${name}${unit}e	b $blk `add $(mult $unit 16) 4`
	mknod ${name}${unit}f	b $blk `add $(mult $unit 16) 5`
	mknod ${name}${unit}g	b $blk `add $(mult $unit 16) 6`
	mknod ${name}${unit}h	b $blk `add $(mult $unit 16) 7`
	mknod ${name}${unit}i	b $blk `add $(mult $unit 16) 8`
	mknod ${name}${unit}j	b $blk `add $(mult $unit 16) 9`
	mknod ${name}${unit}k	b $blk `add $(mult $unit 16) 10`
	mknod ${name}${unit}l	b $blk `add $(mult $unit 16) 11`
	mknod ${name}${unit}m	b $blk `add $(mult $unit 16) 12`
	mknod ${name}${unit}n	b $blk `add $(mult $unit 16) 13`
	mknod ${name}${unit}o	b $blk `add $(mult $unit 16) 14`
	mknod ${name}${unit}p	b $blk `add $(mult $unit 16) 15`
	mknod r${name}${unit}a	c $chr `add $(mult $unit 16) 0`
	mknod r${name}${unit}b	c $chr `add $(mult $unit 16) 1`
	mknod r${name}${unit}c	c $chr `add $(mult $unit 16) 2`
	mknod r${name}${unit}d	c $chr `add $(mult $unit 16) 3`
	mknod r${name}${unit}e	c $chr `add $(mult $unit 16) 4`
	mknod r${name}${unit}f	c $chr `add $(mult $unit 16) 5`
	mknod r${name}${unit}g	c $chr `add $(mult $unit 16) 6`
	mknod r${name}${unit}h	c $chr `add $(mult $unit 16) 7`
	mknod r${name}${unit}i	c $chr `add $(mult $unit 16) 8`
	mknod r${name}${unit}j	c $chr `add $(mult $unit 16) 9`
	mknod r${name}${unit}k	c $chr `add $(mult $unit 16) 10`
	mknod r${name}${unit}l	c $chr `add $(mult $unit 16) 11`
	mknod r${name}${unit}m	c $chr `add $(mult $unit 16) 12`
	mknod r${name}${unit}n	c $chr `add $(mult $unit 16) 13`
	mknod r${name}${unit}o	c $chr `add $(mult $unit 16) 14`
	mknod r${name}${unit}p	c $chr `add $(mult $unit 16) 15`
	chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
	chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	umask 77
	;;

vnd*)
	umask 2
	for name in vnd svnd; do
		blk=9; chr=9;
		case $name in
		vnd)	off=0;;
		svnd)	off=128;;
		esac
		rm -f $name$unit? r$name$unit?
		mknod ${name}${unit}a	b $blk `add $(mult $unit 16) $off 0`
		mknod ${name}${unit}b	b $blk `add $(mult $unit 16) $off 1`
		mknod ${name}${unit}c	b $blk `add $(mult $unit 16) $off 2`
		mknod ${name}${unit}d	b $blk `add $(mult $unit 16) $off 3`
		mknod ${name}${unit}e	b $blk `add $(mult $unit 16) $off 4`
		mknod ${name}${unit}f	b $blk `add $(mult $unit 16) $off 5`
		mknod ${name}${unit}g	b $blk `add $(mult $unit 16) $off 6`
		mknod ${name}${unit}h	b $blk `add $(mult $unit 16) $off 7`
		mknod ${name}${unit}i	b $blk `add $(mult $unit 16) $off 8`
		mknod ${name}${unit}j	b $blk `add $(mult $unit 16) $off 9`
		mknod ${name}${unit}k	b $blk `add $(mult $unit 16) $off 10`
		mknod ${name}${unit}l	b $blk `add $(mult $unit 16) $off 11`
		mknod ${name}${unit}m	b $blk `add $(mult $unit 16) $off 12`
		mknod ${name}${unit}n	b $blk `add $(mult $unit 16) $off 13`
		mknod ${name}${unit}o	b $blk `add $(mult $unit 16) $off 14`
		mknod ${name}${unit}p	b $blk `add $(mult $unit 16) $off 15`
		mknod r${name}${unit}a	c $chr `add $(mult $unit 16) $off 0`
		mknod r${name}${unit}b	c $chr `add $(mult $unit 16) $off 1`
		mknod r${name}${unit}c	c $chr `add $(mult $unit 16) $off 2`
		mknod r${name}${unit}d	c $chr `add $(mult $unit 16) $off 3`
		mknod r${name}${unit}e	c $chr `add $(mult $unit 16) $off 4`
		mknod r${name}${unit}f	c $chr `add $(mult $unit 16) $off 5`
		mknod r${name}${unit}g	c $chr `add $(mult $unit 16) $off 6`
		mknod r${name}${unit}h	c $chr `add $(mult $unit 16) $off 7`
		mknod r${name}${unit}i	c $chr `add $(mult $unit 16) $off 8`
		mknod r${name}${unit}j	c $chr `add $(mult $unit 16) $off 9`
		mknod r${name}${unit}k	c $chr `add $(mult $unit 16) $off 10`
		mknod r${name}${unit}l	c $chr `add $(mult $unit 16) $off 11`
		mknod r${name}${unit}m	c $chr `add $(mult $unit 16) $off 12`
		mknod r${name}${unit}n	c $chr `add $(mult $unit 16) $off 13`
		mknod r${name}${unit}o	c $chr `add $(mult $unit 16) $off 14`
		mknod r${name}${unit}p	c $chr `add $(mult $unit 16) $off 15`
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	done
	umask 77
	;;

cd*)
	umask 2
	case $i in
	cd*)	name=cd;	blk=3; chr=13;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk `add $(mult $unit 16) 0` 
	mknod ${name}${unit}c	b $blk `add $(mult $unit 16) 2` 
	mknod r${name}${unit}a	c $chr `add $(mult $unit 16) 0` 
	mknod r${name}${unit}c	c $chr `add $(mult $unit 16) 2` 
	chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
	chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	umask 77
	;;

ttyCcfg)
	rm -f $i
	mknod $i c 25 255  
	chown root:wheel $i 
	;;

ttyC*)
	type=C
	unit=${i##ttyC}
	case $type in
	C)	major=25; minor=$unit ;;
	esac
        rm -f tty$type$unit
        mknod tty$type$unit c $major $minor
        chown root.wheel tty$type$unit
        ;;

ttyB*|tty0*|ttyc*)
		  unit=${i##tty?}
	case $i in
	ttyB*)	type=B; major=15; minor=`mult $unit 2`;;
	tty0*)	type=0; major=26; minor=$unit ;;
	ttyc*)	type=c; major=38; minor=$unit ;;
	esac
        rm -f tty$type$unit cua$type$unit
        mknod tty$type$unit c $major $minor
        mknod cua$type$unit c $major `add $minor 128`
        chown uucp.dialer tty$type$unit cua$type$unit
	chmod 660 tty$type$unit cua$type$unit
        ;;

pty*)
	class=${i##pty}
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		n=0
		while [ $n -lt 16 ]
		do
			nam=$name`hex $n`
			rm -f tty$nam pty$nam
			mknod tty$nam c 4 `add $offset $n`
			mknod pty$nam c 5 `add $offset $n`
			n=`add $n 1`
		done
		umask 77
		;;
	esac
	;;

st*)
	umask 2
	name=st; blk=2; chr=12
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
	r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod ${name}${unit}	b $blk `add $(mult $unit 16) 0`
	mknod n${name}${unit}	b $blk `add $(mult $unit 16) 1`
	mknod e${name}${unit}	b $blk `add $(mult $unit 16) 2`
	mknod en${name}${unit}	b $blk `add $(mult $unit 16) 3`
	mknod r${name}${unit}	c $chr `add $(mult $unit 16) 0`
	mknod nr${name}${unit}	c $chr `add $(mult $unit 16) 1`
	mknod er${name}${unit}	c $chr `add $(mult $unit 16) 2`
	mknod enr${name}${unit} c $chr `add $(mult $unit 16) 3`
	chown root.operator ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	chmod 660 ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	umask 77
	;;

ch*)
	umask 2
	name=ch; chr=14
	rm -f $name$unit
	mknod ${name}${unit}	c $chr $unit
	chown root.operator ${name}${unit}
	chmod 660 ${name}${unit}
	umask 77
	;;

bpf*)
	rm -f bpf$unit
	mknod bpf$unit c 11 $unit
	chmod 600 bpf$unit
	chown root.wheel bpf$unit
	;;

tun*)
	rm -f tun$unit
	mknod tun$unit c 7 $unit
	chmod 600 tun$unit
	chown root.wheel tun$unit
	;;

lkm)
	rm -f lkm
	mknod lkm c 16 0
	chown root.kmem lkm
	chmod 640 lkm
	;;

mmclock)
	rm -f mmclock
	mknod mmclock c 28 0
	chmod 444 mmclock
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	rm -f $wskbd
	mknod $wskbd c 29 $unit
	chmod 600 $wskbd
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	rm -f $wsmouse
	mknod $wsmouse c 30 $unit
	chmod 600 $wsmouse
	;;

lpt*|lpa*)
	case $i in
	lpt*) name=lpt; flags=0;;
	lpa*) name=lpa; flags=128;;
	esac
	rm -f $name$unit
	mknod $name$unit c 31 `add $unit $flags`
	chown root.wheel $name$unit
	;;

random|srandom|urandom|prandom|arandom)
	rm -f random urandom srandom prandom arandom
	mknod  random c 34 0
	mknod srandom c 34 1
	mknod urandom c 34 2
	mknod prandom c 34 3
	mknod arandom c 34 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
	;;

uk*)
	rm -f uk$unit
	mknod uk$unit c 33 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
	;;

ss*)
	rm -f ss$unit
	mknod ss$unit c 32 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
#	backwards compatibility with older PINTs
	rm -f scan$unit
	ln -s ss$unit scan$unit
	;;
xfs*)
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
	chown root.wheel xfs$unit
	;;

local)
	umask 0
	test -s MAKEDEV.local && sh $this.local
	;;

*)
	echo $i: unknown device
	;;

esac
done
